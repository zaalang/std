//
// toml scanner
//

import toml;
import std.io : InputReader;
import std.strconv;

pub struct mark
{
  pub int line;
  pub int column;

  pub mark() = default;
  pub mark(mark&) = default;
  pub fn =(mark mut &, mark &&) -> mark mut & = default;
  pub ~mark() = default;
}

pub enum scalar_style
{
  invalid = 0,
  plain,
  singlequoted,
  doublequoted,
}

pub struct token
{
  pub enum type
  {
    invalid = 0,
    stream_end,
    l_square,
    r_square,
    l_brace,
    r_brace,
    comma,
    equal,
    period,
    scalar,

    //bad_indent_character,
    //bad_indent_indicator,
    //invalid_sequence_start,
    //invalid_mapping_start,
    //invalid_simple_key,
    //unexpected_document_indicator,
    unexpected_end_of_stream,
    bad_escape,
  }

  pub type type;
  pub std::string value;
  pub scalar_style style;
  pub mark loc;

  pub token() = default;
  pub token(token&&) = default;
  pub fn =(token mut &, token &&) -> token mut & = default;
  pub ~token() = default;
}

fn make_token(token::type type, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.loc = loc;

  return tok;
}

fn make_token(token::type type, std::string value, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.value = std::move(value);
  tok.loc = loc;

  return tok;
}

fn make_token(token::type type, scalar_style style, std::string value, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.value = std::move(value);
  tok.style = style;
  tok.loc = loc;

  return tok;
}

pub struct scanner
{
  //int flow_level;
  //usize tokens_head;
  //usize tokens_parsed;
  //bool allow_simple_key;
  //bool allow_adjacent_value;
  //std::vector<simple_key> simple_keys;

  //int indent;
  //std::vector<int> indents;

  //std::vector<token> tokens;

  mark loc;

  fn peek(this mut &, InputReader mut &is) throws -> u8
  {
    if (var buffer = is.fetch(); buffer.len != 0)
      return buffer[0];

    return 0;
  }

  fn peek(this mut &, InputReader mut &is, usize index) throws -> u8
  {
    if (var buffer = this.prefix(is, index + 1); index < buffer.len)
      return buffer[index];

    return 0;
  }

  fn prefix(this mut &, InputReader mut &is, usize len) throws -> std::string_view
  {
    if (is.buffer.len < len)
      is.pack_and_fetch();

    return std::string_view(is.buffer.data, std::min(is.buffer.len, len));
  }

  fn eat(scanner mut &this, InputReader mut &is) -> void
  {
    this.loc.column += 1;

    if (is.buffer[0] == cast('\n'))
    {
      this.loc.line += 1;
      this.loc.column = 0;
    }

    is.discard(1);
  }

  pub scanner()
  {
    //indent = -1;
    //allow_simple_key = true;
    //emit_stream_start(this);
  }

  pub ~scanner() = default;
}

fn is_z(u8 ch) -> bool
{
  return ch == cast('\0');
}

fn is_alpha(u8 ch) -> bool
{
  return cast('0') <= ch && ch <= cast('9') || cast('a') <= ch && ch <= cast('z') || cast('A') <= ch && ch <= cast('Z') || ch == cast('_') || ch == cast('-');
}

fn is_digit(u8 ch) -> bool
{
  return cast('0') <= ch && ch <= cast('9');
}

fn is_whitespace(u8 ch) -> bool
{
  return ch == cast('\0') || ch == cast(' ') || ch == cast('\t') || ch == cast('\r') || ch == cast('\n');
}

fn is_blank(u8 ch) -> bool
{
  return ch == cast(' ') || ch == cast('\t');
}

fn is_break(u8 ch) -> bool
{
  return ch == cast('\r') || ch == cast('\n');
}

fn is_breakz(u8 ch) -> bool
{
  return ch == cast('\0') || ch == cast('\r') || ch == cast('\n');
}
/*
fn is_flow(u8 ch) -> bool
{
  return ch == cast(',') || ch == cast('[') || ch == cast(']') || ch == cast('{') || ch == cast('}');
}
*/
fn skip_blank(scanner mut &this, InputReader mut &is) throws -> void
{
  while (is_blank(this.peek(is)))
    this.eat(is);
}

fn skip_break(scanner mut &this, InputReader mut &is) throws -> void
{
  if (is_break(this.peek(is)))
  {
    if (this.prefix(is, 2) == "\r\n")
      this.eat(is);

    this.eat(is);
  }
}
/*
fn read_break(scanner mut &this, InputReader mut &is, std::string mut &result) throws -> void
{
  if (is_break(this.peek(is)))
  {
    skip_break(this, is);

    result += cast<u8>('\n');
  }
}
*/
fn scan_to_next_break(scanner mut &this, InputReader mut &is) throws -> void
{
  while (!is_breakz(this.peek(is)))
    this.eat(is);
}

fn scan_to_next_token(scanner mut &this, InputReader mut &is) throws -> void
{
  for(;;)
  {
    switch (this.peek(is))
    {
      case ' ':
      case '\t':
        this.eat(is);

      case '\r':
      case '\n':
        skip_break(this, is);

      case '#':
        scan_to_next_break(this, is);

      else:
        break;
    }
  }
}
/*
fn scan_flow_collection_start(scanner mut &this, InputReader mut &is, token::type type) throws -> void
{
  var loc = this.loc;

  save_simple_key(this);
  this.allow_simple_key = true;
  this.allow_adjacent_value = false;
  this.simple_keys.push_back(simple_key());

  this.flow_level += 1;

  this.eat(is);

  this.tokens.push_back(make_token(type, loc));
}

fn scan_flow_collection_end(scanner mut &this, InputReader mut &is, token::type type) throws -> void
{
  var loc = this.loc;

  remove_simple_key(this);
  this.allow_simple_key = false;
  this.allow_adjacent_value = (this.flow_level > 0);
  this.simple_keys.pop_back();
  this.flow_level -= 1;

  this.eat(is);

  this.tokens.push_back(make_token(type, loc));
}

fn scan_flow_entry(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  remove_simple_key(this);
  this.allow_simple_key = true;
  this.allow_adjacent_value = false;

  this.eat(is);

  this.tokens.push_back(make_token(token::type::flow_entry, loc));
}
*/
fn scan_flow_scalar(scanner mut &this, InputReader mut &is, scalar_style style) throws -> token
{
  var loc = this.loc;

  var value = std::string();
  //var leading_break = std::string();
  //var trailing_breaks = std::string();
  //var whitespaces = std::string();
  var leading_blanks = false;

  this.eat(is);

  for(;;)
  {
    var ch = this.peek(is);

    if (is_z(ch))
      return make_token(token::type::unexpected_end_of_stream, this.loc);

    leading_blanks = false;

    for(;;)
    {
      switch (ch)
      {
        case ' ':
        case '\t':
        case '\r':
        case '\n':
        case '\0':
          break;

        case '\'':
          if (style == scalar_style::singlequoted)
          {
            if (this.peek(is, 1) != cast('\''))
              break;

            this.eat(is);
          }

          value += ch;
          this.eat(is);

        case '"':
          if (style == scalar_style::doublequoted)
          {
            break;
          }

          value += ch;
          this.eat(is);

        case '\\':
          if (style == scalar_style::doublequoted)
          {
            var length = 0;

            switch (this.peek(is, 1))
            {
              case '\r':
              case '\n':
                this.eat(is);
                skip_break(this, is);
                leading_blanks = true;
                ch = this.peek(is);
                break;

              case '0': value += cast<u8>('\0');
              case 'a': value += cast<u8>('\x07');
              case 'b': value += cast<u8>('\x08');
              case 't': value += cast<u8>('\t');
              case '\t': value += cast<u8>('\t');
              case 'n': value += cast<u8>('\n');
              case 'v': value += cast<u8>('\x0b');
              case 'f': value += cast<u8>('\x0c');
              case 'r': value += cast<u8>('\x0d');
              case 'e': value += cast<u8>('\x1b');
              case ' ': value += cast<u8>('\x20');
              case '"': value += cast<u8>('"');
              case '/': value += cast<u8>('/');
              //case '\'': value += cast<u8>('\'');
              case '\\': value += cast<u8>('\\');
              case 'N': value += '\x85';
              case '_': value += '\xA0';
              case 'L': value += '\x2028';
              case 'P': value += '\x2029';
              case 'x': length = 2;
              case 'u': length = 4;
              case 'U': length = 8;
              else:
                return make_token(token::type::bad_escape, this.loc);
            }

            if (length != 0)
            {
              var codepoint = ' ';
              var buffer = this.prefix(is, length + 2);

              if (std::atoi(buffer.data + 2, buffer.end, codepoint, 16).len != length)
                return make_token(token::type::bad_escape, this.loc);

              for(var i = 0; i < buffer.len - 2; ++i)
                this.eat(is);

              value += codepoint;
            }

            this.eat(is);
            this.eat(is);
          }
          else
          {
            value += ch;
            this.eat(is);
          }

        else:
          value += ch;
          this.eat(is);
      }

      ch = this.peek(is);
    }

    if (style == scalar_style::singlequoted && ch == cast('\''))
      break;

    if (style == scalar_style::doublequoted && ch == cast('"'))
      break;

    while (is_blank(ch) || is_break(ch))
    {
      if (is_blank(ch))
      {
        if (!leading_blanks)
          value += ch;
      }

      this.eat(is);

      ch = this.peek(is);
    }

    leading_blanks = false;
  }

  this.eat(is);

  return make_token(token::type::scalar, style, value, loc);
}
/*
fn scan_anchor(scanner mut &this, InputReader mut &is, token::type type) throws -> void
{
  var loc = this.loc;

  save_simple_key(this);
  this.allow_simple_key = false;

  var value = std::string();

  this.eat(is);

  var ch = this.peek(is);

  while (is_alpha(ch) || ch == cast(':'))
  {
    value += ch;
    this.eat(is);
    ch = this.peek(is);
  }

  this.tokens.push_back(make_token(type, value, loc));
}

fn is_key(scanner mut &this, InputReader mut &is) throws -> bool
{
  return this.flow_level > 0 || is_whitespace(this.peek(is, 1));
}

fn scan_key(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  if (this.flow_level == 0)
  {
    if (!this.allow_simple_key)
      this.tokens.push_back(make_token(token::type::invalid_mapping_start, loc));

    if (add_indent(this, this.loc.column))
      this.tokens.push_back(make_token(token::type::block_mapping_start, loc));
  }

  remove_simple_key(this);
  this.allow_simple_key = (this.flow_level == 0);

  this.eat(is);
  skip_blank(this, is);

  this.tokens.push_back(make_token(token::type::key, loc));
}

fn is_value(scanner mut &this, InputReader mut &is) throws -> bool
{
  return (this.flow_level > 0 && (is_flow(this.peek(is, 1)) || this.allow_adjacent_value)) || is_whitespace(this.peek(is, 1));
}

fn scan_value(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  var key = this.simple_keys.back();

  if (key.possible)
  {
    var idx = key.token_number - this.tokens_parsed + this.tokens_head;

    this.tokens.insert(this.tokens.begin + idx, make_token(token::type::key, loc));

    if (this.flow_level == 0 && add_indent(this, key.loc.column))
      this.tokens.insert(this.tokens.begin + idx, make_token(token::type::block_mapping_start, loc));

    this.simple_keys.back.possible = false;
    this.allow_simple_key = false;
  }
  else
  {
    if (this.flow_level == 0 && !this.allow_simple_key)
      this.tokens.push_back(make_token(token::type::invalid_mapping_start, loc));

    if (this.flow_level == 0 && add_indent(this, this.loc.column))
      this.tokens.push_back(make_token(token::type::block_mapping_start, loc));

    this.allow_simple_key = (this.flow_level == 0);
  }

  this.allow_adjacent_value = false;

  this.eat(is);
  skip_blank(this, is);

  this.tokens.push_back(make_token(token::type::value, loc));
}

fn is_block_entry(scanner mut &this, InputReader mut &is) throws -> bool
{
  return is_whitespace(this.peek(is, 1));
}

fn scan_block_entry(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  if (this.flow_level == 0)
  {
    if (!this.allow_simple_key)
      this.tokens.push_back(make_token(token::type::invalid_sequence_start, loc));

    if (add_indent(this, this.loc.column))
      this.tokens.push_back(make_token(token::type::block_sequence_start, loc));
  }

  remove_simple_key(this);
  this.allow_simple_key = true;

  this.eat(is);
  skip_blank(this, is);

  this.tokens.push_back(make_token(token::type::block_entry, loc));
}

fn block_scalar_breaks(scanner mut &this, InputReader mut &is, int mut &indent, std::string mut &result) throws -> void
{
  var max_indent = 0;

  for(;;)
  {
    while ((indent == 0 || this.loc.column < indent) && this.peek(is) == cast(' '))
      this.eat(is);

    if (this.loc.column > max_indent)
      max_indent = this.loc.column;

    if (this.loc.column < indent && this.peek(is) == cast('\t'))
      this.tokens.push_back(make_token(token::type::bad_indent_character, this.loc));

    if (!is_break(this.peek(is)))
      break;

    read_break(this, is, result);
  }

  if (indent == 0)
  {
    indent = max_indent;

    if (indent < this.indent + 1)
      indent = this.indent + 1;
  }
}

fn scan_block_scalar(scanner mut &this, InputReader mut &is, scalar_style style) throws -> void
{
  var loc = this.loc;

  save_simple_key(this);
  this.allow_simple_key = true;

  var indent = 0;
  var chomping = 0;
  var increment = 0;
  var trailing_blank = false;
  var leading_blank = false;

  var value = std::string();
  var leading_break = std::string();
  var trailing_breaks = std::string();

  this.eat(is);
  var ch = this.peek(is);

  if (ch == cast('+') || ch == cast('-'))
  {
    chomping = (ch == cast('+')) ? +1 : -1;

    this.eat(is);

    if (ch = this.peek(is); is_digit(ch))
    {
      if (ch == cast('0'))
        this.tokens.push_back(make_token(token::type::bad_indent_indicator, this.loc));

      increment = cast<int>(ch) - cast('0');

      this.eat(is);
    }
  }
  else if (is_digit(ch))
  {
    if (ch == cast('0'))
      this.tokens.push_back(make_token(token::type::bad_indent_indicator, this.loc));

    increment = cast<int>(ch) - cast('0');

    this.eat(is);

    if (ch = this.peek(is); ch == cast('+') || ch == cast('-'))
    {
      chomping = (ch == cast('+')) ? +1 : -1;

      this.eat(is);
    }
  }

  skip_blank(this, is);

  if (this.peek(is) == cast('#'))
    scan_to_next_break(this, is);

  skip_break(this, is);

  if (increment > 0)
    indent = (this.indent > 0) ? this.indent + increment : increment;

  block_scalar_breaks(this, is, indent, trailing_breaks);

  while (this.loc.column == indent)
  {
    if (ch = this.peek(is); !is_z(ch))
    {
      trailing_blank = is_blank(ch);

      if (style == scalar_style::folded && !leading_break.empty && !leading_blank && !trailing_blank)
      {
        if (trailing_breaks.empty)
          value += cast<u8>(' ');
      }
      else
      {
        value += leading_break;
      }

      value += trailing_breaks;

      leading_break.clear();
      trailing_breaks.clear();

      leading_blank = is_blank(ch);

      while (!is_breakz(ch))
      {
        value += ch;
        this.eat(is);
        ch = this.peek(is);
      }
    }

    if (is_z(ch))
      break;

    read_break(this, is, leading_break);

    block_scalar_breaks(this, is, indent, trailing_breaks);
  }

  if (chomping != -1)
    value += leading_break;

  if (chomping == +1)
    value += trailing_breaks;

  this.tokens.push_back(make_token(token::type::scalar, style, value, loc));
}
*/
fn scan_token(scanner mut &this, InputReader mut &is, token::type type) throws -> token
{
  var loc = this.loc;

  this.eat(is);

  return make_token(type, loc);
}

fn scan_plain(scanner mut &this, InputReader mut &is) throws -> token
{
  var loc = this.loc;
  var value = std::string();

  var ch = this.peek(is);

  var numeric = false;
  if (is_digit(ch) || ch == cast('.') || ch == cast('+') || ch == cast('-'))
    numeric = true;

  for(;;)
  {
    switch (ch)
    {
      case ' ':
      case '\t':
      case '\r':
      case '\n':
      case '\0':
        break;

      case '#':
      case ']':
      case '[':
      case '{':
      case '}':
      case '=':
      case ',':
        break;

      case '.':
        if (!numeric)
          break;
    }

    value += ch;
    this.eat(is);
    ch = this.peek(is);
  }

  return make_token(token::type::scalar, scalar_style::plain, value, loc);
}

pub fn scan(scanner mut &this, InputReader mut &is) throws -> token
{
  scan_to_next_token(this, is);

  var ch = this.peek(is);

  if (ch == 0)
    return make_token(token::type::stream_end, this.loc);

  switch(ch)
  {
    case '[':
      return scan_token(this, is, token::type::l_square);
    case '{':
      return scan_token(this, is, token::type::l_brace);
    case ']':
      return scan_token(this, is, token::type::r_square);
    case '}':
      return scan_token(this, is, token::type::r_brace);
    case ',':
      return scan_token(this, is, token::type::comma);
    case '\'':
      return scan_flow_scalar(this, is, scalar_style::singlequoted);
    case '\"':
      return scan_flow_scalar(this, is, scalar_style::doublequoted);
    case '=':
      return scan_token(this, is, token::type::equal);
    case '.':
      return scan_token(this, is, token::type::period);
  }

  return scan_plain(this, is);
}
