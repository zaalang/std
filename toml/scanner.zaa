//
// toml scanner
//

import toml;
import std.io : InputReader;
import std.strconv;

pub struct mark
{
  pub int line;
  pub int column;

  pub mark() = default;
  pub mark(mark&) = default;
  pub fn =(mark mut &, mark &&) -> mark mut & = default;
  pub ~mark() = default;
}

pub enum scalar_style
{
  invalid = 0,
  plain,
  singlequoted,
  doublequoted,
}

pub struct token
{
  pub enum type
  {
    invalid = 0,
    stream_end,
    l_square,
    r_square,
    l_brace,
    r_brace,
    comma,
    equal,
    period,
    scalar,
    unexpected_end_of_line,
    unexpected_end_of_stream,
    bad_escape,
  }

  pub type type;
  pub std::string value;
  pub scalar_style style;
  pub mark loc;

  pub token() = default;
  pub token(token&&) = default;
  pub fn =(token mut &, token &&) -> token mut & = default;
  pub ~token() = default;
}

fn make_token(token::type type, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.loc = loc;

  return tok;
}

fn make_token(token::type type, std::string value, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.value = &move value;
  tok.loc = loc;

  return tok;
}

fn make_token(token::type type, scalar_style style, std::string value, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.value = &move value;
  tok.style = style;
  tok.loc = loc;

  return tok;
}

pub struct scanner
{
  mark loc;

  fn peek(this mut &, InputReader mut &is) throws -> u8
  {
    if (var buffer = is.fetch(); buffer.len != 0)
      return buffer[0];

    return 0;
  }

  fn peek(this mut &, InputReader mut &is, usize index) throws -> u8
  {
    if (var buffer = this.prefix(&mut is, index + 1); index < buffer.len)
      return buffer[index];

    return 0;
  }

  fn prefix(this mut &, InputReader mut &is, usize len) throws -> std::string_view
  {
    if (is.buffer.len < len)
      is.pack_and_fetch();

    return std::string_view(is.buffer.data, std::min(is.buffer.len, len));
  }

  fn eat(scanner mut &this, InputReader mut &is) -> void
  {
    this.loc.column += 1;

    if (is.buffer[0] == cast('\n'))
    {
      this.loc.line += 1;
      this.loc.column = 0;
    }

    is.discard(1);
  }

  pub scanner()
  {
  }

  pub ~scanner() = default;
}

fn is_z(u8 ch) -> bool
{
  return ch == cast('\0');
}

fn is_alpha(u8 ch) -> bool
{
  return cast('0') <= ch && ch <= cast('9') || cast('a') <= ch && ch <= cast('z') || cast('A') <= ch && ch <= cast('Z') || ch == cast('_') || ch == cast('-');
}

fn is_digit(u8 ch) -> bool
{
  return cast('0') <= ch && ch <= cast('9');
}

fn is_whitespace(u8 ch) -> bool
{
  return ch == cast('\0') || ch == cast(' ') || ch == cast('\t') || ch == cast('\r') || ch == cast('\n');
}

fn is_blank(u8 ch) -> bool
{
  return ch == cast(' ') || ch == cast('\t');
}

fn is_break(u8 ch) -> bool
{
  return ch == cast('\r') || ch == cast('\n');
}

fn is_breakz(u8 ch) -> bool
{
  return ch == cast('\0') || ch == cast('\r') || ch == cast('\n');
}

fn skip_blank(scanner mut &this, InputReader mut &is) throws -> void
{
  while (is_blank(this.peek(&mut is)))
    this.eat(&mut is);
}

fn skip_break(scanner mut &this, InputReader mut &is) throws -> void
{
  if (is_break(this.peek(&mut is)))
  {
    if (this.prefix(&mut is, 2) == "\r\n")
      this.eat(&mut is);

    this.eat(&mut is);
  }
}

fn scan_to_next_break(scanner mut &this, InputReader mut &is) throws -> void
{
  while (!is_breakz(this.peek(&mut is)))
    this.eat(&mut is);
}

fn scan_to_next_token(scanner mut &this, InputReader mut &is) throws -> void
{
  for (;;)
  {
    switch (this.peek(&mut is))
    {
      case ' ':
      case '\t':
        this.eat(&mut is);

      case '\r':
      case '\n':
        skip_break(&mut this, &mut is);

      case '#':
        scan_to_next_break(&mut this, &mut is);

      else:
        break;
    }
  }
}

fn scan_token(scanner mut &this, InputReader mut &is, token::type type) throws -> token
{
  var loc = this.loc;

  this.eat(&mut is);

  return make_token(type, loc);
}

fn is_multiline_end(scanner mut &this, InputReader mut &is, scalar_style style) throws -> bool
{
  switch (style)
  {
    case singlequoted:
      return this.prefix(&mut is, 3) == "'''" && this.peek(&mut is, 3) != cast('\'');

    case doublequoted:
      return this.prefix(&mut is, 3) == "\"\"\"" && this.peek(&mut is, 3) != cast('"');

    else:
      return false;
  }
}

fn scan_string_scalar(scanner mut &this, InputReader mut &is, scalar_style style) throws -> token
{
  var loc = this.loc;

  var value = std::string();
  var multiline = false;
  var leading_blanks = false;

  this.eat(&mut is);

  if (this.prefix(&mut is, 2) == "\"\"" || this.prefix(&mut is, 2) == "''")
  {
    multiline = true;
    this.eat(&mut is);
    this.eat(&mut is);
    skip_break(&mut this, &mut is);
  }

  for (;;)
  {
    var ch = this.peek(&mut is);

    if (is_z(ch))
      return make_token(token::type::unexpected_end_of_stream, this.loc);

    leading_blanks = false;

    for (;;)
    {
      switch (ch)
      {
        case '\r':
        case '\n':
        case '\0':
          break;

        case '\'':
          if (style == scalar_style::singlequoted)
          {
            if (!multiline || is_multiline_end(&mut this, &mut is, style))
              break;
          }

          value += ch;
          this.eat(&mut is);

        case '"':
          if (style == scalar_style::doublequoted)
          {
            if (!multiline || is_multiline_end(&mut this, &mut is, style))
              break;
          }

          value += ch;
          this.eat(&mut is);

        case '\\':
          if (style == scalar_style::doublequoted)
          {
            var length = 0;

            switch (this.peek(&mut is, 1))
            {
              case ' ':
              case '\t':
              case '\r':
              case '\n':
                this.eat(&mut is);
                skip_blank(&mut this, &mut is);
                skip_break(&mut this, &mut is);
                leading_blanks = true;
                ch = this.peek(&mut is);
                break;

              case '0': value += cast<u8>('\0');
              case 'a': value += cast<u8>('\x07');
              case 'b': value += cast<u8>('\x08');
              case 't': value += cast<u8>('\t');
              case 'n': value += cast<u8>('\n');
              case 'v': value += cast<u8>('\x0b');
              case 'f': value += cast<u8>('\x0c');
              case 'r': value += cast<u8>('\x0d');
              case 'e': value += cast<u8>('\x1b');
              case '"': value += cast<u8>('"');
              case '/': value += cast<u8>('/');
              //case '\'': value += cast<u8>('\'');
              case '\\': value += cast<u8>('\\');
              case 'x': length = 2;
              case 'u': length = 4;
              case 'U': length = 8;
              else:
                return make_token(token::type::bad_escape, this.loc);
            }

            if (length != 0)
            {
              var codepoint = ' ';
              var buffer = this.prefix(&mut is, length + 2);

              if (std::atoi(buffer.data + 2, buffer.end, &mut codepoint, 16).len != length)
                return make_token(token::type::bad_escape, this.loc);

              for (var i = 0; i < buffer.len - 2; ++i)
                this.eat(&mut is);

              value += codepoint;
            }

            this.eat(&mut is);
            this.eat(&mut is);
          }
          else
          {
            value += ch;
            this.eat(&mut is);
          }

        else:
          value += ch;
          this.eat(&mut is);
      }

      ch = this.peek(&mut is);
    }

    if (!multiline)
    {
      if (style == scalar_style::singlequoted && ch == cast('\''))
        break;

      if (style == scalar_style::doublequoted && ch == cast('"'))
        break;

      return make_token(token::type::unexpected_end_of_line, this.loc);
    }

    if (is_multiline_end(&mut this, &mut is, style))
    {
      this.eat(&mut is);
      this.eat(&mut is);
      break;
    }

    while (is_blank(ch) || is_break(ch))
    {
      if (!leading_blanks)
        value += ch;

      this.eat(&mut is);

      ch = this.peek(&mut is);
    }

    leading_blanks = false;
  }

  this.eat(&mut is);

  return make_token(token::type::scalar, style, value, loc);
}

fn scan_plain_scalar(scanner mut &this, InputReader mut &is) throws -> token
{
  var loc = this.loc;
  var value = std::string();

  var ch = this.peek(&mut is);

  var numeric = false;
  if (is_digit(ch) || ch == cast('.') || ch == cast('+') || ch == cast('-'))
    numeric = true;

  for (;;)
  {
    switch (ch)
    {
      case ' ':
      case '\t':
      case '\r':
      case '\n':
      case '\0':
        break;

      case '#':
      case ']':
      case '[':
      case '{':
      case '}':
      case '=':
      case ',':
        break;

      case '.':
        if (!numeric)
          break;
    }

    value += ch;
    this.eat(&mut is);
    ch = this.peek(&mut is);
  }

  return make_token(token::type::scalar, scalar_style::plain, value, loc);
}

pub fn scan(scanner mut &this, InputReader mut &is) throws -> token
{
  scan_to_next_token(&mut this, &mut is);

  var ch = this.peek(&mut is);

  if (ch == 0)
    return make_token(token::type::stream_end, this.loc);

  switch (ch)
  {
    case '[':
      return scan_token(&mut this, &mut is, token::type::l_square);
    case '{':
      return scan_token(&mut this, &mut is, token::type::l_brace);
    case ']':
      return scan_token(&mut this, &mut is, token::type::r_square);
    case '}':
      return scan_token(&mut this, &mut is, token::type::r_brace);
    case ',':
      return scan_token(&mut this, &mut is, token::type::comma);
    case '\'':
      return scan_string_scalar(&mut this, &mut is, scalar_style::singlequoted);
    case '\"':
      return scan_string_scalar(&mut this, &mut is, scalar_style::doublequoted);
    case '=':
      return scan_token(&mut this, &mut is, token::type::equal);
    case '.':
      return scan_token(&mut this, &mut is, token::type::period);
  }

  return scan_plain_scalar(&mut this, &mut is);
}
