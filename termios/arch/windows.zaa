//
// termios
//

import std.stdio;
import os.windows.kernel32;
import os.windows.synchapi;
import os.windows.console;
import os.windows.error;

pub const STDIN_FILENO = 0;
pub const STDOUT_FILENO = 1;
pub const STDERR_FILENO = 2;

pub const ENABLE_PROCESSED_INPUT = 0x1;
pub const ENABLE_LINE_INPUT = 0x2;
pub const ENABLE_ECHO_INPUT = 0x4;
pub const ENABLE_WINDOW_INPUT = 0x8;
pub const ENABLE_MOUSE_INPUT = 0x10;
pub const ENABLE_INSERT_MODE = 0x20;
pub const ENABLE_QUICK_EDIT_MODE = 0x40;
pub const ENABLE_EXTENDED_FLAGS = 0x80;
pub const ENABLE_AUTO_POSITION = 0x100;
pub const ENABLE_VIRTUAL_TERMINAL_INPUT = 0x200;

pub const ENABLE_PROCESSED_OUTPUT = 0x1;
pub const ENABLE_WRAP_AT_EOL_OUTPUT = 0x2;
pub const ENABLE_VIRTUAL_TERMINAL_PROCESSING = 0x4;
pub const DISABLE_NEWLINE_AUTO_RETURN = 0x8;
pub const ENABLE_LVB_GRID_WORLDWIDE = 0x10;

pub struct termios
{
  u32 mode;

  pub termios() = default;
  pub termios(termios&) = default;
  pub fn =(termios mut &, termios &) -> termios mut & = default;
  pub ~termios() = default;
}

pub struct winsize
{
  pub u16 ws_row;
  pub u16 ws_col;
  pub u16 ws_xpixel;
  pub u16 ws_ypixel;

  pub winsize() = default;
  pub winsize(winsize&) = default;
  pub fn =(winsize mut &, winsize &) -> winsize mut & = default;
  pub ~winsize() = default;
}

pub fn isatty(i32 fd) -> bool
{
  using os;

  var handle = GetStdHandle(STD_INPUT_HANDLE);

  var mode = 0;
  if (GetConsoleMode(handle, &mode) == 0)
    return false;

  return true;
}

pub fn read(i32 fd, u8 mut *buffer, usize len) -> i32
{
  using os;

  var mode = 0;
  var bytesread = 0;
  var handle = GetStdHandle(STD_INPUT_HANDLE);

  if (GetConsoleMode(handle, &mode) != 0)
  {
    static p = 0;
    static n = 0;
    static buf = [<u8>: 0; 8];

    var nevents = 0;
    GetNumberOfConsoleInputEvents(handle, &nevents);

    for (;;)
    {
      while (p < n)
      {
        *buffer++ = buf[p++];
        bytesread += 1;

        if (cast(bytesread) == len)
          return cast(bytesread);
      }

      p = n = 0;

      if (nevents == 0)
        break;

      var eventsread = 0;
      var input = INPUT_RECORD(void);

      if (ReadConsoleInputW(handle, &input, 1, &eventsread) == 0)
        return -cast<i32>(error_code(GetLastError()));

      switch (input.EventType)
      {
        case KEY_EVENT:
          var event = cast<KEY_EVENT_RECORD*>(input.Event.data);

          if (event.bKeyDown == 1)
          {
            switch (event.Char)
            {
              case 0:

                switch (event.wVirtualKeyCode)
                {
                  case 0x25: // VK_LEFT
                    if (event.dwControlKeyState & 0xc != 0)
                    {
                      buf = [ 0x1b, 0x5b, 0x31, 0x3b, 0x35, 0x44, 0, 0 ];
                      n = 6;
                    }
                    else
                    {
                      buf = [ 0x1b, 0x4f, 0x44, 0, 0, 0, 0, 0 ];
                      n = 3;
                    }

                  case 0x27: // VK_RIGHT
                    if (event.dwControlKeyState & 0xc != 0)
                    {
                      buf = [ 0x1b, 0x5b, 0x31, 0x3b, 0x35, 0x43, 0, 0 ];
                      n = 6;
                    }
                    else
                    {
                      buf = [ 0x1b, 0x4f, 0x43, 0, 0, 0, 0, 0 ];
                      n = 3;
                    }

                  case 0x26: // VK_UP
                    if (event.dwControlKeyState & 0xc != 0)
                    {
                      buf = [ 0x1b, 0x5b, 0x31, 0x3b, 0x35, 0x41, 0, 0 ];
                      n = 6;
                    }
                    else
                    {
                      buf = [ 0x1b, 0x4f, 0x41, 0, 0, 0, 0, 0 ];
                      n = 3;
                    }

                  case 0x28: // VK_DOWN
                    if (event.dwControlKeyState & 0xc != 0)
                    {
                      buf = [ 0x1b, 0x5b, 0x31, 0x3b, 0x35, 0x42, 0, 0 ];
                      n = 6;
                    }
                    else
                    {
                      buf = [ 0x1b, 0x4f, 0x42, 0, 0, 0, 0, 0 ];
                      n = 3;
                    }
                }

              case 0x01 ..= 0x7f:

                buf[0] = cast<u8>(event.Char);
                n = 1;

              else:

                var nchars = WideCharToMultiByte(CP_UTF8, 0, &event.Char, 1, buf.data, cast(buf.len), null, null);
                n = cast(nchars);
            }
          }

        //case MOUSE_EVENT:
        //case WINDOW_BUFFER_SIZE_EVENT:
        //case MENU_EVENT:
        //case FOCUS_EVENT:
      }

      nevents -= 1;
    }

    if (bytesread == 0)
      return -11;
  }
  else
  {
    if (WaitForSingleObject(handle, 0) != WAIT_OBJECT_0)
      return -11;

    if (ReadFile(handle, buffer, cast(len), &bytesread, null) == 0)
      return -cast<i32>(error_code(GetLastError()));
  }

  return cast(bytesread);
}

pub fn write(i32 fd, u8 *data, usize len) -> i32
{
  using os;

  var handle = GetStdHandle(STD_OUTPUT_HANDLE);

  var byteswritten = 0;
  if (WriteFile(handle, data, cast(len), &byteswritten, null) == 0)
    return -cast<i32>(error_code(GetLastError()));

  return cast(byteswritten);
}

pub fn poll(i32 fd, u64 timeout = ~0) -> i32
{
  using os;

  var handle = GetStdHandle(STD_INPUT_HANDLE);

  if (WaitForSingleObject(handle, cast((timeout / 1_000_000) & 0xffffffff)) == WAIT_FAILED)
    return -cast<i32>(error_code(GetLastError()));

  return 0;
}

pub fn get_termios(i32 fd, termios mut &state) -> i32
{
  using os;

  var handle = GetStdHandle(STD_INPUT_HANDLE);

  if (GetConsoleMode(handle, &state.mode) == 0)
    return -cast<i32>(error_code(GetLastError()));

  return 0;
}

pub fn get_termios(termios mut &state) -> i32
{
  return get_termios(STDIN_FILENO, &mut state);
}

pub fn set_termios(i32 fd, termios &state) -> i32
{
  using os;

  var handle = GetStdHandle(STD_INPUT_HANDLE);

  if (SetConsoleMode(handle, state.mode) == 0)
    return -cast<i32>(error_code(GetLastError()));

  FlushConsoleInputBuffer(handle);

  return 0;
}

pub fn get_winsize(i32 fd, int mut &cols, int mut &rows) -> i32
{
  using os;

  var handle = GetStdHandle(STD_OUTPUT_HANDLE);

  var info = CONSOLE_SCREEN_BUFFER_INFO();

  if (GetConsoleScreenBufferInfo(handle, &info) == 0)
    return -cast<i32>(error_code(GetLastError()));

  cols = cast(info.srWindow.Right - info.srWindow.Left + 1);
  rows = cast(info.srWindow.Bottom - info.srWindow.Top + 1);

  return 0;
}

pub fn get_winsize(int mut &cols, int mut &rows) -> i32
{
  return get_winsize(STDIN_FILENO, &mut cols, &mut rows);
}

pub fn echo_off(i32 fd) -> i32
{
  using os;

  var state = termios(void);
  if (var rc = get_termios(fd, &mut state); rc < 0)
    return rc;

  state.mode &= ~ENABLE_ECHO_INPUT;

  if (var rc = set_termios(fd, state); rc < 0)
    return rc;

  return 0;
}

pub fn echo_on(i32 fd) -> i32
{
  using os;

  var state = termios(void);
  if (var rc = get_termios(fd, &mut state); rc < 0)
    return rc;

  state.mode |= ENABLE_ECHO_INPUT;

  if (var rc = set_termios(fd, state); rc < 0)
    return rc;

  return 0;
}

pub fn enable_raw_mode(i32 fd, termios mut &oldstate) -> i32
{
  using os;

  if (var rc = get_termios(fd, &mut oldstate); rc < 0)
    return rc;

  var state = oldstate;
  state.mode &= ~ENABLE_ECHO_INPUT;
  state.mode &= ~ENABLE_LINE_INPUT;
  state.mode &= ~ENABLE_MOUSE_INPUT;
  state.mode &= ~ENABLE_WINDOW_INPUT;
  state.mode &= ~ENABLE_PROCESSED_INPUT;

  state.mode |= ENABLE_EXTENDED_FLAGS;
  state.mode |= ENABLE_INSERT_MODE;
  state.mode |= ENABLE_QUICK_EDIT_MODE;

  if (var rc = set_termios(fd, state); rc < 0)
    return rc;

  return 0;
}

pub fn enable_raw_mode(termios mut &oldstate) -> i32
{
  return enable_raw_mode(STDIN_FILENO, &mut oldstate);
}

pub fn restore_cooked_mode(i32 fd, termios mut &oldstate) -> i32
{
  if (var rc = set_termios(fd, oldstate); rc < 0)
    return rc;

  return 0;
}

pub fn restore_cooked_mode(termios mut &oldstate) -> i32
{
  return restore_cooked_mode(STDIN_FILENO, &mut oldstate);
}
