//
// termios
//

import std.stdio;
import os.linux.time;
import os.linux.fcntl : STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO;

pub const TCGETS = 0x5401;
pub const TCSETS = 0x5402;
pub const TIOCGWINSZ = 0x5413;
pub const TIOCSWINSZ = 0x5414;

pub const TCSANOW   = 0;
pub const TCSADRAIN = 1;
pub const TCSAFLUSH = 2;

pub enum IFLAG
{
  pub const IGNBRK = 0o00001;  // ignore break condition
  pub const BRKINT = 0o00002;  // signal interrupt on break
  pub const IGNPAR = 0o00004;  // ignore characters with parity errors
  pub const PARMRK = 0o00010;  // mark parity and framing errors
  pub const INPCK  = 0o00020;  // enable input parity check
  pub const ISTRIP = 0o00040;  // strip 8th bit off characters
  pub const INLCR  = 0o00100;  // map NL to CR on input
  pub const IGNCR  = 0o00200;  // ignore CR
  pub const ICRNL  = 0o00400;  // map CR to NL on input
  pub const IXON   = 0o02000;  // enable start/stop output control
  pub const IXANY  = 0o04000;  // enable any character to restart output
  pub const IXOFF  = 0o10000;  // enable start/stop input control
  pub const IUTF8  = 0o40000;  // input is UTF8
}

pub enum OFLAG
{
  pub const OPOST  = 0o00001;  // post-process output
  pub const ONLCR  = 0o00004;  // map NL to CR-NL on output
  pub const OCRNL  = 0o00010;  // map CR to NL on output
  pub const ONOCR  = 0o00020;  // no CR output at column 0
  pub const ONLRET = 0o00040;  // NL performs CR function
  pub const OFILL  = 0o00100;  // use fill characters for delay
  pub const OFDEL  = 0o00200;  // fill is DEL
}

pub enum CFLAG
{
  pub const CSIZE  = 0o00060;  // character size mask
  pub const   CS5  = 0o00000;
  pub const   CS6  = 0o00020;
  pub const   CS7  = 0o00040;
  pub const   CS8  = 0o00060;
  pub const CSTOPB = 0o00100;  // set two stop bits, rather than one
  pub const CREAD  = 0o00200;  // enable receiver
  pub const PARENB = 0o00400;  // enable parity generation/checking
  pub const PARODD = 0o01000;  // parity odd/even
  pub const HUPCL  = 0o02000;  // modem control lines
  pub const CLOCAL = 0o04000;  // ignore modem control lines
}

pub enum LFLAG
{
  pub const ISIG   = 0o000001; // enable signals
  pub const ICANON = 0o000002; // canonical input (erase and kill processing)
  pub const ECHO   = 0o000010; // enable echo
  pub const ECHOE  = 0o000020; // echo erase character as error-correcting backspace
  pub const ECHOK  = 0o000040; // echo KILL
  pub const ECHONL = 0o000100; // echo NL
  pub const NOFLSH = 0o000200; // disable flush after interrupt or quit
  pub const TOSTOP = 0o000400; // send SIGTTOU for background output
  pub const IEXTEN = 0o100000; // enable implementation-defined input
}

pub enum CC
{
  pub const VINTR = 0;
  pub const VQUIT = 1;
  pub const VERASE = 2;
  pub const VKILL = 3;
  pub const VEOF = 4;
  pub const VTIME = 5;
  pub const VMIN = 6;
  pub const VSWTC = 7;
  pub const VSTART = 8;
  pub const VSTOP = 9;
  pub const VSUSP = 10;
  pub const VEOL = 11;
  pub const VREPRINT = 12;
  pub const VDISCARD = 13;
  pub const VWERASE = 14;
  pub const VLNEXT = 15;
  pub const VEOL2 = 16;
}

pub struct termios
{
  pub u32 c_iflag;
  pub u32 c_oflag;
  pub u32 c_cflag;
  pub u32 c_lflag;
  pub u8 c_line;
  pub u8[32] c_cc;
  pub u32 __c_ispeed;
  pub u32 __c_ospeed;

  pub termios() = default;
  pub termios(termios&) = default;
  pub fn =(termios mut &, termios &) -> termios mut & = default;
  pub ~termios() = default;
}

pub struct winsize
{
  pub u16 ws_row;
  pub u16 ws_col;
  pub u16 ws_xpixel;
  pub u16 ws_ypixel;

  pub winsize() = default;
  pub winsize(winsize&) = default;
  pub fn =(winsize mut &, winsize &) -> winsize mut & = default;
  pub ~winsize() = default;
}

pub fn isatty(i32 fd) -> bool
{
  var state = termios(void);

  if (var rc = os::ioctl(fd, TCGETS, &state); rc < 0)
    return false;

  return true;
}

pub fn read(i32 fd, u8 mut *buffer, usize len) -> i32
{
  if (poll(fd, 0) <= 0)
    return os::EAGAIN;

  return cast(os::read(fd, buffer, len));
}

pub fn write(i32 fd, u8 *data, usize len) -> i32
{
  return cast(os::write(fd, data, len));
}

pub fn poll(i32 fd, u64 timeout = ~0) -> i32
{
  var readset = os::fd_set();
  os::fd_set(&mut readset, fd);
  var tv = os::timeval(timeout / 1_000_000_000, timeout % 1_000_000_000);

  return os::select(fd + 1, &readset, null, null, &tv);
}

pub fn get_termios(i32 fd, termios mut &state) -> i32
{
  if (var rc = os::ioctl(fd, TCGETS, &state); rc < 0)
    return rc;

  return 0;
}

pub fn get_termios(termios mut &state) -> i32
{
  return get_termios(STDOUT_FILENO, &mut state);
}

pub fn set_termios(i32 fd, termios &state) -> i32
{
  if (var rc = os::ioctl(fd, TCSETS + TCSAFLUSH, &state); rc < 0)
    return rc;

  return 0;
}

pub fn get_winsize(i32 fd, int mut &cols, int mut &rows) -> i32
{
  var ws = winsize(void);
  if (var rc = os::ioctl(fd, TIOCGWINSZ, &ws); rc < 0)
    return rc;

  cols = cast(ws.ws_col);
  rows = cast(ws.ws_row);

  return 0;
}

pub fn get_winsize(int mut &cols, int mut &rows) -> i32
{
  return get_winsize(STDOUT_FILENO, &mut cols, &mut rows);
}

pub fn set_winsize(i32 fd, usize width, usize height) -> i32
{
  var ws = winsize(void);

  ws.ws_col = cast(width);
  ws.ws_row = cast(height);
  ws.ws_xpixel = 0;
  ws.ws_ypixel = 0;

  if (var rc = os::ioctl(fd, TIOCSWINSZ, &ws); rc < 0)
    return rc;

  return 0;
}

pub fn echo_off(i32 fd) -> i32
{
  var state = termios(void);
  if (var rc = os::ioctl(fd, TCGETS, &state); rc < 0)
    return rc;

  state.c_lflag &= ~LFLAG::ECHO;

  if (var rc = os::ioctl(fd, TCSETS + TCSAFLUSH, &state); rc < 0)
    return rc;

  return 0;
}

pub fn echo_on(i32 fd) -> i32
{
  var state = termios(void);
  if (var rc = os::ioctl(fd, TCGETS, &state); rc < 0)
    return rc;

  state.c_lflag |= LFLAG::ECHO;

  if (var rc = os::ioctl(fd, TCSETS + TCSAFLUSH, &state); rc < 0)
    return rc;

  return 0;
}

pub fn enable_raw_mode(i32 fd, termios mut &oldstate) -> i32
{
  if (var rc = os::ioctl(fd, TCGETS, &oldstate); rc < 0)
    return rc;

  var raw = oldstate;
  raw.c_iflag &= ~(IFLAG::BRKINT | IFLAG::ICRNL | IFLAG::INPCK | IFLAG::ISTRIP | IFLAG::IXON);
  raw.c_oflag &= ~(OFLAG::OPOST);
  raw.c_cflag |= (CFLAG::CS8);
  raw.c_lflag &= ~(LFLAG::ECHO | LFLAG::ICANON | LFLAG::IEXTEN | LFLAG::ISIG);
  raw.c_cc[CC::VMIN] = 0;
  raw.c_cc[CC::VTIME] = 0;

  if (var rc = os::ioctl(fd, TCSETS + TCSAFLUSH, &raw); rc < 0)
    return rc;

  return 0;
}

pub fn enable_raw_mode(termios mut &oldstate) -> i32
{
  return enable_raw_mode(STDOUT_FILENO, &mut oldstate);
}

pub fn restore_cooked_mode(i32 fd, termios mut &oldstate) -> i32
{
  if (var rc = os::ioctl(fd, TCSETS + TCSAFLUSH, &oldstate); rc < 0)
    return rc;

  return 0;
}

pub fn restore_cooked_mode(termios mut &oldstate) -> i32
{
  return restore_cooked_mode(STDOUT_FILENO, &mut oldstate);
}
