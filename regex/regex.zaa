//
// regex
//

import std.stdlib : assert;
import std.string : String;
import std.span : Span;
import std.scan;
import regex.parser;
import regex.compiler;
import regex.machine;

pub enum errc : u32
{
  internal_error = 1,
  bad_escape,              // bad escape sequence
  bad_char_class,          // bad character class
  bad_char_range,          // bad character class range
  missing_bracket,         // missing closing ]
  missing_paren,           // missing closing )
  unexpected_paren,        // unexpected closing )
  trailing_backslash,      // trailing \ at end of regexp
  missing_repeat_argument, // repeat argument missing, e.g. "*"
  invalid_digit,           // invalid digit
  invalid_repeat_argument, // invalid argument e.g. emptymatch
  invalid_repeat_size,     // invalid repetition argument
  invalid_repeat_op,       // invalid repetition operator
  invalid_utf8,            // invalid UTF-8 in regexp
  invalid_named_capture,   // invalid named capture group

  pub fn bool(errc code) -> bool
  {
    return cast<u32>(code) != 0;
  }
}

pub enum options
{
  foldcase = 0x1,         // case-insensitive match
  multiline = 0x2,        // treat ^ and $ as only matching beginning and end of line

  pub const fn bool(options lhs) -> bool { return cast<isize>(lhs) != 0; }

  pub const fn ~(options lhs) -> options { return cast<options>(~cast<isize>(lhs)); }
  pub const fn &(options lhs, options rhs) -> options { return cast<options>(cast<isize>(lhs) & cast<isize>(rhs)); }
  pub const fn |(options lhs, options rhs) -> options { return cast<options>(cast<isize>(lhs) | cast<isize>(rhs)); }
}

pub enum opcode
{
  nop,                // no-op
  match,              // found a match!
  fork,               // fork
  jump,               // jump
  condition,          // empty-width special (^ $ ...)
  select,             // next must be in [lo, hi]
  selecti,            // next rune (case-folded) must be in [lo, hi]
  capture,            // capturing parenthesis
  fail,               // fail to match
}

pub enum condition
{
  begintext,          // \A - beginning of text
  beginline,          // ^ - beginning of line
  endline,            // $ - end of line
  endtext,            // \z - end of text
  wordboundary,       // \b - word boundary
  nonwordboundary,    // \B - not \b
}

pub struct ctre
{
  options flags;
  std::string_literal pattern;

  pub const fn ~=(#ctre &rex, String &str) -> bool
  {
    return match(std::span(#build(rex.pattern, rex.flags)), str);
  }

  pub const fn ctre(#std::string_literal pattern, #options flags = cast(0))
  {
    var ctre = ctre();
    ctre.flags = flags;
    ctre.pattern = pattern;

    return ctre;
  }

  ctre() = default;
  ctre(#ctre&) = default;
  pub ~ctre() = default;
}

pub struct regex
{
  pub errc error;
  pub std::vector<u32> program;

  pub fn ~=(this &rex, String &str) -> bool
  {
    return match(std::span(rex.program), str);
  }

  pub regex(String &pattern, options flags = cast(0))
  {
    var ast = std::vector<expr>();

    this.error = parse(pattern, &mut ast, flags);

    if (!this.error)
    {
      this.error = compile(ast, &mut program, flags);
    }
  }

  pub regex(#std::string_literal pattern, #options flags = cast(0))
  {
    this.program = std::vector::from(#build(pattern, flags));
  }

  pub regex() = default;
  pub regex(regex&&) = default;
  pub fn =(regex mut &, regex &&) -> regex mut & = default;
  pub ~regex() = default;
}

fn build(std::string_literal pattern, options flags)
{
  var ast = std::vector<expr>();
  if (var r = parse(pattern, &mut ast, flags); r != cast<errc>(0))
    std::panic("regex parse error : ", r);

  var program = std::vector<u32>();
  if (var r = compile(ast, &mut program, flags); r != cast<errc>(0))
    std::panic("regex compile error : ", r);

  return program.as_literal;
}

fn match<Args>(std::span<u32> program, std::string_view text) -> bool
{
  var vm = machine(text);

  if (vm.execute(program))
    return true;

  return false;
}

fn match<Args>(std::span<u32> program, std::string_view text, Args mut & ...args) -> bool
{
  var captures = [text.end; 2 + 2*std::tuple_len<Args>];

  var vm = machine(text);

  if (vm.execute(program, &mut captures))
  {
    #for (var mut &arg : args, const i = 2;; i += 2)
    {
      std::sscan(std::string_view(captures[i], captures[i+1]), &mut arg);
    }

    return true;
  }

  return false;
}

fn find<Args>(std::span<u32> program, std::string_view text, Args mut & ...args) -> std::string_view
{
  var captures = [text.end; 2 + 2*std::tuple_len<Args>];

  var vm = machine(text);

  if (vm.execute(program, &mut captures))
  {
    #for (var mut &arg : args, const i = 2;; i += 2)
    {
      std::sscan(std::string_view(captures[i], captures[i+1]), &mut arg);
    }
  }

  return std::string_view(captures[0], captures[1]);
}

pub fn create(String &pattern, options flags = cast(0)) -> regex
{
  return regex(pattern, flags);
}

pub fn create(#std::string_literal pattern, #options flags = cast(0)) -> regex
{
  return regex(pattern, flags);
}

pub fn match(regex &rex, String &text) -> bool
{
  assert(!rex.error, "invalid regex");

  return match(std::span(rex.program), std::string_view(text));
}

pub fn match(#std::string_literal pattern, String &text) -> bool
{
  let program = #build(pattern, cast<options>(0));

  return match(std::span(program), std::string_view(text));
}

pub fn match<Args>(regex &rex, String &text, Args mut & ...args) -> bool
{
  assert(!rex.error, "invalid regex");

  return match(std::span(rex.program), std::string_view(text), &mut args...);
}

pub fn match<Args>(#std::string_literal pattern, String &text, Args mut & ...args) -> bool
{
  let program = #build(pattern, cast<options>(0));

  return match(std::span(program), std::string_view(text), &mut args...);
}

pub fn find<Args>(regex &rex, String &text, Args mut & ...args) -> std::string_view
{
  assert(!rex.error, "invalid regex");

  return find(std::span(rex.program), std::string_view(text), &mut args...);
}

pub fn find<Args>(#std::string_literal pattern, String &text, Args mut & ...args) -> std::string_view
{
  let program = #build(pattern, cast<options>(0));

  return find(std::span(program), std::string_view(text), &mut args...);
}
