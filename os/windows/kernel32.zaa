//
// kernel32
//

import os.windows.ntdef : *;

pub using HFILE = int;
pub using HANDLE = uintptr;
pub using HLOCAL = void mut *;
pub using HGLOBAL = void mut *;
pub using HMODULE = void mut *;

pub const INFINITE = 0xffffffff;

pub const CP_UTF8 = 65001;

pub const PAGE_READONLY = 0x02;
pub const PAGE_READWRITE = 0x04;

pub const FILE_MAP_WRITE = 0x02;
pub const FILE_MAP_READ = 0x04;

pub const GENERIC_READ = 0x80000000;
pub const GENERIC_WRITE = 0x40000000;
pub const GENERIC_EXECUTE = 0x20000000;
pub const GENERIC_ALL = 0x10000000;

pub const CREATE_NEW = 1;
pub const CREATE_ALWAYS = 2;
pub const OPEN_EXISTING = 3;
pub const OPEN_ALWAYS = 4;
pub const TRUNCATE_EXISTING = 5;

pub const FILE_SHARE_READ = 0x00000001;
pub const FILE_SHARE_WRITE = 0x00000002;
pub const FILE_SHARE_DELETE = 0x00000004;

pub const FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;
pub const FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;
pub const FILE_FLAG_OVERLAPPED = 0x40000000;

pub const FILE_ATTRIBUTE_READONLY = 0x00000001;
pub const FILE_ATTRIBUTE_HIDDEN = 0x00000002;
pub const FILE_ATTRIBUTE_SYSTEM = 0x00000004;
pub const FILE_ATTRIBUTE_DIRECTORY = 0x00000010;
pub const FILE_ATTRIBUTE_ARCHIVE = 0x00000020;
pub const FILE_ATTRIBUTE_DEVICE = 0x00000040;
pub const FILE_ATTRIBUTE_NORMAL = 0x00000080;
pub const FILE_ATTRIBUTE_TEMPORARY = 0x00000100;
pub const FILE_ATTRIBUTE_SPARSE_FILE = 0x00000200;
pub const FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400;
pub const FILE_ATTRIBUTE_COMPRESSED = 0x00000800;
pub const FILE_ATTRIBUTE_OFFLINE = 0x00001000;
pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x00002000;
pub const FILE_ATTRIBUTE_ENCRYPTED = 0x00004000;

pub const STD_INPUT_HANDLE = -DWORD(10);
pub const STD_OUTPUT_HANDLE = -DWORD(11);
pub const STD_ERROR_HANDLE = -DWORD(12);

pub const INVALID_FILE_ATTRIBUTES = u32(0xffffffff);

pub const INVALID_HANDLE_VALUE = uintptr(~0);

pub struct SECURITY_ATTRIBUTES
{
  pub DWORD nLength;
  pub LPVOID lpSecurityDescriptor;
  pub BOOL bInheritHandle;

  pub SECURITY_ATTRIBUTES() = default;
  pub SECURITY_ATTRIBUTES(SECURITY_ATTRIBUTES &) = default;
  pub fn =(SECURITY_ATTRIBUTES mut &, SECURITY_ATTRIBUTES &) -> SECURITY_ATTRIBUTES mut & = default;
  pub ~SECURITY_ATTRIBUTES() = default;
}

pub struct OVERLAPPED
{
  pub ULONG *Internal;
  pub ULONG *InternalHigh;
  pub VOID *Pointer;
  pub HANDLE hEvent;

  pub OVERLAPPED() = default;
  pub OVERLAPPED(OVERLAPPED &) = default;
  pub fn =(OVERLAPPED mut &, OVERLAPPED &) -> OVERLAPPED mut & = default;
  pub ~OVERLAPPED() = default;
}

pub extern "C" fn GetLastError() -> DWORD;
pub extern "C" fn MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar) -> int;
pub extern "C" fn WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, BOOL mut *lpUsedDefaultChar) -> int;
pub extern "C" fn FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, void *Arguments) -> DWORD;
pub extern "C" fn CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, SECURITY_ATTRIBUTES *lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile) -> HANDLE;
pub extern "C" fn CreateFileMappingW(HANDLE hFile, SECURITY_ATTRIBUTES mut *lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName) -> HANDLE;
pub extern "C" fn CreateDirectoryW(LPCWSTR lpPathName, SECURITY_ATTRIBUTES *lpSecurityAttributes) -> BOOL;
pub extern "C" fn MapViewOfFileEx(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress) -> LPVOID;
pub extern "C" fn UnmapViewOfFileEx(LPCVOID BaseAddress, ULONG UnmapFlags) -> BOOL;
pub extern "C" fn GetFileSizeEx(HANDLE hFile, LARGE_INTEGER mut *lpFileSize) -> BOOL;
pub extern "C" fn ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD mut *lpNumberOfBytesRead, OVERLAPPED mut *lpOverlapped) -> BOOL;
pub extern "C" fn WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, DWORD mut *lpNumberOfBytesWritten, OVERLAPPED mut *lpOverlapped) -> BOOL;
pub extern "C" fn CreatePipe(HANDLE mut *hReadPipe, HANDLE mut *hWritePipe, SECURITY_ATTRIBUTES *lpPipeAttributes, DWORD nSize) -> BOOL;
pub extern "C" fn PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, DWORD mut *lpBytesRead, DWORD mut *lpTotalBytesAvail, DWORD mut *lpBytesLeftThisMessage) -> BOOL;
pub extern "C" fn MoveFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName) -> BOOL;
pub extern "C" fn DeleteFileW(LPCWSTR lpFileName) -> BOOL;
pub extern "C" fn RemoveDirectoryW(LPCWSTR lpPathName) -> BOOL;
pub extern "C" fn DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, HANDLE mut *lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions) -> BOOL;
pub extern "C" fn GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer) -> DWORD;
pub extern "C" fn GetStdHandle(DWORD nStdHandle) -> HANDLE;
pub extern "C" fn CloseHandle(HANDLE hObject) -> BOOL;

pub const MAX_PATH = 260;
pub const MAX_LONG_PATH = 32768;

pub enum GET_FILEEX_INFO_LEVELS
{
  GetFileExInfoStandard,
  GetFileExMaxInfoLevel,
}

pub struct FILETIME
{
  pub DWORD dwLowDateTime;
  pub DWORD dwHighDateTime;

  pub FILETIME() = default;
  pub FILETIME(FILETIME &) = default;
  pub fn =(FILETIME mut &, FILETIME &) -> FILETIME mut & = default;
  pub ~FILETIME() = default;
}

pub struct BY_HANDLE_FILE_INFORMATION
{
  pub DWORD dwFileAttributes;
  pub FILETIME ftCreationTime;
  pub FILETIME ftLastAccessTime;
  pub FILETIME ftLastWriteTime;
  pub DWORD dwVolumeSerialNumber;
  pub DWORD nFileSizeHigh;
  pub DWORD nFileSizeLow;
  pub DWORD nNumberOfLinks;
  pub DWORD nFileIndexHigh;
  pub DWORD nFileIndexLow;

  pub BY_HANDLE_FILE_INFORMATION() = default;
  pub BY_HANDLE_FILE_INFORMATION(BY_HANDLE_FILE_INFORMATION &) = default;
  pub fn =(BY_HANDLE_FILE_INFORMATION mut &, BY_HANDLE_FILE_INFORMATION &) -> BY_HANDLE_FILE_INFORMATION mut & = default;
  pub ~BY_HANDLE_FILE_INFORMATION() = default;
}

pub extern "C" fn GetFileInformationByHandle(HANDLE hFile, BY_HANDLE_FILE_INFORMATION mut *lpFileInformation) -> BOOL;

pub struct WIN32_FILE_ATTRIBUTE_DATA
{
  pub DWORD dwFileAttributes;
  pub FILETIME ftCreationTime;
  pub FILETIME ftLastAccessTime;
  pub FILETIME ftLastWriteTime;
  pub DWORD nFileSizeHigh;
  pub DWORD nFileSizeLow;

  pub WIN32_FILE_ATTRIBUTE_DATA() = default;
  pub WIN32_FILE_ATTRIBUTE_DATA(WIN32_FILE_ATTRIBUTE_DATA &) = default;
  pub fn =(WIN32_FILE_ATTRIBUTE_DATA mut &, WIN32_FILE_ATTRIBUTE_DATA &) -> WIN32_FILE_ATTRIBUTE_DATA mut & = default;
  pub ~WIN32_FILE_ATTRIBUTE_DATA() = default;
}

pub extern "C" fn GetFileAttributesExW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation) -> BOOL;

pub struct WIN32_FIND_DATAW
{
  pub DWORD dwFileAttributes;
  pub FILETIME ftCreationTime;
  pub FILETIME ftLastAccessTime;
  pub FILETIME ftLastWriteTime;
  pub DWORD nFileSizeHigh;
  pub DWORD nFileSizeLow;
  pub DWORD dwReserved0;
  pub DWORD dwReserved1;
  pub WCHAR[MAX_PATH] cFileName;
  pub WCHAR[14] cAlternateFileName;
  pub DWORD dwFileType; // Obsolete. Do not use.
  pub DWORD dwCreatorType; // Obsolete. Do not use
  pub WORD wFinderFlags; // Obsolete. Do not use

  pub WIN32_FIND_DATAW() = default;
  pub WIN32_FIND_DATAW(WIN32_FIND_DATAW &) = default;
  pub fn =(WIN32_FIND_DATAW mut &, WIN32_FIND_DATAW &) -> WIN32_FIND_DATAW mut & = default;
  pub ~WIN32_FIND_DATAW() = default;
}

pub extern "C" fn FindFirstFileW(LPCWSTR lpFileName, WIN32_FIND_DATAW mut *lpFindFileData) -> HANDLE;
pub extern "C" fn FindNextFileW(HANDLE hFindFile, WIN32_FIND_DATAW mut *lpFindFileData) -> BOOL;
pub extern "C" fn FindClose(HANDLE hFindFile) -> BOOL;

pub extern "C" fn GetFinalPathNameByHandleW(HANDLE hFile, LPWSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags) -> DWORD;

pub const CREATE_BREAKAWAY_FROM_JOB = 0x01000000;
pub const CREATE_DEFAULT_ERROR_MODE = 0x04000000;
pub const CREATE_NEW_CONSOLE = 0x00000010;
pub const CREATE_NEW_PROCESS_GROUP = 0x00000200;
pub const CREATE_NO_WINDOW = 0x08000000;
pub const CREATE_PROTECTED_PROCESS = 0x00040000;
pub const CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000;
pub const CREATE_SEPARATE_WOW_VDM = 0x00000800;
pub const CREATE_SHARED_WOW_VDM = 0x00001000;
pub const CREATE_SUSPENDED = 0x00000004;
pub const CREATE_UNICODE_ENVIRONMENT = 0x00000400;
pub const DEBUG_ONLY_THIS_PROCESS = 0x00000002;
pub const DEBUG_PROCESS = 0x00000001;
pub const DETACHED_PROCESS = 0x00000008;
pub const EXTENDED_STARTUPINFO_PRESENT = 0x00080000;
pub const INHERIT_PARENT_AFFINITY = 0x00010000;

pub const HANDLE_FLAG_INHERIT = 0x00000001;
pub const STARTF_USESTDHANDLES = 0x00000100;
pub const STARTF_USESHOWWINDOW = 0x00000001;
pub const DUPLICATE_CLOSE_SOURCE = 0x00000001;
pub const DUPLICATE_SAME_ACCESS = 0x00000002;

pub struct STARTUPINFOW
{
  pub DWORD cb;
  pub LPWSTR lpReserved;
  pub LPWSTR lpDesktop;
  pub LPWSTR lpTitle;
  pub DWORD dwX;
  pub DWORD dwY;
  pub DWORD dwXSize;
  pub DWORD dwYSize;
  pub DWORD dwXCountChars;
  pub DWORD dwYCountChars;
  pub DWORD dwFillAttribute;
  pub DWORD dwFlags;
  pub WORD wShowWindow;
  pub WORD cbReserved2;
  pub BYTE *lpReserved2;
  pub HANDLE hStdInput;
  pub HANDLE hStdOutput;
  pub HANDLE hStdError;

  pub STARTUPINFOW() = default;
  pub STARTUPINFOW(STARTUPINFOW &) = default;
  pub fn =(STARTUPINFOW mut &, STARTUPINFOW &) -> STARTUPINFOW mut & = default;
  pub ~STARTUPINFOW() = default;
}

pub struct PROCESS_INFORMATION
{
  pub HANDLE hProcess;
  pub HANDLE hThread;
  pub DWORD dwProcessId;
  pub DWORD dwThreadId;

  pub PROCESS_INFORMATION() = default;
  pub PROCESS_INFORMATION(PROCESS_INFORMATION &) = default;
  pub fn =(PROCESS_INFORMATION mut &, PROCESS_INFORMATION &) -> PROCESS_INFORMATION mut & = default;
  pub ~PROCESS_INFORMATION() = default;
}

pub extern "C" fn GetCurrentProcess() -> HANDLE;
pub extern "C" fn GetCurrentProcessId() -> DWORD;
pub extern "C" fn GetCurrentThread() -> HANDLE;
pub extern "C" fn GetCurrentThreadId() -> DWORD;
pub extern "C" fn GetThreadId(HANDLE Thread) -> DWORD;
pub extern "C" fn GetProcessId(HANDLE Process) -> DWORD;
pub extern "C" fn CreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, SECURITY_ATTRIBUTES *lpProcessAttributes, SECURITY_ATTRIBUTES *lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, STARTUPINFOW *lpStartupInfo, PROCESS_INFORMATION mut *lpProcessInformation) -> BOOL;
pub extern "C" fn GetExitCodeProcess(HANDLE hProcess, DWORD mut *lpExitCode) -> BOOL;

pub extern "C" fn GetModuleHandleW(LPCWSTR lpModuleName) -> HMODULE;
pub extern "C" fn GetStartupInfoW(STARTUPINFOW mut *lpStartupInfo) -> void;
