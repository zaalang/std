//
// chrono clock
//

import std.fmt;
import std.sys.clock;
import chrono.duration;
import chrono.format;

pub struct time_point<Clock, Duration>
{
  Duration time;

  pub using clock = Clock;
  pub using duration = Duration;

  pub time_point(Duration &time)
    : time(time)
  {
  }

  pub fn time_since_epoch(this&) -> duration
  {
    return this.time;
  }

  pub fn ==(time_point &, time_point &) -> bool = default;
  pub fn <=>(time_point &, time_point &) -> int = default;

  pub time_point(time_point &) = default;
  pub fn =(time_point mut &, time_point &) -> time_point mut & = default;
  pub ~time_point() = default;
}

pub fn +<Clock, D1, R2, P2>(time_point<Clock, D1> &lhs, chrono::duration<P2, R2> &rhs)
{
  return time_point<Clock>(lhs.time + rhs);
}

pub fn -<Clock, D1, R2, P2>(time_point<Clock, D1> &lhs, chrono::duration<P2, R2> &rhs)
{
  return time_point<Clock>(lhs.time - rhs);
}

pub fn -<Clock, D1, D2>(time_point<Clock, D1> &lhs, time_point<Clock, D2> &rhs)
{
  return lhs.time - rhs.time;
}

pub const fn ==<Clock, D1, D2>(time_point<Clock, D1> &lhs, time_point<Clock, D2> &rhs) -> bool
{
  return lhs.time == rhs.time;
}

pub const fn <=><Clock, D1, D2>(time_point<Clock, D1> &lhs, time_point<Clock, D2> &rhs) -> int
{
  return lhs.time <=> rhs.time;
}

pub const fn floor<To, Clock, Duration>(time_point<Clock, Duration> &tp) -> time_point<Clock, To>
  where __is_instance<chrono::duration<var, var>, To>
{
  return time_point<Clock, To>(chrono::floor<To>(tp.time));
}

pub const fn ceil<To, Clock, Duration>(time_point<Clock, Duration> &tp) -> time_point<Clock, To>
  where __is_instance<chrono::duration<var, var>, To>
{
  return time_point<Clock, To>(chrono::ceil<To>(tp.time));
}

pub const fn time_point_cast<To, Clock, Duration>(time_point<Clock, Duration> &tp) -> time_point<Clock, To>
{
  return time_point<Clock, To>(chrono::duration_cast<To>(tp.time));
}

pub struct system_clock
{
  pub using duration = chrono::nanoseconds;
  pub using time_point = chrono::time_point<system_clock, duration>;

  pub fn now() -> time_point
  {
    try
    {
      return time_point(chrono::nanoseconds(std::clock::tick(std::clock::id::realtime)));
    }
    catch(std::error e)
    {
      std::panic("system_clock failure");
    }
  }
}

pub using system_time<Duration> = time_point<system_clock, Duration>;

pub fn system_time<R, P>(chrono::duration<R, P> &time_since_epoch)
{
  return system_time<chrono::duration<R, P>>(time_since_epoch);
}

pub fn fmt<Duration>(std::OutputStream mut &os, std::fmt_context mut &ctx, time_point<system_clock, Duration> &tp) throws(std::error) -> void
{
  var buf = [0; 256];
  var len = chrono::fmt_to(&mut buf, "%F %T%z", tp);

  std::fmt_to(&mut os, &mut ctx, std::string_view(buf.data, len));
}

pub struct steady_clock
{
  pub using duration = chrono::nanoseconds;
  pub using time_point = chrono::time_point<steady_clock, duration>;

  pub fn now() -> time_point
  {
    try
    {
      return time_point(chrono::nanoseconds(std::clock::tick(std::clock::id::monotonic)));
    }
    catch(std::error e)
    {
      std::panic("steady_clock failure");
    }
  }
}

pub struct local_t
{
  pub using duration = chrono::nanoseconds;
  pub using time_point = chrono::time_point<local_t, duration>;
}

pub using local_time<Duration> = time_point<local_t, Duration>;

pub fn local_time<R, P>(chrono::duration<R, P> &time_since_epoch)
{
  return local_time<chrono::duration<R, P>>(time_since_epoch);
}

pub fn fmt<Duration>(std::OutputStream mut &os, std::fmt_context mut &ctx, time_point<local_t, Duration> &tp) throws(std::error) -> void
{
  var buf = [0; 256];
  var len = chrono::fmt_to(&mut buf, "%Y-%m-%d %H:%M:%S", tp);

  std::fmt_to(&mut os, &mut ctx, std::string_view(buf.data, len));
}
