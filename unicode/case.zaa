//
// unicode case
//

import std.fmt;
import std.span : Span;
import std.string : String;
import unicode.tables : *;

fn <=>((char, char) range, char ch) -> int
{
  if (ch < range.0)
    return +1;

  if (ch > range.1)
    return -1;

  return 0;
}

fn search<T, K>(Span<T> table, K key) -> T
{
  if (table[0].0 <= key && key <= table[table.len - 1].0)
  {
    var lo = 0;
    var hi = table.len;

    while (hi > lo)
    {
      var mid = (lo + hi) / 2;

      if (key > table[mid].0)
        lo = mid + 1;
      else if (key < table[mid].0)
        hi = mid;
      else
        return table[mid];
    }
  }

  return T();
}

pub struct caseconv_result
{
  pub usize len;
  pub fn data(this &) -> char * { return this.str.data; }

  pub fn begin(this &) -> usize { return 0; }
  pub fn end(this &) -> usize { return this.len; }
  pub fn [](this &, usize index) -> char & { return &this.str[index]; }

  pub caseconv_result() = default;
  pub caseconv_result(caseconv_result&) = default;
  pub fn =(caseconv_result mut &, caseconv_result&) -> caseconv_result mut & = default;
  pub ~caseconv_result() = default;

  char[3] str;
}

pub fn to_casefold(char ch) -> caseconv_result
{
  var result = caseconv_result();

  result.len = 1;
  result.str[0] = ch;

  if ('A' <= ch && ch <= 'Z')
    result.str[0] = ch + 0x20;

  if (ch > 0x7f)
  {
    if (var cc = search(unicode_caseing_table, ch); cc.0.0 <= ch && ch <= cc.0.1)
    {
      if (cc.2 < 0)
        result.str[0] -= cast<char>(-cc.2);

      else if (cc.1 != 0 || cc.2 != 1)
        result.str[0] += cast<char>(cc.2);

      else if ((ch - cc.0.0) & 1 == 0)
        result.str[0] += 1;

      if (var cc = search(unicode_special_casefold_table, ch); cc.0 == ch)
      {
        result.str = cc.1;
        result.len = 1 + cast<usize>(cc.1[1] != 0) + cast<usize>(cc.1[2] != 0);
      }
    }
  }

  return result;
}

pub fn to_lowercase(char ch) -> caseconv_result
{
  var result = caseconv_result();

  result.len = 1;
  result.str[0] = ch;

  if ('A' <= ch && ch <= 'Z')
    result.str[0] = ch + 0x20;

  if (ch > 0x7f)
  {
    if (var cc = search(unicode_caseing_table, ch); cc.0.0 <= ch && ch <= cc.0.1)
    {
      if (cc.2 < 0)
        result.str[0] -= cast<char>(-cc.2);

      else if (cc.1 != 0 || cc.2 != 1)
        result.str[0] += cast<char>(cc.2);

      else if ((ch - cc.0.0) & 1 == 0)
        result.str[0] += 1;

      if (var cc = search(unicode_special_lowercase_table, ch); cc.0 == ch)
      {
        result.str = cc.1;
        result.len = 1 + cast<usize>(cc.1[1] != 0) + cast<usize>(cc.1[2] != 0);
      }
    }
  }

  return result;
}

pub fn to_uppercase(char ch) -> caseconv_result
{
  var result = caseconv_result();

  result.len = 1;
  result.str[0] = ch;

  if ('a' <= ch && ch <= 'z')
    result.str[0] = ch - 0x20;

  if (ch > 0x7f)
  {
    if (var cc = search(unicode_caseing_table, ch); cc.0.0 <= ch && ch <= cc.0.1)
    {
      if (cc.1 < 0)
        result.str[0] -= cast<char>(-cc.1);

      else if (cc.1 != 0 || cc.2 != 1)
        result.str[0] += cast<char>(cc.1);

      else if ((ch - cc.0.0) & 1 == 1)
        result.str[0] -= 1;

      if (var cc = search(unicode_special_uppercase_table, ch); cc.0 == ch)
      {
        result.str = cc.1;
        result.len = 1 + cast<usize>(cc.1[1] != 0) + cast<usize>(cc.1[2] != 0);
      }
    }
  }

  return result;
}

pub fn to_titlecase(char ch) -> caseconv_result
{
  var result = to_uppercase(ch);

  if (var cc = search(unicode_special_titlecase_table, ch); cc.0 == ch)
  {
    result.str = cc.1;
    result.len = 1 + cast<usize>(cc.1[1] != 0) + cast<usize>(cc.1[2] != 0);
  }

  return result;
}

pub fn fmt(std::OutputStream mut &os, std::fmt_context mut &ctx, caseconv_result &str) throws -> void
{
  var len = 0;
  var buf = [0; 256];

  for (var i = 0; i < str.len; ++i)
    len += std::ctoa(buf.data + len, buf.data + buf.len, str.str[i]).len;

  std::fmt_to(&mut os, &mut ctx, std::string_view(buf.data, len));
}

pub fn icmp(String &lhs, String &rhs) -> int
{
  var i = lhs.chars.begin;
  var j = rhs.chars.begin;

  var ii = 0;
  var iic = caseconv_result();

  var jj = 0;
  var jjc = caseconv_result();

  for (var endi = lhs.end, var endj = rhs.end; !(j == endj && jj == jjc.len); ++ii, ++jj)
  {
    if (i == endi && ii == iic.len)
      return -1;

    if (ii == iic.len)
    {
      ii = 0;
      iic = to_casefold(lhs[i++]);
    }

    if (jj == jjc.len)
    {
      jj = 0;
      jjc = to_casefold(rhs[j++]);
    }

    if (var cmp = (iic[ii] <=> jjc[jj]); cmp != 0)
      return cmp;
  }

  if (!(i == lhs.end && ii == iic.len))
    return +1;

  return 0;
}
