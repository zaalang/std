//
// yaml scanner
//

import yaml;
import std.io : InputReader;
import std.strconv;

pub struct mark
{
  pub int line;
  pub int column;

  pub mark() = default;
  pub mark(mark&) = default;
  pub fn =(mark mut &, mark &&) -> mark mut & = default;
  pub ~mark() = default;
}

pub enum scalar_style
{
  invalid = 0,
  plain,
  singlequoted,
  doublequoted,
  literal,
  folded,
}

pub struct token
{
  pub enum type
  {
    invalid = 0,
    directive,
    document_start,
    document_end,
    stream_start,
    stream_end,
    block_sequence_start,
    block_mapping_start,
    block_end,
    flow_sequence_start,
    flow_mapping_start,
    flow_sequence_end,
    flow_mapping_end,
    key,
    value,
    block_entry,
    flow_entry,
    alias,
    anchor,
    tag,
    scalar,

    bad_indent_character,
    bad_indent_indicator,
    invalid_sequence_start,
    invalid_mapping_start,
    invalid_simple_key,
    unexpected_document_indicator,
    unexpected_end_of_stream,
    bad_escape,
  }

  pub type type;
  pub std::string value;
  pub scalar_style style;
  pub mark loc;

  pub token() = default;
  pub token(token&&) = default;
  pub fn =(token mut &, token &&) -> token mut & = default;
  pub ~token() = default;
}

fn make_token(token::type type, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.loc = loc;

  return tok;
}

fn make_token(token::type type, std::string value, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.value = &move value;
  tok.loc = loc;

  return tok;
}

fn make_token(token::type type, scalar_style style, std::string value, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.value = &move value;
  tok.style = style;
  tok.loc = loc;

  return tok;
}

pub struct simple_key
{
  pub bool possible = false;
  pub bool required = false;
  pub usize token_number;
  pub mark loc;

  pub simple_key() = default;
  pub simple_key(simple_key&&) = default;
  pub fn =(simple_key mut &, simple_key &&) -> simple_key mut & = default;
  pub ~simple_key() = default;
}

pub struct scanner
{
  int flow_level;
  usize tokens_head;
  usize tokens_parsed;
  bool allow_simple_key;
  bool allow_adjacent_value;
  std::vector<simple_key> simple_keys;

  int indent;
  std::vector<int> indents;

  std::vector<token> tokens;

  mark loc;

  fn peek(this mut &, InputReader mut &is) throws -> u8
  {
    if (var buffer = is.fetch(); buffer.len != 0)
      return buffer[0];

    return 0;
  }

  fn peek(this mut &, InputReader mut &is, usize index) throws -> u8
  {
    if (var buffer = this.prefix(&mut is, index + 1); index < buffer.len)
      return buffer[index];

    return 0;
  }

  fn prefix(this mut &, InputReader mut &is, usize len) throws -> std::string_view
  {
    if (is.buffer.len < len)
      is.pack_and_fetch();

    return std::string_view(is.buffer.data, std::min(is.buffer.len, len));
  }

  fn eat(scanner mut &this, InputReader mut &is) -> void
  {
    this.loc.column += 1;

    if (is.buffer[0] == cast('\n'))
    {
      this.loc.line += 1;
      this.loc.column = 0;
    }

    is.discard(1);
  }

  pub scanner()
  {
    indent = -1;
    allow_simple_key = true;
    emit_stream_start(&mut this);
  }

  pub ~scanner() = default;
}

fn is_z(u8 ch) -> bool
{
  return ch == cast('\0');
}

fn is_alpha(u8 ch) -> bool
{
  return cast('0') <= ch && ch <= cast('9') || cast('a') <= ch && ch <= cast('z') || cast('A') <= ch && ch <= cast('Z') || ch == cast('_') || ch == cast('-');
}

fn is_digit(u8 ch) -> bool
{
  return cast('0') <= ch && ch <= cast('9');
}

fn is_whitespace(u8 ch) -> bool
{
  return ch == cast('\0') || ch == cast(' ') || ch == cast('\t') || ch == cast('\r') || ch == cast('\n');
}

fn is_blank(u8 ch) -> bool
{
  return ch == cast(' ') || ch == cast('\t');
}

fn is_break(u8 ch) -> bool
{
  return ch == cast('\r') || ch == cast('\n');
}

fn is_breakz(u8 ch) -> bool
{
  return ch == cast('\0') || ch == cast('\r') || ch == cast('\n');
}

fn is_flow(u8 ch) -> bool
{
  return ch == cast(',') || ch == cast('[') || ch == cast(']') || ch == cast('{') || ch == cast('}');
}

fn skip_blank(scanner mut &this, InputReader mut &is) throws -> void
{
  while (is_blank(this.peek(&mut is)))
    this.eat(&mut is);
}

fn skip_break(scanner mut &this, InputReader mut &is) throws -> void
{
  if (is_break(this.peek(&mut is)))
  {
    if (this.prefix(&mut is, 2) == "\r\n")
      this.eat(&mut is);

    this.eat(&mut is);
  }
}

fn read_break(scanner mut &this, InputReader mut &is, std::string mut &result) throws -> void
{
  if (is_break(this.peek(&mut is)))
  {
    skip_break(&mut this, &mut is);

    result += cast<u8>('\n');
  }
}

fn scan_to_next_break(scanner mut &this, InputReader mut &is) throws -> void
{
  while (!is_breakz(this.peek(&mut is)))
    this.eat(&mut is);
}

fn scan_to_next_token(scanner mut &this, InputReader mut &is) throws -> void
{
  for (;;)
  {
    switch (this.peek(&mut is))
    {
      case ' ':
        this.eat(&mut is);

      case '\t':
        if (this.flow_level == 0)
        {
          var i = 1;
          while (is_blank(this.peek(&mut is, i)))
            ++i;

          if (this.peek(&mut is, i) != cast('[') && this.peek(&mut is, i) != cast('{'))
            break;
        }

        this.eat(&mut is);

      case '\r':
      case '\n':
        if (this.flow_level == 0)
          this.allow_simple_key = true;
        skip_break(&mut this, &mut is);

      case '#':
        scan_to_next_break(&mut this, &mut is);

      else:
        break;
    }
  }
}

fn save_simple_key(scanner mut &this) -> void
{
  var required = this.flow_level > 0 && this.indent == this.loc.column;

  if (this.allow_simple_key)
  {
    var key = simple_key();
    key.possible = true;
    key.required = required;
    key.token_number = this.tokens_parsed + this.tokens.len - this.tokens_head;
    key.loc = this.loc;

    remove_simple_key(&mut this);

    this.simple_keys.pop_back();
    this.simple_keys.push_back(key);
  }
}

fn remove_simple_key(scanner mut &this) -> void
{
  var key = this.simple_keys.back();

  if (key.possible && key.required)
    this.tokens.push_back(make_token(token::type::invalid_simple_key, this.loc));

  this.simple_keys.back.possible = false;
}

fn stale_simple_keys(scanner mut &this) -> void
{
  for (var mut &key : this.simple_keys)
  {
    if (key.possible && key.loc.line != this.loc.line)
    {
      if (key.required)
        this.tokens.push_back(make_token(token::type::invalid_simple_key, this.loc));

      key.possible = false;
    }
  }
}

fn add_indent(scanner mut &this, int column) -> bool
{
  if (this.indent >= column)
    return false;

  this.indents.push_back(this.indent);
  this.indent = column;

  return true;
}

fn unwind_indent(scanner mut &this, int column) -> void
{
  if (this.flow_level > 0)
    return;

  while (this.indent > column)
  {
    this.indent = this.indents.back();

    this.indents.pop_back();
    this.tokens.push_back(make_token(token::type::block_end, this.loc));
  }
}

fn emit_stream_start(scanner mut &this)
{
  this.simple_keys.push_back(simple_key());
  this.tokens.push_back(make_token(token::type::stream_start, this.loc));
}

fn emit_stream_end(scanner mut &this) -> void
{
  if (this.loc.column != 0)
  {
    this.loc.line += 1;
    this.loc.column = 0;
  }

  unwind_indent(&mut this, -1);
  remove_simple_key(&mut this);
  this.allow_simple_key = false;

  this.tokens.push_back(make_token(token::type::stream_end, this.loc));
}

fn is_directive(scanner mut &this, InputReader mut &is) throws -> bool
{
  return this.loc.column == 0 && this.peek(&mut is) == cast('%');
}

fn scan_directive(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  unwind_indent(&mut this, -1);
  remove_simple_key(&mut this);
  this.allow_simple_key = false;

  var value = std::string();

  var ch = this.peek(&mut is);

  while (!is_breakz(ch) && ch != cast('#'))
  {
    value += ch;
    this.eat(&mut is);
    ch = this.peek(&mut is);
  }

  if (ch == cast('#'))
    scan_to_next_break(&mut this, &mut is);

  skip_break(&mut this, &mut is);

  this.tokens.push_back(make_token(token::type::directive, scalar_style::plain, value, loc));
}

fn is_document_start(scanner mut &this, InputReader mut &is) throws -> bool
{
  return this.loc.column == 0 && this.peek(&mut is) == cast('-') && this.prefix(&mut is, 3) == "---" && is_whitespace(this.peek(&mut is, 3));
}

fn scan_document_start(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  unwind_indent(&mut this, -1);
  remove_simple_key(&mut this);
  this.allow_simple_key = false;

  for (var i = 0; i < 3; ++i)
    this.eat(&mut is);

  skip_blank(&mut this, &mut is);

  this.tokens.push_back(make_token(token::type::document_start, loc));
}

fn is_document_end(scanner mut &this, InputReader mut &is) throws -> bool
{
  return this.loc.column == 0 && this.peek(&mut is) == cast('.') && this.prefix(&mut is, 3) == "..." && is_whitespace(this.peek(&mut is, 3));
}

fn scan_document_end(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  unwind_indent(&mut this, -1);
  remove_simple_key(&mut this);
  this.allow_simple_key = false;

  for (var i = 0; i < 3; ++i)
    this.eat(&mut is);

  this.tokens.push_back(make_token(token::type::document_end, loc));
}

fn scan_flow_collection_start(scanner mut &this, InputReader mut &is, token::type type) throws -> void
{
  var loc = this.loc;

  save_simple_key(&mut this);
  this.allow_simple_key = true;
  this.allow_adjacent_value = false;
  this.simple_keys.push_back(simple_key());

  this.flow_level += 1;

  this.eat(&mut is);

  this.tokens.push_back(make_token(type, loc));
}

fn scan_flow_collection_end(scanner mut &this, InputReader mut &is, token::type type) throws -> void
{
  var loc = this.loc;

  remove_simple_key(&mut this);
  this.allow_simple_key = false;
  this.allow_adjacent_value = (this.flow_level > 0);
  this.simple_keys.pop_back();
  this.flow_level -= 1;

  this.eat(&mut is);

  this.tokens.push_back(make_token(type, loc));
}

fn scan_flow_entry(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  remove_simple_key(&mut this);
  this.allow_simple_key = true;
  this.allow_adjacent_value = false;

  this.eat(&mut is);

  this.tokens.push_back(make_token(token::type::flow_entry, loc));
}

fn scan_tag(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  save_simple_key(&mut this);
  this.allow_simple_key = false;

  var value = std::string();

  var ch = this.peek(&mut is);

  while (is_alpha(ch) || ch == cast('!'))
  {
    value += ch;
    this.eat(&mut is);
    ch = this.peek(&mut is);
  }

  this.tokens.push_back(make_token(token::type::tag, scalar_style::plain, value, loc));
}

fn scan_flow_scalar(scanner mut &this, InputReader mut &is, scalar_style style) throws -> void
{
  var loc = this.loc;

  save_simple_key(&mut this);
  this.allow_simple_key = false;
  this.allow_adjacent_value = true;

  var value = std::string();
  var leading_break = std::string();
  var trailing_breaks = std::string();
  var whitespaces = std::string();
  var leading_blanks = false;

  this.eat(&mut is);

  for (;;)
  {
    var ch = this.peek(&mut is);

    if (is_document_start(&mut this, &mut is) || is_document_end(&mut this, &mut is))
    {
      this.tokens.push_back(make_token(token::type::unexpected_document_indicator, this.loc));
      break;
    }

    if (is_z(ch))
    {
      this.tokens.push_back(make_token(token::type::unexpected_end_of_stream, this.loc));
      return;
    }

    leading_blanks = false;

    for (;;)
    {
      switch (ch)
      {
        case ' ':
        case '\t':
        case '\r':
        case '\n':
        case '\0':
          break;

        case '\'':
          if (style == scalar_style::singlequoted)
          {
            if (this.peek(&mut is, 1) != cast('\''))
              break;

            this.eat(&mut is);
          }

          value += ch;
          this.eat(&mut is);

        case '"':
          if (style == scalar_style::doublequoted)
          {
            break;
          }

          value += ch;
          this.eat(&mut is);

        case '\\':
          if (style == scalar_style::doublequoted)
          {
            var length = 0;

            switch (this.peek(&mut is, 1))
            {
              case '\r':
              case '\n':
                this.eat(&mut is);
                skip_break(&mut this, &mut is);
                leading_blanks = true;
                ch = this.peek(&mut is);
                break;

              case '0': value += cast<u8>('\0');
              case 'a': value += cast<u8>('\x07');
              case 'b': value += cast<u8>('\x08');
              case 't': value += cast<u8>('\t');
              case '\t': value += cast<u8>('\t');
              case 'n': value += cast<u8>('\n');
              case 'v': value += cast<u8>('\x0b');
              case 'f': value += cast<u8>('\x0c');
              case 'r': value += cast<u8>('\x0d');
              case 'e': value += cast<u8>('\x1b');
              case ' ': value += cast<u8>('\x20');
              case '"': value += cast<u8>('"');
              case '/': value += cast<u8>('/');
              //case '\'': value += cast<u8>('\'');
              case '\\': value += cast<u8>('\\');
              case 'N': value += '\x85';
              case '_': value += '\xA0';
              case 'L': value += '\x2028';
              case 'P': value += '\x2029';
              case 'x': length = 2;
              case 'u': length = 4;
              case 'U': length = 8;
              else:
                this.tokens.push_back(make_token(token::type::bad_escape, this.loc));
            }

            if (length != 0)
            {
              var codepoint = ' ';
              var buffer = this.prefix(&mut is, length + 2);

              if (std::atoi(buffer.data + 2, buffer.end, &mut codepoint, 16).len != length)
                this.tokens.push_back(make_token(token::type::bad_escape, this.loc));

              for (var i = 0; i < buffer.len - 2; ++i)
                this.eat(&mut is);

              value += codepoint;
            }

            this.eat(&mut is);
            this.eat(&mut is);
          }
          else
          {
            value += ch;
            this.eat(&mut is);
          }

        else:
          value += ch;
          this.eat(&mut is);
      }

      ch = this.peek(&mut is);
    }

    if (style == scalar_style::singlequoted && ch == cast('\''))
      break;

    if (style == scalar_style::doublequoted && ch == cast('"'))
      break;

    while (is_blank(ch) || is_break(ch))
    {
      if (is_blank(ch))
      {
        if (!leading_blanks)
          whitespaces += ch;

        this.eat(&mut is);
      }
      else
      {
        if (leading_blanks)
        {
          read_break(&mut this, &mut is, &mut trailing_breaks);
        }
        else
        {
          whitespaces.clear();
          read_break(&mut this, &mut is, &mut leading_break);
          leading_blanks = true;
        }
      }

      ch = this.peek(&mut is);
    }

    if (leading_blanks)
    {
      if (leading_break.empty)
      {
        value += leading_break;
        value += trailing_breaks;
      }
      else
      {
        if (trailing_breaks.empty)
          value += cast<u8>(' ');
        else
          value += trailing_breaks;
      }

      leading_break.clear();
      trailing_breaks.clear();
      leading_blanks = false;
    }
    else
    {
      value += whitespaces;
      whitespaces.clear();
    }
  }

  this.eat(&mut is);

  this.tokens.push_back(make_token(token::type::scalar, style, value, loc));
}

fn scan_anchor(scanner mut &this, InputReader mut &is, token::type type) throws -> void
{
  var loc = this.loc;

  save_simple_key(&mut this);
  this.allow_simple_key = false;

  var value = std::string();

  this.eat(&mut is);

  var ch = this.peek(&mut is);

  while (is_alpha(ch) || ch == cast(':'))
  {
    value += ch;
    this.eat(&mut is);
    ch = this.peek(&mut is);
  }

  this.tokens.push_back(make_token(type, value, loc));
}

fn is_key(scanner mut &this, InputReader mut &is) throws -> bool
{
  return this.flow_level > 0 || is_whitespace(this.peek(&mut is, 1));
}

fn scan_key(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  if (this.flow_level == 0)
  {
    if (!this.allow_simple_key)
      this.tokens.push_back(make_token(token::type::invalid_mapping_start, loc));

    if (add_indent(&mut this, this.loc.column))
      this.tokens.push_back(make_token(token::type::block_mapping_start, loc));
  }

  remove_simple_key(&mut this);
  this.allow_simple_key = (this.flow_level == 0);

  this.eat(&mut is);
  skip_blank(&mut this, &mut is);

  this.tokens.push_back(make_token(token::type::key, loc));
}

fn is_value(scanner mut &this, InputReader mut &is) throws -> bool
{
  return (this.flow_level > 0 && (is_flow(this.peek(&mut is, 1)) || this.allow_adjacent_value)) || is_whitespace(this.peek(&mut is, 1));
}

fn scan_value(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  var key = this.simple_keys.back();

  if (key.possible)
  {
    var idx = key.token_number - this.tokens_parsed + this.tokens_head;

    this.tokens.insert(this.tokens.begin + idx, make_token(token::type::key, loc));

    if (this.flow_level == 0 && add_indent(&mut this, key.loc.column))
      this.tokens.insert(this.tokens.begin + idx, make_token(token::type::block_mapping_start, loc));

    this.simple_keys.back.possible = false;
    this.allow_simple_key = false;
  }
  else
  {
    if (this.flow_level == 0 && !this.allow_simple_key)
      this.tokens.push_back(make_token(token::type::invalid_mapping_start, loc));

    if (this.flow_level == 0 && add_indent(&mut this, this.loc.column))
      this.tokens.push_back(make_token(token::type::block_mapping_start, loc));

    this.allow_simple_key = (this.flow_level == 0);
  }

  this.allow_adjacent_value = false;

  this.eat(&mut is);
  skip_blank(&mut this, &mut is);

  this.tokens.push_back(make_token(token::type::value, loc));
}

fn is_block_entry(scanner mut &this, InputReader mut &is) throws -> bool
{
  return is_whitespace(this.peek(&mut is, 1));
}

fn scan_block_entry(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  if (this.flow_level == 0)
  {
    if (!this.allow_simple_key)
      this.tokens.push_back(make_token(token::type::invalid_sequence_start, loc));

    if (add_indent(&mut this, this.loc.column))
      this.tokens.push_back(make_token(token::type::block_sequence_start, loc));
  }

  remove_simple_key(&mut this);
  this.allow_simple_key = true;

  this.eat(&mut is);
  skip_blank(&mut this, &mut is);

  this.tokens.push_back(make_token(token::type::block_entry, loc));
}

fn block_scalar_breaks(scanner mut &this, InputReader mut &is, int mut &indent, std::string mut &result) throws -> void
{
  var max_indent = 0;

  for (;;)
  {
    while ((indent == 0 || this.loc.column < indent) && this.peek(&mut is) == cast(' '))
      this.eat(&mut is);

    if (this.loc.column > max_indent)
      max_indent = this.loc.column;

    if (this.loc.column < indent && this.peek(&mut is) == cast('\t'))
      this.tokens.push_back(make_token(token::type::bad_indent_character, this.loc));

    if (!is_break(this.peek(&mut is)))
      break;

    read_break(&mut this, &mut is, &mut result);
  }

  if (indent == 0)
  {
    indent = max_indent;

    if (indent < this.indent + 1)
      indent = this.indent + 1;
  }
}

fn scan_block_scalar(scanner mut &this, InputReader mut &is, scalar_style style) throws -> void
{
  var loc = this.loc;

  save_simple_key(&mut this);
  this.allow_simple_key = true;

  var indent = 0;
  var chomping = 0;
  var increment = 0;
  var trailing_blank = false;
  var leading_blank = false;

  var value = std::string();
  var leading_break = std::string();
  var trailing_breaks = std::string();

  this.eat(&mut is);
  var ch = this.peek(&mut is);

  if (ch == cast('+') || ch == cast('-'))
  {
    chomping = (ch == cast('+')) ? +1 : -1;

    this.eat(&mut is);

    if (ch = this.peek(&mut is); is_digit(ch))
    {
      if (ch == cast('0'))
        this.tokens.push_back(make_token(token::type::bad_indent_indicator, this.loc));

      increment = cast<int>(ch) - cast('0');

      this.eat(&mut is);
    }
  }
  else if (is_digit(ch))
  {
    if (ch == cast('0'))
      this.tokens.push_back(make_token(token::type::bad_indent_indicator, this.loc));

    increment = cast<int>(ch) - cast('0');

    this.eat(&mut is);

    if (ch = this.peek(&mut is); ch == cast('+') || ch == cast('-'))
    {
      chomping = (ch == cast('+')) ? +1 : -1;

      this.eat(&mut is);
    }
  }

  skip_blank(&mut this, &mut is);

  if (this.peek(&mut is) == cast('#'))
    scan_to_next_break(&mut this, &mut is);

  skip_break(&mut this, &mut is);

  if (increment > 0)
    indent = (this.indent > 0) ? this.indent + increment : increment;

  block_scalar_breaks(&mut this, &mut is, &mut indent, &mut trailing_breaks);

  while (this.loc.column == indent)
  {
    if (ch = this.peek(&mut is); !is_z(ch))
    {
      trailing_blank = is_blank(ch);

      if (style == scalar_style::folded && !leading_break.empty && !leading_blank && !trailing_blank)
      {
        if (trailing_breaks.empty)
          value += cast<u8>(' ');
      }
      else
      {
        value += leading_break;
      }

      value += trailing_breaks;

      leading_break.clear();
      trailing_breaks.clear();

      leading_blank = is_blank(ch);

      while (!is_breakz(ch))
      {
        value += ch;
        this.eat(&mut is);
        ch = this.peek(&mut is);
      }
    }

    if (is_z(ch))
      break;

    read_break(&mut this, &mut is, &mut leading_break);

    block_scalar_breaks(&mut this, &mut is, &mut indent, &mut trailing_breaks);
  }

  if (chomping != -1)
    value += leading_break;

  if (chomping == +1)
    value += trailing_breaks;

  this.tokens.push_back(make_token(token::type::scalar, style, value, loc));
}

fn scan_plain_scalar(scanner mut &this, InputReader mut &is) throws -> void
{
  var loc = this.loc;

  save_simple_key(&mut this);
  this.allow_simple_key = false;

  var indent = this.indent + 1;

  var value = std::string();
  var leading_break = std::string();
  var trailing_breaks = std::string();
  var whitespaces = std::string();
  var leading_blanks = false;

  for (;;)
  {
    var ch = this.peek(&mut is);

    if (ch == cast('#'))
      break;

    if (is_document_start(&mut this, &mut is) || is_document_end(&mut this, &mut is))
      break;

    for (;;)
    {
      switch (ch)
      {
        case ' ':
        case '\t':
        case '\r':
        case '\n':
        case '\0':
          break;

        case ':':
          if (is_whitespace(this.peek(&mut is, 1)))
            break;
          if (this.flow_level > 0 && is_flow(this.peek(&mut is, 1)))
            break;

        case ',':
        case '[':
        case ']':
        case '{':
        case '}':
          if (this.flow_level > 0)
            break;
      }

      if (leading_blanks || whitespaces.len != 0)
      {
        if (leading_blanks)
        {
          if (leading_break.empty)
          {
            value += leading_break;
            value += trailing_breaks;
          }
          else
          {
            if (trailing_breaks.empty)
              value += cast<u8>(' ');
            else
              value += trailing_breaks;
          }

          leading_break.clear();
          trailing_breaks.clear();
          leading_blanks = false;
        }
        else
        {
          value += whitespaces;
          whitespaces.clear();
        }
      }

      value += ch;
      this.eat(&mut is);
      ch = this.peek(&mut is);
    }

    if (!(is_blank(ch) || is_break(ch)))
      break;

    while (is_blank(ch) || is_break(ch))
    {
      if (is_blank(ch))
      {
        if (this.loc.column < indent && ch == cast('\t'))
          this.tokens.push_back(make_token(token::type::bad_indent_character, this.loc));

        if (!leading_blanks)
          whitespaces += ch;

        this.eat(&mut is);
      }
      else
      {
        if (leading_blanks)
        {
          read_break(&mut this, &mut is, &mut trailing_breaks);
        }
        else
        {
          whitespaces.clear();
          read_break(&mut this, &mut is, &mut leading_break);
          leading_blanks = true;
        }
      }

      ch = this.peek(&mut is);
    }

    if (this.flow_level == 0 && this.loc.column < indent)
      break;
  }

  if (leading_blanks)
    this.allow_simple_key = true;

  this.tokens.push_back(make_token(token::type::scalar, scalar_style::plain, value, loc));
}

pub fn scan(scanner mut &this, InputReader mut &is) throws -> void
{
  scan_to_next_token(&mut this, &mut is);

  stale_simple_keys(&mut this);

  unwind_indent(&mut this, this.loc.column);

  var ch = this.peek(&mut is);

  if (ch == 0)
    return emit_stream_end(&mut this);

  if (is_directive(&mut this, &mut is))
    return scan_directive(&mut this, &mut is);

  if (is_document_start(&mut this, &mut is))
    return scan_document_start(&mut this, &mut is);

  if (is_document_end(&mut this, &mut is))
    return scan_document_end(&mut this, &mut is);

  switch (ch)
  {
    case '[':
      return scan_flow_collection_start(&mut this, &mut is, token::type::flow_sequence_start);
    case '{':
      return scan_flow_collection_start(&mut this, &mut is, token::type::flow_mapping_start);
    case ']':
      return scan_flow_collection_end(&mut this, &mut is, token::type::flow_sequence_end);
    case '}':
      return scan_flow_collection_end(&mut this, &mut is, token::type::flow_mapping_end);
    case ',':
      return scan_flow_entry(&mut this, &mut is);
    case '!':
      return scan_tag(&mut this, &mut is);
    case '\'':
      return scan_flow_scalar(&mut this, &mut is, scalar_style::singlequoted);
    case '\"':
      return scan_flow_scalar(&mut this, &mut is, scalar_style::doublequoted);
    case '*':
      return scan_anchor(&mut this, &mut is, token::type::alias);
    case '&':
      return scan_anchor(&mut this, &mut is, token::type::anchor);
    case '?':
      if (is_key(&mut this, &mut is))
        return scan_key(&mut this, &mut is);
    case ':':
      if (is_value(&mut this, &mut is))
        return scan_value(&mut this, &mut is);
    case '-':
      if (is_block_entry(&mut this, &mut is))
        return scan_block_entry(&mut this, &mut is);
    case '|':
      if (this.flow_level == 0)
        return scan_block_scalar(&mut this, &mut is, scalar_style::literal);
    case '>':
      if (this.flow_level == 0)
        return scan_block_scalar(&mut this, &mut is, scalar_style::folded);
  }

  if (ch == cast('\t'))
    this.tokens.push_back(make_token(token::type::bad_indent_character, this.loc));

  return scan_plain_scalar(&mut this, &mut is);
}

pub fn fetch(scanner mut &this, InputReader mut &is) throws -> token
{
  for (;;)
  {
    var need_more = true;

    if (this.tokens_head == this.tokens.len)
    {
      this.tokens.clear();
      this.tokens_head = 0;
    }

    else if (this.tokens_head < this.tokens.len)
    {
      need_more = false;

      for (var &key : this.simple_keys)
      {
        if (key.possible && key.token_number == this.tokens_parsed)
        {
          need_more = true;
          break;
        }
      }
    }

    if (!need_more)
      break;

    scan(&mut this, &mut is);
  }

  this.tokens_parsed += 1;

  return &move std::launder(this.tokens[this.tokens_head++]);
}
