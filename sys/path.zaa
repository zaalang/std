//
// sys path
//

import std.stdlib : assert;
import std.string : String;
import std.range : Range;
import sys.bits.path : is_sep_byte, scan_path_prefix;
import sys.fs;
import std.fmt;

pub struct path_view
{
  std::string_view str;

  #[lifetime(depend(*data))]
  pub path_view(u8 *data, usize len)
    : str(data, len)
  {
  }

  #[lifetime(depend(*beg))]
  pub path_view(u8 *beg, u8 *end)
    : str(beg, end)
  {
  }

  #[lifetime(depend(*path.data))]
  pub path_view(String &path)
    : str(path)
  {
  }

  #[lifetime(depend(*this))]
  pub fn String(this &) -> std::string_view
  {
    return this.str;
  }

  pub fn len(this &) -> usize
  {
    return this.str.len;
  }

  pub fn empty(this &) -> bool
  {
    return this.str.empty;
  }

  #[lifetime(depend(this))]
  pub fn data(this &)
  {
    return this.str.data;
  }

  pub fn as_literal(this &)
  {
    return this.str.as_literal;
  }

  pub struct part_iterator : pub u8 *
  {
    pub part_iterator() = default;
    pub part_iterator(part_iterator&) = default;
    pub fn =(part_iterator mut &this, part_iterator &that) -> part_iterator mut & = default;
    pub ~part_iterator() = default;

    #[lifetime(depend(this))]
    pub fn ++(part_iterator mut &this) -> part_iterator mut &
    {
      for (;;)
      {
        this.super += this.scan.0;
        this.super += this.scan.1;
        this.scan = scan_path_next(std::string_view(this.super, this.end));

        if (this.scan.0 == 1 && *this.super == cast('.'))
          continue;

        if (this.scan.0 == 0 && this.super != this.end)
          continue;

        break;
      }

      return &this;
    }

    pub fn -(u8 *, part_iterator &) -> usize = delete;
    pub fn +(part_iterator &, usize) -> part_iterator = delete;
    pub fn -(part_iterator &, usize) -> part_iterator = delete;

    part_iterator(u8 *cursor, (usize, usize) scan, u8 *end)
      : super(cursor), scan(scan), end(end)
    {
    }

    (usize, usize) scan;
    u8 *end;
  }

  #[lifetime(repose(iter, this), depend(*this))]
  pub fn [](this &, part_iterator &iter) -> std::string_ref
  {
    return std::string_ref(iter.super, iter.scan.0);
  }

  #[lifetime(depend(*this))]
  pub fn parts(this &)
  {
    var scan = (scan_path_prefix(this.str), 0);

    if (scan.0 == 0)
      scan = scan_path_next(this.str);

    return std::range_view(&this, part_iterator(this.str.data, scan, this.str.end), part_iterator(this.str.end, (0, 0), this.str.end));
  }

  pub fn ==(this &, String &other) -> bool
  {
    return this.str == other;
  }

  pub fn <=>(this &, String &other) -> bool
  {
    return this.str <=> other;
  }

  pub path_view() = default;
  pub path_view(path_view &that) = default;
  pub fn =(this mut &, path_view &that) -> path_view mut & = default;
  pub ~path_view() = default;
}

fn scan_path_next(std::string_view path) -> (usize, usize)
{
  var j = path.find_if(|ch| is_sep_byte(ch));

  if (j == path.end)
    return (path.len, 0);

  return (j - path.begin, 1);
}

pub fn fmt(std::OutputStream mut &os, std::fmt_context mut &ctx, path_view &path) throws(std::error) -> void
{
  std::fmt_to(&mut os, &mut ctx, path.str);
}

#[nodiscard]
pub fn is_absolute(path_view &path) -> bool
{
  return scan_path_prefix(path.str) != 0;
}

#[nodiscard]
pub fn is_relative(path_view &path) -> bool
{
  return scan_path_prefix(path.str) == 0;
}

#[nodiscard]
#[lifetime(depend(*path))]
pub fn prefix(path_view &path) -> std::string_view
{
  return std::string_view(path.str.data, scan_path_prefix(path.str));
}

#[nodiscard]
#[lifetime(depend(*path))]
pub fn basename(path_view &path) -> std::string_view
{
  var base = std::string_view();

  for (var i = path.parts.begin, var end = path.str.end; i != end; ++i)
    base = path[i];

  if (base == "/")
    base = std::string_view();

  if (base == "..")
    base = std::string_view();

  return base;
}

#[nodiscard]
#[lifetime(depend(*path))]
pub fn stem(path_view &path) -> std::string_view
{
  let base = path.basename;

  return std::string_view(base.data, base.strip_prefix(".").find_last('.'));
}

#[nodiscard]
#[lifetime(depend(*path))]
pub fn extension(path_view &path) -> std::string_view
{
  let base = path.basename;

  return std::string_view(base.strip_prefix(".").find_last('.'), path.str.end);
}

#[nodiscard]
#[lifetime(depend(*path))]
pub fn parent(path_view &path) -> path_view
{
  var dir = path_view();
  var base = std::string_view(path.data, 0);

  for (var i = path.parts.begin, var end = path.str.end; i != end; ++i)
  {
    dir = path_view(path.data, base.end);
    base = path[i];
  }

  return dir;
}

pub fn starts_with(path_view &path, String &prefix) -> bool
{
  for (var i = path.parts.begin, var end = path.str.end; i != end; ++i)
  {
    if (std::string_view(path.data, i.super + i.scan.0) == prefix)
      return true;
  }

  return false;
}

pub fn ends_with(path_view &path, String &suffix) -> bool
{
  for (var i = path.parts.begin, var end = path.str.end; i != end; ++i)
  {
    if (std::string_view(i, end) == suffix)
      return true;
  }

  return false;
}

#[nodiscard]
#[lifetime(depend(*path))]
pub fn strip_prefix(path_view &path, String &prefix) -> path_view
{
  for (var i = path.parts.begin, var end = path.str.end; i != end; ++i)
  {
    if (std::string_view(path.data, i.super + i.scan.0) == prefix)
      return path_view(i.super + i.scan.0 + i.scan.1, i.end);
  }

  return path;
}

pub struct path
{
  #[nodiscard]
  pub fn join<Args>(Args & ...paths) -> std::string
  {
    var len = 0;

    #for (var &path : paths)
    {
      len += path.len + 1;
    }

    var str = std::string::with_capacity(len);

    #for (var &path : paths)
    {
      if (!str.empty && !str.ends_with(sys::sep_byte))
        str += sys::sep_byte;

      str += path;
    }

    return str;
  }

  #[nodiscard]
  pub fn join(Range<String> &paths) -> std::string
  {
    var len = 0;

    for (var &path : paths)
    {
      len += path.len + 1;
    }

    var str = std::string::with_capacity(len);

    for (var &path : paths)
    {
      if (!str.empty && !str.ends_with(sys::sep_byte))
        str += sys::sep_byte;

      str += path;
    }

    return str;
  }

  #[nodiscard]
  pub fn normalise(String &path) -> std::string
  {
    var parts = std::vector<std::string_view>::with_capacity(32);

    for (var &part : sys::path_view(path).parts)
    {
      if (part == ".." && !parts.empty)
      {
        if (scan_path_prefix(parts.back) == 0)
          parts.pop_back();
      }
      else
      {
        parts.push_back(part);
      }
    }

    return path::join(parts);
  }

  #[nodiscard]
  pub fn canonicalise(String &path) throws(std::error) -> std::string
  {
    var str = std::string();

    if (var rc = sys::realpath(path, &mut str); rc < 0)
      throw std::system_error(cast<std::errc>(-rc));

    return str;
  }

  #[nodiscard]
  pub fn resolve(String &base, String &path) -> std::string
  {
    if (path_view(path).is_absolute)
      return path;

    return path::join(base, path);
  }

  #[nodiscard]
  pub fn is_absolute(String &path) -> bool
  {
    return path_view(path).is_absolute;
  }

  #[nodiscard]
  pub fn is_relative(String &path) -> bool
  {
    return path_view(path).is_relative;
  }

  #[nodiscard]
  pub fn basename(String &path) -> std::string_view
  {
    return path_view(path).basename;
  }

  #[nodiscard]
  pub fn dirname(String &path) -> sys::path_view
  {
    return path_view(path).parent;
  }
}
