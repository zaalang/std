//
// fs
//

import std.stdlib;
import std.string : String;
import std.memory;
import std.error;
import std.env;
import chrono;

pub enum filetype
{
  unknown,
  block_device,
  character_device,
  directory,
  regular,
  fifo,
  socket,
  symlink,
}

pub enum permissions
{
  pub const none = 0;

  pub const owner_read = 0o400;
  pub const owner_write = 0o200;
  pub const owner_exec = 0o100;
  pub const owner_all = 0o700;

  pub const group_read = 0o40;
  pub const group_write = 0o20;
  pub const group_exec = 0o10;
  pub const group_all = 0o70;

  pub const others_read = 0o4;
  pub const others_write = 0o2;
  pub const others_exec = 0o1;
  pub const others_all = 0o7;

  pub const set_uid = 0o4000;
  pub const set_gid = 0o2000;
  pub const sticky_bit = 0o1000;

  pub const all = 0o777;
  pub const mask = 0o7777;
}

#if __cfg("os.linux")

  import os.linux.fcntl;
  import os.linux.unistd;

  pub struct stat : pub os::stat
  {
    pub fn type(this &) -> filetype
    {
      using os;

      switch (this.st_mode & S_IFMT)
      {
        case S_IFREG:
          return regular;

        case S_IFBLK:
          return block_device;

        case S_IFDIR:
          return directory;

        case S_IFCHR:
          return character_device;

        case S_IFLNK:
          return symlink;

        case S_IFIFO:
          return fifo;

        case S_IFSOCK:
          return socket;
      }

      return unknown;
    }

    pub fn is_directory(this &) -> bool
    {
      return this.type == filetype::directory;
    }

    pub fn is_file(this &) -> bool
    {
      return this.type == filetype::regular;
    }

    pub fn is_symlink(this &) -> bool
    {
      return this.type == filetype::symlink;
    }

    pub fn filesize(this &) -> u64
    {
      return this.st_size;
    }

    pub fn modified(this &) -> chrono::system_time<chrono::nanoseconds>
    {
      return chrono::nanoseconds(this.st_mtim.tv_sec * 1_000_000_000 + this.st_mtim.tv_nsec);
    }

    pub fn permissions(this &) -> u32
    {
      return cast<u32>(this.st_mode & 0o777);
    }

    pub stat() = default;
    pub stat(stat&) = default;
    pub fn =(stat mut &, stat &) -> stat mut & = default;
    pub ~stat() = default;
  }

  pub fn stat(i32 fd, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    if (var rc = fstat(fd, &stat); rc < 0)
      throw std::system_error(cast<std::errc>(-rc));

    return 0;
  }

  pub fn stat(std::string &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    if (var rc = stat(path.data, &stat); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn stat(String &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    if (path.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var pathstr = [<u8>: void; 4096];
    std::memcpy(pathstr.data, path.data, path.len);
    pathstr[path.len] = 0;

    if (var rc = stat(pathstr.data, &stat); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn lstat(std::string &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    if (var rc = lstat(path.data, &stat); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn lstat(String &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    if (path.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var pathstr = [<u8>: void; 4096];
    std::memcpy(pathstr.data, path.data, path.len);
    pathstr[path.len] = 0;

    if (var rc = lstat(pathstr.data, &stat); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn readlink(std::string &path, std::string mut &buffer) throws(std::error) -> i32
  {
    using os;

    buffer.clear();
    buffer.reserve(4096);

    if (var rc = os::readlink(path.data, buffer.data, buffer.capacity); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }
    else
    {
      buffer.append_from_capacity(cast(rc));
    }

    return 0;
  }

  pub fn readlink(String &path, std::string mut &buffer) throws(std::error) -> i32
  {
    using os;

    buffer.clear();
    buffer.reserve(4096);

    if (path.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var pathstr = [<u8>: void; 4096];
    std::memcpy(pathstr.data, path.data, path.len);
    pathstr[path.len] = 0;

    if (var rc = os::readlink(pathstr.data, buffer.data, buffer.capacity); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }
    else
    {
      buffer.append_from_capacity(cast(rc));
    }

    return 0;
  }

  pub fn realpath(String &path, std::string mut &buffer) throws(std::error) -> i32
  {
    var i = 0;
    var j = 0;
    var tgt = std::string();
    var stack = std::string(path);

    if (var rc = get_cwd(&mut buffer); rc < 0)
      return rc;

    for (; i < stack.len; )
    {
      if (stack[i] == cast<u8>('/'))
      {
        buffer = "/";

        ++i;
      }

      for (; i < stack.len; i = j + 1)
      {
        j = i + std::memchr(stack.data + i, cast('/'), stack.len - i);

        if (stack[i .. j] == "" || stack[i .. j] == ".")
        {
          continue;
        }

        if (stack[i .. j] == "..")
        {
          buffer.erase(buffer.find_last('/'), buffer.end);

          continue;
        }

        var n = buffer.len;

        if (!buffer.ends_with(cast<u8>('/')))
          buffer += cast<u8>('/');

        buffer += stack[i .. j];

        if (var rc = readlink(buffer, &mut tgt); rc < 0)
        {
          if (rc == os::EINVAL)
            continue;

          return rc;
        }

        buffer.resize(n);

        stack.replace(i, j - i, tgt);

        break;
      }
    }

    return 0;
  }

  pub fn get_cwd(std::string mut &buffer) throws(std::error) -> i32
  {
    using os;

    buffer.clear();
    buffer.reserve(512);

    for (;;)
    {
      if (var rc = getcwd(buffer.data, buffer.capacity); rc <= 0)
      {
        if (rc == ERANGE)
        {
          buffer.reserve(2 * buffer.capacity);

          continue;
        }

        throw std::system_error(cast<std::errc>(-rc));
      }

      var len = std::memchr(buffer.data, 0, buffer.capacity);

      buffer.append_from_capacity(len);

      return cast(len);
    }
  }

  pub fn mkdir(std::string &path, u32 mode = 0o775) throws(std::error) -> i32
  {
    using os;

    if (var rc = mkdir(path.data, mode); rc < 0)
    {
      if (rc == EEXIST || rc == EACCES || rc == EPERM || rc == EROFS)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn mkdir(String &path, u32 mode = 0o775) throws(std::error) -> i32
  {
    using os;

    if (path.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var pathstr = [<u8>: void; 4096];
    std::memcpy(pathstr.data, path.data, path.len);
    pathstr[path.len] = 0;

    if (var rc = mkdir(pathstr.data, mode); rc < 0)
    {
      if (rc == EEXIST || rc == EACCES || rc == EPERM || rc == EROFS)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn mkpath(String &path) throws(std::error) -> i32
  {
    using os;

    if (path.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var pathstr = [<u8>: void; 4096];
    std::memcpy(pathstr.data, path.data, path.len);

    for (var i = 0; i < path.len; )
    {
      var j = i + std::memchr(pathstr.data + i, cast('/'), path.len - i);

      if (i != j)
      {
        pathstr[j] = 0;

        var stat = os::stat(void);

        if (var rc = stat(pathstr.data, &stat); rc < 0)
        {
          if (var rc = mkdir(pathstr.data, 0o755); rc < 0)
            throw std::system_error(cast<std::errc>(-rc));
        }
        else
        {
          if (stat.st_mode & S_IFMT != S_IFDIR)
            throw std::system_error(std::errc::not_a_directory);
        }

        pathstr[j] = cast('/');
      }

      i = j + 1;
    }

    return 0;
  }

  pub fn chmod(std::string &path, u32 permissions) throws(std::error) -> i32
  {
    using os;

    if (var rc = chmod(path.data, permissions); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL || rc == EROFS)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn chmod(String &path, u32 permissions) throws(std::error) -> i32
  {
    using os;

    if (path.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var pathstr = [<u8>: void; 4096];
    std::memcpy(pathstr.data, path.data, path.len);
    pathstr[path.len] = 0;

    if (var rc = chmod(pathstr.data, permissions); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL || rc == EROFS)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn chown(std::string &path, std::optional<u32> uid, std::optional<u32> gid) throws(std::error) -> i32
  {
    using os;

    if (var rc = chown(path.data, uid.unwrap_or(~0), gid.unwrap_or(~0)); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL || rc == EROFS)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn chown(String &path, std::optional<u32> uid, std::optional<u32> gid) throws(std::error) -> i32
  {
    using os;

    if (path.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var pathstr = [<u8>: void; 4096];
    std::memcpy(pathstr.data, path.data, path.len);
    pathstr[path.len] = 0;

    if (var rc = chown(pathstr.data, uid.unwrap_or(~0), gid.unwrap_or(~0)); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL || rc == EROFS)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn rename(std::string &oldpath, std::string &newpath) throws(std::error) -> i32
  {
    using os;

    if (var rc = rename(oldpath.data, newpath.data); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL || rc == EROFS || rc == EXDEV)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn rename(String &oldpath, String &newpath) throws(std::error) -> i32
  {
    using os;

    if (oldpath.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var oldpathstr = [<u8>: void; 4096];
    std::memcpy(oldpathstr.data, oldpath.data, oldpath.len);
    oldpathstr[oldpath.len] = 0;

    if (newpath.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var newpathstr = [<u8>: void; 4096];
    std::memcpy(newpathstr.data, newpath.data, newpath.len);
    newpathstr[newpath.len] = 0;

    if (var rc = rename(oldpathstr.data, newpathstr.data); rc < 0)
    {
      if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EINVAL || rc == EROFS || rc == EXDEV)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn unlink(std::string &path) throws(std::error) -> i32
  {
    using os;

    var stat = os::stat();
    if (var rc = stat(path.data, &stat); rc < 0)
      throw std::system_error(cast<std::errc>(-rc));

    switch (stat.st_mode & S_IFMT)
    {
      case S_IFDIR:
        if (var rc = rmdir(path.data); rc < 0)
        {
          if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EROFS)
            return rc;

          throw std::system_error(cast<std::errc>(-rc));
        }

      else:
        if (var rc = unlink(path.data); rc < 0)
        {
          if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EROFS)
            return rc;

          throw std::system_error(cast<std::errc>(-rc));
        }
    }

    return 0;
  }

  pub fn unlink(String &path) throws(std::error) -> i32
  {
    using os;

    if (path.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var pathstr = [<u8>: void; 4096];
    std::memcpy(pathstr.data, path.data, path.len);
    pathstr[path.len] = 0;

    var stat = os::stat();
    if (var rc = stat(pathstr.data, &stat); rc < 0)
      throw std::system_error(cast<std::errc>(-rc));

    switch (stat.st_mode & S_IFMT)
    {
      case S_IFDIR:
        if (var rc = rmdir(pathstr.data); rc < 0)
        {
          if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EROFS)
            return rc;

          throw std::system_error(cast<std::errc>(-rc));
        }

      else:
        if (var rc = unlink(pathstr.data); rc < 0)
        {
          if (rc == ENOENT || rc == EACCES || rc == EPERM || rc == EROFS)
            return rc;

          throw std::system_error(cast<std::errc>(-rc));
        }
    }

    return 0;
  }

  pub fn rm_rf(String &path) throws(std::error) -> i32
  {
    fn rmdir(String &path) throws(std::error) -> i32
    {
      var dirp = dirp();
      if (var rc = opendir(&mut dirp, path); rc < 0)
        return rc;

      while (!dirp.eof)
      {
        switch (dirp.type)
        {
          case directory:
            if (var rc = rmdir(dirp.path); rc < 0)
              return rc;

          else:
            if (var rc = unlink(dirp.path); rc < 0)
              return rc;
        }

        readdir(&mut dirp);
      }

      if (var rc = unlink(path); rc < 0)
        return rc;

      return 0;
    }

    var stat = stat();
    if (var rc = lstat(path, &mut stat); rc < 0)
      return rc;

    switch (stat.type)
    {
      case directory:
        if (var rc = rmdir(path); rc < 0)
          return rc;

      else:
        if (var rc = unlink(path); rc < 0)
          return rc;
    }

    return 0;
  }

  pub struct dirp
  {
    int fd;
    usize cursor;
    usize buflen;
    u8[1024] buffer;

    usize pathlen;
    std::string pathname;

    fn head(this &) -> os::dirent *
    {
      return cast(this.buffer.data + this.cursor);
    }

    #[lifetime(depend(this))]
    pub fn path(this &) -> std::string &
    {
      return &this.pathname;
    }

    #[lifetime(depend(this))]
    pub fn name(this &) -> std::string_view
    {
      return std::string_view(this.pathname.begin + this.pathlen, this.pathname.end);
    }

    pub fn type(this &) -> filetype
    {
      using os;

      switch (this.head.d_type)
      {
        case 1:
          return fifo;

        case 2:
          return character_device;

        case 4:
          return directory;

        case 6:
          return block_device;

        case 8:
          return regular;

        case 10:
          return symlink;

        case 12:
          return socket;
      }

      return unknown;
    }

    pub fn is_directory(this &) -> bool
    {
      return this.type == filetype::directory;
    }

    pub fn is_file(this &) -> bool
    {
      return this.type == filetype::regular;
    }

    pub fn is_symlink(this &) -> bool
    {
      return this.type == filetype::symlink;
    }

    pub fn stat(this &) throws(std::error) -> stat
    {
      var stat = stat();

      if (var rc = lstat(this.path, &mut stat); rc < 0)
        throw std::system_error(cast<std::errc>(-rc));

      return stat;
    }

    pub fn eof(this &) -> bool
    {
      return this.buflen == 0;
    }

    pub dirp()
    {
    }

    pub ~dirp()
    {
      if (fd != 0)
        os::close(fd);
    }
  }

  pub fn fmt(std::OutputStream mut &os, std::fmt_context mut &ctx, dirp &entry) throws(std::error) -> void
  {
    std::fmt_to(&mut os, &mut ctx, entry.name);
  }

  pub fn opendir(dirp mut &dirp, std::string &path) throws(std::error) -> i32
  {
    using os;

    var fd = open(path.data, O_RDONLY | O_DIRECTORY, 0);

    if (fd < 0)
    {
      if (fd == ENOENT || fd == EACCES || fd == EPERM || fd == ENOTDIR || fd == EINVAL)
        return fd;

      throw std::system_error(cast<std::errc>(-fd));
    }

    dirp.fd = fd;
    dirp.pathname = path;

    if (!path.ends_with(cast<u8>('/')))
      dirp.pathname += cast<u8>('/');

    dirp.pathlen = dirp.pathname.len;

    readdir(&mut dirp);

    return 0;
  }

  pub fn opendir(dirp mut &dirp, String &path) throws(std::error) -> i32
  {
    using os;

    if (path.len >= 4095)
      throw std::system_error(std::errc::name_too_long);

    var pathstr = [<u8>: void; 4096];
    std::memcpy(pathstr.data, path.data, path.len);
    pathstr[path.len] = 0;

    var fd = open(pathstr.data, O_RDONLY | O_DIRECTORY, 0);

    if (fd < 0)
    {
      if (fd == ENOENT || fd == EACCES || fd == EPERM || fd == ENOTDIR || fd == EINVAL)
        return fd;

      throw std::system_error(cast<std::errc>(-fd));
    }

    dirp.fd = fd;
    dirp.pathname = path;

    if (!path.ends_with(cast<u8>('/')))
      dirp.pathname += cast<u8>('/');

    dirp.pathlen = dirp.pathname.len;

    readdir(&mut dirp);

    return 0;
  }

  pub fn readdir(dirp mut &dirp) throws(std::error) -> i32
  {
    using os;

    for (;;)
    {
      if (dirp.cursor < dirp.buflen)
      {
        dirp.cursor += cast(dirp.head.d_reclen);
      }

      if (dirp.buflen <= dirp.cursor)
      {
        var cnt = getdents(dirp.fd, dirp.buffer.data, dirp.buffer.len);

        if (cnt < 0)
          throw std::system_error(cast<std::errc>(-cnt));

        dirp.buflen = cast(cnt);
        dirp.cursor = 0;
      }

      if (dirp.cursor < dirp.buflen)
      {
        var entry = dirp.head;

        if (entry.name == "." || entry.name == "..")
          continue;

        dirp.pathname.replace(dirp.pathlen, ~0, dirp.head.name);
      }

      return 0;
    }
  }

#end

#if __cfg("os.windows")

  import os.windows.kernel32;
  import os.windows.error;

  pub struct stat : pub os::WIN32_FILE_ATTRIBUTE_DATA
  {
    pub fn type(this &) -> filetype
    {
      using os;

      if (this.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT != 0)
        return symlink;

      if (this.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY != 0)
        return directory;

      return regular;
    }

    pub fn is_directory(this &) -> bool
    {
      return this.type == filetype::directory;
    }

    pub fn is_file(this &) -> bool
    {
      return this.type == filetype::regular;
    }

    pub fn is_symlink(this &) -> bool
    {
      return this.type == filetype::symlink;
    }

    pub fn filesize(this &) -> u64
    {
      return cast<u64>(this.nFileSizeHigh) << 32 + cast<u64>(this.nFileSizeLow);
    }

    pub fn modified(this &) -> chrono::system_time<chrono::nanoseconds>
    {
      return chrono::nanoseconds((std::max(cast<u64>(this.ftLastWriteTime.dwHighDateTime) << 32 + cast<u64>(this.ftLastWriteTime.dwLowDateTime), 116_444_736_000_000_000) - 116_444_736_000_000_000) * 100);
    }

    pub fn permissions(this &) -> u32
    {
      using os;

      if (this.dwFileAttributes & FILE_ATTRIBUTE_READONLY != 0)
        return 0o555;

      return 0o777;
    }

    pub stat() = default;
    pub stat(stat&) = default;
    pub fn =(stat mut &, stat &) -> stat mut & = default;
    pub ~stat() = default;
  }

  pub fn stat(String &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    var pathstr = [<u16>: void; 2048];
    var pathlen = MultiByteToWideChar(CP_UTF8, 0, path.data, cast(path.len), pathstr.data, cast(pathstr.len - 1));

    if (pathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    pathstr[cast(pathlen)] = 0;

    if (GetFileAttributesExW(pathstr.data, GET_FILEEX_INFO_LEVELS::GetFileExInfoStandard, &stat) != 0)
    {
      if (stat.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT == 0)
        return 0;
    }

    var wfd = WIN32_FIND_DATAW();
    var handle = FindFirstFileW(pathstr.data, &wfd);

    if (handle == INVALID_HANDLE_VALUE)
    {
      var rc = error_code(GetLastError());

      if (rc == std::errc::not_found || rc == std::errc::permission_denied)
        return -cast<i32>(rc);

      throw std::system_error(rc);
    }

    if (wfd.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT == 0)
    {
      stat.dwFileAttributes = wfd.dwFileAttributes;
      stat.ftCreationTime = wfd.ftCreationTime;
      stat.ftLastAccessTime = wfd.ftLastAccessTime;
      stat.ftLastWriteTime = wfd.ftLastWriteTime;
      stat.nFileSizeHigh = wfd.nFileSizeHigh;
      stat.nFileSizeLow = wfd.nFileSizeLow;

      FindClose(handle);

      return 0;
    }

    FindClose(handle);

    handle = CreateFileW(pathstr.data, 0, 0, null, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0);

    if (handle == INVALID_HANDLE_VALUE)
      throw std::system_error(error_code(GetLastError()));

    var hfi = BY_HANDLE_FILE_INFORMATION();

    if (GetFileInformationByHandle(handle, &hfi) != 0)
    {
      stat.dwFileAttributes = hfi.dwFileAttributes;
      stat.ftCreationTime = hfi.ftCreationTime;
      stat.ftLastAccessTime = hfi.ftLastAccessTime;
      stat.ftLastWriteTime = hfi.ftLastWriteTime;
      stat.nFileSizeHigh = hfi.nFileSizeHigh;
      stat.nFileSizeLow = hfi.nFileSizeLow;

      CloseHandle(handle);

      return 0;
    }

    CloseHandle(handle);

    throw std::system_error(std::errc::not_supported);
  }

  pub fn lstat(String &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    var pathstr = [<u16>: void; 2048];
    var pathlen = MultiByteToWideChar(CP_UTF8, 0, path.data, cast(path.len), pathstr.data, cast(pathstr.len - 1));

    if (pathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    pathstr[cast(pathlen)] = 0;

    if (GetFileAttributesExW(pathstr.data, GET_FILEEX_INFO_LEVELS::GetFileExInfoStandard, &stat) != 0)
      return 0;

    var wfd = WIN32_FIND_DATAW();
    var handle = FindFirstFileW(pathstr.data, &wfd);

    if (handle == INVALID_HANDLE_VALUE)
    {
      var rc = error_code(GetLastError());

      if (rc == std::errc::not_found || rc == std::errc::permission_denied)
        return -cast<i32>(rc);

      throw std::system_error(rc);
    }

    stat.dwFileAttributes = wfd.dwFileAttributes;
    stat.ftCreationTime = wfd.ftCreationTime;
    stat.ftLastAccessTime = wfd.ftLastAccessTime;
    stat.ftLastWriteTime = wfd.ftLastWriteTime;
    stat.nFileSizeHigh = wfd.nFileSizeHigh;
    stat.nFileSizeLow = wfd.nFileSizeLow;

    FindClose(handle);

    return 0;
  }

  pub fn realpath(String &path, std::string mut &buffer) throws(std::error) -> i32
  {
    using os;

    var pathstr = [<u16>: void; 2048];
    var pathlen = MultiByteToWideChar(CP_UTF8, 0, path.data, cast(path.len), pathstr.data, cast(pathstr.len - 1));

    if (pathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    pathstr[cast(pathlen)] = 0;

    var handle = CreateFileW(pathstr.data, 0, 0, null, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0);

    if (handle == INVALID_HANDLE_VALUE)
    {
      var rc = error_code(GetLastError());

      if (rc == std::errc::not_found || rc == std::errc::permission_denied)
        return -cast<i32>(rc);

      throw std::system_error(rc);
    }

    var len = GetFinalPathNameByHandleW(handle, pathstr.data, cast(pathstr.len), 8);

    buffer.clear();
    buffer.reserve(cast(pathlen) * sizeof<u32>);

    var nchars = WideCharToMultiByte(CP_UTF8, 0, pathstr.data, cast(len), buffer.data, cast(buffer.capacity), null, null);

    buffer.append_from_capacity(cast(nchars));

    CloseHandle(handle);

    return 0;
  }

  pub fn get_cwd(std::string mut &buffer) throws(std::error) -> i32
  {
    using os;

    var pathstr = [<u16>: void; 2048];
    var pathlen = GetCurrentDirectoryW(cast(pathstr.len), pathstr.data);

    if (pathlen >= 2047)
      throw std::system_error(std::errc::name_too_long);

    if (pathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    buffer.clear();
    buffer.reserve(cast(pathlen) * sizeof<u32>);

    var nchars = WideCharToMultiByte(CP_UTF8, 0, pathstr.data, cast(pathlen), buffer.data, cast(buffer.capacity), null, null);

    buffer.append_from_capacity(cast(nchars));

    return 0;
  }

  pub fn mkdir(String &path) throws(std::error) -> i32
  {
    using os;

    var pathstr = [<u16>: void; 2048];
    var pathlen = MultiByteToWideChar(CP_UTF8, 0, path.data, cast(path.len), pathstr.data, cast(pathstr.len - 1));

    if (pathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    pathstr[cast(pathlen)] = 0;

    if (CreateDirectoryW(pathstr.data, null) == 0)
    {
      var rc = error_code(GetLastError());

      if (rc == std::errc::already_exists || rc == std::errc::permission_denied)
        return -cast<i32>(rc);

      throw std::system_error(rc);
    }

    return 0;
  }

  pub fn mkpath(String &path) throws(std::error) -> i32
  {
    using os;

    var pathstr = [<u16>: void; 2048];
    var pathlen = MultiByteToWideChar(CP_UTF8, 0, path.data, cast(path.len), pathstr.data, cast(pathstr.len - 1));

    if (pathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    for (var i = 1; i <= path.len; ++i)
    {
      if (pathstr[i] == cast('\\') || pathstr[i] == cast('/') || i == path.len)
      {
        pathstr[i] = 0;

        var stat = os::WIN32_FILE_ATTRIBUTE_DATA(void);

        if (GetFileAttributesExW(pathstr.data, GET_FILEEX_INFO_LEVELS::GetFileExInfoStandard, &stat) == 0)
        {
          if (CreateDirectoryW(pathstr.data, null) == 0)
            throw std::system_error(error_code(GetLastError()));
        }
        else
        {
          if (stat.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY == 0)
            throw std::system_error(std::errc::not_a_directory);
        }

        pathstr[i] = cast('\\');
      }
    }

    return 0;
  }

  pub fn rename(String &oldpath, String &newpath) throws(std::error) -> i32
  {
    using os;

    var oldpathstr = [<u16>: void; 2048];
    var oldpathlen = MultiByteToWideChar(CP_UTF8, 0, oldpath.data, cast(oldpath.len), oldpathstr.data, cast(oldpathstr.len - 1));

    if (oldpathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    oldpathstr[cast(oldpathlen)] = 0;

    var newpathstr = [<u16>: void; 2048];
    var newpathlen = MultiByteToWideChar(CP_UTF8, 0, newpath.data, cast(newpath.len), newpathstr.data, cast(newpathstr.len - 1));

    if (newpathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    newpathstr[cast(newpathlen)] = 0;

    if (MoveFileW(oldpathstr.data, newpathstr.data) == 0)
    {
      var rc = error_code(GetLastError());

      if (rc == std::errc::not_found || rc == std::errc::permission_denied)
        return -cast<i32>(rc);

      throw std::system_error(rc);
    }

    return 0;
  }

  pub fn unlink(String &path) throws(std::error) -> i32
  {
    using os;

    var pathstr = [<u16>: void; 2048];
    var pathlen = MultiByteToWideChar(CP_UTF8, 0, path.data, cast(path.len), pathstr.data, cast(pathstr.len - 1));

    if (pathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    pathstr[cast(pathlen)] = 0;

    var stat = stat();
    GetFileAttributesExW(pathstr.data, GET_FILEEX_INFO_LEVELS::GetFileExInfoStandard, &stat);

    switch (stat.type)
    {
      case directory:
        if (RemoveDirectoryW(pathstr.data) == 0)
        {
          var rc = error_code(GetLastError());

          if (rc == std::errc::not_found || rc == std::errc::permission_denied)
            return -cast<i32>(rc);

          throw std::system_error(rc);
        }

      else:
        if (DeleteFileW(pathstr.data) == 0)
        {
          var rc = error_code(GetLastError());

          if (rc == std::errc::not_found || rc == std::errc::permission_denied)
            return -cast<i32>(rc);

          throw std::system_error(rc);
        }

    }

    return 0;
  }

  pub fn rm_rf(String &path) throws(std::error) -> i32
  {
    fn rmdir(String &path) throws(std::error) -> i32
    {
      var dirp = dirp();
      if (var rc = opendir(&mut dirp, path); rc < 0)
        return rc;

      while (!dirp.eof)
      {
        switch (dirp.type)
        {
          case directory:
            if (var rc = rmdir(dirp.path); rc < 0)
              return rc;

          else:
            if (var rc = unlink(dirp.path); rc < 0)
              return rc;
        }

        readdir(&mut dirp);
      }

      if (var rc = unlink(path); rc < 0)
        return rc;

      return 0;
    }

    var stat = stat();
    if (var rc = lstat(path, &mut stat); rc < 0)
      return rc;

    switch (stat.type)
    {
      case directory:
        if (var rc = rmdir(path); rc < 0)
          return rc;

      else:
        if (var rc = unlink(path); rc < 0)
          return rc;
    }

    return 0;
  }

  pub struct dirp
  {
    os::HANDLE fd;
    os::WIN32_FIND_DATAW wfd;
    os::BOOL status;

    usize pathlen;
    std::string pathname;

    #[lifetime(depend(this))]
    pub fn path(this &) -> std::string &
    {
      return &this.pathname;
    }

    #[lifetime(depend(this))]
    pub fn name(this &) -> std::string_view
    {
      return std::string_view(this.pathname.begin + this.pathlen, this.pathname.end);
    }

    pub fn type(this &) -> filetype
    {
      using os;

      if (this.wfd.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT != 0)
        return symlink;

      if (this.wfd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY != 0)
        return directory;

      return regular;
    }

    pub fn is_directory(this &) -> bool
    {
      return this.type == filetype::directory;
    }

    pub fn is_file(this &) -> bool
    {
      return this.type == filetype::regular;
    }

    pub fn is_symlink(this &) -> bool
    {
      return this.type == filetype::symlink;
    }

    pub fn stat(this &) throws(std::error) -> stat
    {
      var stat = stat();

      stat.dwFileAttributes = this.wfd.dwFileAttributes;
      stat.ftCreationTime = this.wfd.ftCreationTime;
      stat.ftLastAccessTime = this.wfd.ftLastAccessTime;
      stat.ftLastWriteTime = this.wfd.ftLastWriteTime;
      stat.nFileSizeHigh = this.wfd.nFileSizeHigh;
      stat.nFileSizeLow = this.wfd.nFileSizeLow;

      return stat;
    }

    pub fn eof(this &) -> bool
    {
      return this.status == 0;
    }

    pub dirp()
    {
    }

    pub ~dirp()
    {
      if (fd != 0)
        os::FindClose(fd);
    }
  }

  pub fn fmt(std::OutputStream mut &os, std::fmt_context mut &ctx, dirp &entry) throws(std::error) -> void
  {
    std::fmt_to(&mut os, &mut ctx, entry.name);
  }

  pub fn opendir(dirp mut &dirp, String &path) throws(std::error) -> i32
  {
    using os;

    var pathstr = [<u16>: void; 2048];
    var pathlen = MultiByteToWideChar(CP_UTF8, 0, path.data, cast(path.len), pathstr.data, cast(pathstr.len - 3));

    if (pathlen == 0)
      throw std::system_error(error_code(GetLastError()));

    pathstr[cast(pathlen + 0)] = cast('\\');
    pathstr[cast(pathlen + 1)] = cast('*');
    pathstr[cast(pathlen + 2)] = 0;

    var handle = FindFirstFileW(pathstr.data, &dirp.wfd);

    if (handle == INVALID_HANDLE_VALUE)
    {
      var rc = error_code(GetLastError());

      if (rc == std::errc::not_found || rc == std::errc::permission_denied)
        return -cast<i32>(rc);

      throw std::system_error(rc);
    }

    dirp.fd = handle;
    dirp.pathname = path;
    dirp.status = 1;

    if (!path.ends_with(cast<u8>('\\')) && !path.ends_with(cast<u8>('/')))
      dirp.pathname += cast<u8>('\\');

    dirp.pathlen = dirp.pathname.len;

    while (dirp.wfd.cFileName[0] == 46 && (dirp.wfd.cFileName[1] == 0 || (dirp.wfd.cFileName[1] == 46 && dirp.wfd.cFileName[2] == 0)))
    {
      dirp.status = FindNextFileW(dirp.fd, &dirp.wfd);

      if (dirp.status == 0)
        break;
    }

    if (dirp.status != 0)
    {
      var len = std::find(dirp.wfd.cFileName, 0) - dirp.wfd.cFileName.data;

      dirp.pathname.reserve(dirp.pathlen + len * sizeof<u32>);

      var nchars = WideCharToMultiByte(CP_UTF8, 0, dirp.wfd.cFileName.data, cast(len), dirp.pathname.data + dirp.pathlen, cast(len * sizeof<u32>), null, null);

      dirp.pathname.append_from_capacity(cast(nchars));
    }

    return 0;
  }

  pub fn readdir(dirp mut &dirp) throws(std::error) -> i32
  {
    using os;

    for (;;)
    {
      dirp.status = FindNextFileW(dirp.fd, &dirp.wfd);

      if (dirp.status != 0)
      {
        if (dirp.wfd.cFileName[0] == 46 && (dirp.wfd.cFileName[1] == 0 || (dirp.wfd.cFileName[1] == 46 && dirp.wfd.cFileName[2] == 0)))
          continue;

        var len = std::find(dirp.wfd.cFileName, 0) - dirp.wfd.cFileName.data;

        dirp.pathname.erase(dirp.pathlen, ~0);
        dirp.pathname.reserve(dirp.pathlen + len * sizeof<u32>);

        var nchars = WideCharToMultiByte(CP_UTF8, 0, dirp.wfd.cFileName.data, cast(len), dirp.pathname.data + dirp.pathlen, cast(len * sizeof<u32>), null, null);

        dirp.pathname.append_from_capacity(cast(nchars));
      }

      return 0;
    }
  }

#end

#if __cfg("os.zaos")

  import os.zaos.time;
  import os.zaos.fcntl;

  extern fn thread_ring() -> os::ioring mut &;

  pub struct stat : pub os::stat
  {
    pub fn type(this &) -> filetype
    {
      using os;

      switch (this.mode & S_IFMT)
      {
        case S_IFREG:
          return regular;

        case S_IFBLK:
          return block_device;

        case S_IFDIR:
          return directory;

        case S_IFCHR:
          return character_device;

        case S_IFLNK:
          return symlink;

        case S_IFDATA:
        case S_IFSOCK:
          return socket;
      }

      return unknown;
    }

    pub fn is_directory(this &) -> bool
    {
      return this.type == filetype::directory;
    }

    pub fn is_file(this &) -> bool
    {
      return this.type == filetype::regular;
    }

    pub fn is_symlink(this &) -> bool
    {
      return this.type == filetype::symlink;
    }

    pub fn filesize(this &) -> u64
    {
      return this.size;
    }

    pub fn modified(this &) -> chrono::system_time<chrono::nanoseconds>
    {
      return chrono::nanoseconds(this.mtime);
    }

    pub fn permissions(this &) -> u32
    {
      return cast<u32>(this.mode & 0o777);
    }

    pub stat() = default;
    pub stat(stat&) = default;
    pub fn =(stat mut &, stat &) -> stat mut & = default;
    pub ~stat() = default;
  }

  pub fn stat(i32 fd, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    if (var rc = stat(&mut thread_ring, fd, &stat, 0x7f); rc < 0)
      throw std::system_error(cast<std::errc>(-rc));

    return 0;
  }

  pub fn stat(i32 dir, String &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    var fd = open(&mut thread_ring, dir, os::string(path.data, path.len), 0, 0);

    if (fd < 0)
    {
      if (fd == EPERM || fd == ENOENT || fd == EACCES || fd == EINVAL)
        return fd;

      throw std::system_error(cast<std::errc>(-fd));
    }

    if (var rc = stat(&mut thread_ring, fd, &stat, 0x7f); rc < 0)
    {
      close(&mut thread_ring, fd);

      throw std::system_error(cast<std::errc>(-rc));
    }

    close(&mut thread_ring, fd);

    return 0;
  }

  pub fn stat(String &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    var dir = STDCWD_FILENO;

    if (path.len > 0 && *path.data == cast('/'))
      dir = STDROOT_FILENO;

    if (var rc = stat(dir, path, &mut stat); rc < 0)
      return rc;

    return 0;
  }

  pub fn lstat(i32 dir, String &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    var fd = open(&mut thread_ring, dir, os::string(path.data, path.len), O_NOFOLLOW, 0);

    if (fd < 0)
    {
      if (fd == EPERM || fd == ENOENT || fd == EACCES || fd == EINVAL)
        return fd;

      throw std::system_error(cast<std::errc>(-fd));
    }

    if (var rc = stat(&mut thread_ring, fd, &stat, 0x7f); rc < 0)
    {
      close(&mut thread_ring, fd);

      throw std::system_error(cast<std::errc>(-rc));
    }

    close(&mut thread_ring, fd);

    return 0;
  }

  pub fn lstat(String &path, stat mut &stat) throws(std::error) -> i32
  {
    using os;

    var dir = STDCWD_FILENO;

    if (path.len > 0 && *path.data == cast('/'))
      dir = STDROOT_FILENO;

    if (var rc = lstat(dir, path, &mut stat); rc < 0)
      return rc;

    return 0;
  }

  pub fn readlink(String &path, std::string mut &buffer) throws(std::error) -> i32
  {
    using os;

    buffer.clear();
    buffer.reserve(4096);

    var dir = STDCWD_FILENO;

    if (path.len > 0 && *path.data == cast('/'))
      dir = STDROOT_FILENO;

    var fd = open(&mut thread_ring, dir, os::string(path.data, path.len), O_SYMLINK | O_NOFOLLOW, 0);

    if (fd < 0)
    {
      if (fd == EPERM || fd == ENOENT || fd == EACCES || fd == EINVAL)
        return fd;

      throw std::system_error(cast<std::errc>(-fd));
    }

    if (var rc = os::read(&mut thread_ring, fd, buffer.data, buffer.capacity); rc < 0)
    {
      throw std::system_error(cast<std::errc>(-rc));
    }
    else
    {
      buffer.append_from_capacity(cast(rc));
    }

    return 0;
  }

  pub fn realpath(String &path, std::string mut &buffer) throws(std::error) -> i32
  {
    var i = 0;
    var j = 0;
    var tgt = std::string();
    var stack = std::string(path);

    if (var rc = get_cwd(&mut buffer); rc < 0)
      return rc;

    for (; i < stack.len; )
    {
      if (stack[i] == cast<u8>('/'))
      {
        buffer = "/";

        ++i;
      }

      for (; i < stack.len; i = j + 1)
      {
        j = i + std::memchr(stack.data + i, cast('/'), stack.len - i);

        if (stack[i .. j] == "" || stack[i .. j] == ".")
        {
          continue;
        }

        if (stack[i .. j] == "..")
        {
          buffer.erase(buffer.find_last('/'), buffer.end);

          continue;
        }

        var n = buffer.len;

        if (!buffer.ends_with(cast<u8>('/')))
          buffer += cast<u8>('/');

        buffer += stack[i .. j];

        if (var rc = readlink(buffer, &mut tgt); rc < 0)
        {
          if (rc == os::EINVAL)
            continue;

          return rc;
        }

        buffer.resize(n);

        stack.replace(i, j - i, tgt);

        break;
      }
    }

    return 0;
  }

  pub fn get_cwd(std::string mut &buffer) throws(std::error) -> i32
  {
    using os;

    switch (std::env::var("CWD"))
    {
      case Some[cwd]:
        buffer = cwd;

      else:
        buffer.clear();
    }

    return 0;
  }

  pub fn mkdir(String &path, u32 mode = 0o775) throws(std::error) -> i32
  {
    using os;

    if (var rc = mkdir(&mut thread_ring, os::string(path.data, path.len), 0, mode); rc < 0)
    {
      if (rc == EPERM || rc == EACCES || rc == EEXIST || rc == EROFS)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn mkpath(String &path) throws(std::error) -> i32
  {
    using os;

    var dir = STDCWD_FILENO;

    if (path.len > 0 && *path.data == cast('/'))
      dir = STDROOT_FILENO;

    for (var i = 0; i < path.len; )
    {
      var j = i + std::memchr(path.data + i, cast('/'), path.len - i);

      if (i != j)
      {
        var fd = open(&mut thread_ring, dir, os::string(path.data + i, j - i), O_DIRECTORY, 0);

        if (fd == ENOENT)
        {
          if (var rc = mkdir(&mut thread_ring, dir, os::string(path.data + i, j - i), 0, 0o775); rc < 0)
          {
            if (dir != STDCWD_FILENO && dir != STDROOT_FILENO)
              close(&mut thread_ring, dir);

            throw std::system_error(cast<std::errc>(-rc));
          }

          fd = open(&mut thread_ring, dir, os::string(path.data + i, j - i), O_DIRECTORY, 0);
        }

        if (dir != STDCWD_FILENO && dir != STDROOT_FILENO)
          close(&mut thread_ring, dir);

        if (fd < 0)
          throw std::system_error(cast<std::errc>(-fd));

        dir = fd;
      }

      i = j + 1;
    }

    if (dir != STDCWD_FILENO && dir != STDROOT_FILENO)
      close(&mut thread_ring, dir);

    return 0;
  }

  pub fn chstat(i32 fd, os::stat &stat, u64 flags) throws(std::error) -> i32
  {
    using os;

    if (var rc = chstat(&mut thread_ring, fd, &stat, flags); rc < 0)
      throw std::system_error(cast<std::errc>(-rc));

    return 0;
  }

  pub fn chstat(i32 dir, String &path, os::stat &stat, u64 flags) throws(std::error) -> i32
  {
    using os;

    var fd = open(&mut thread_ring, dir, os::string(path.data, path.len), O_WRONLY, 0);

    if (fd < 0)
    {
      if (fd == EPERM || fd == ENOENT || fd == EACCES || fd == EINVAL || fd == EROFS)
        return fd;

      throw std::system_error(cast<std::errc>(-fd));
    }

    if (var rc = chstat(&mut thread_ring, fd, &stat, flags); rc < 0)
    {
      close(&mut thread_ring, fd);

      throw std::system_error(cast<std::errc>(-rc));
    }

    close(&mut thread_ring, fd);

    return 0;
  }

  pub fn chstat(String &path, os::stat &stat, u64 flags) throws(std::error) -> i32
  {
    using os;

    var dir = STDCWD_FILENO;

    if (path.len > 0 && *path.data == cast('/'))
      dir = STDROOT_FILENO;

    if (var rc = chstat(dir, path, stat, flags); rc < 0)
      return rc;

    return 0;
  }

  pub fn chmod(String &path, u32 permissions) throws(std::error) -> i32
  {
    var stat = os::stat();
    stat.mode = permissions;

    if (var rc = chstat(path, stat, os::stats::mode); rc < 0)
      return rc;

    return 0;
  }

  pub fn chown(String &path, std::optional<u32> uid, std::optional<u32> gid) throws(std::error) -> i32
  {
    var mask = 0;
    var stat = os::stat();

    if (uid)
    {
      stat.uid = uid?!;
      mask |= os::stats::uid;
    }

    if (gid)
    {
      stat.gid = gid?!;
      mask |= os::stats::gid;
    }

    if (var rc = chstat(path, stat, mask); rc < 0)
      return rc;

    return 0;
  }

  pub fn rename(String &oldpath, String &newpath) throws(std::error) -> i32
  {
    using os;

    if (var rc = rename(&mut thread_ring, os::string(oldpath.data, oldpath.len), os::string(newpath.data, newpath.len), 0); rc < 0)
    {
      if (rc == EPERM || rc == ENOENT || rc == EACCES || rc == EROFS || rc == EXDEV)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn unlink(String &path) throws(std::error) -> i32
  {
    using os;

    if (var rc = unlink(&mut thread_ring, os::string(path.data, path.len), 0); rc < 0)
    {
      if (rc == EPERM || rc == ENOENT || rc == EACCES || rc == EROFS)
        return rc;

      throw std::system_error(cast<std::errc>(-rc));
    }

    return 0;
  }

  pub fn rm_rf(String &path) throws(std::error) -> i32
  {
    fn rmdir(String &path) throws(std::error) -> i32
    {
      var dirp = dirp();
      if (var rc = opendir(&mut dirp, path); rc < 0)
        return rc;

      while (!dirp.eof)
      {
        switch (dirp.type)
        {
          case directory:
            if (var rc = rmdir(dirp.path); rc < 0)
              return rc;

          else:
            if (var rc = unlink(dirp.path); rc < 0)
              return rc;
        }

        readdir(&mut dirp);
      }

      if (var rc = unlink(path); rc < 0)
        return rc;

      return 0;
    }

    var stat = stat();
    if (var rc = lstat(path, &mut stat); rc < 0)
      return rc;

    switch (stat.type)
    {
      case directory:
        if (var rc = rmdir(path); rc < 0)
          return rc;

      else:
        if (var rc = unlink(path); rc < 0)
          return rc;
    }

    return 0;
  }

  pub struct dirp
  {
    i32 fd;
    usize cursor;
    usize buflen;
    u8[1024] buffer;

    usize pathlen;
    std::string pathname;

    fn head(this &) -> os::dirent *
    {
      return cast(this.buffer.data + this.cursor);
    }

    #[lifetime(depend(this))]
    pub fn path(this &) -> std::string &
    {
      return &this.pathname;
    }

    #[lifetime(depend(this))]
    pub fn name(this &) -> std::string_view
    {
      return std::string_view(this.pathname.begin + this.pathlen, this.pathname.end);
    }

    pub fn type(this &) -> filetype
    {
      switch (this.head.type)
      {
        case block_device:
          return block_device;

        case character_device:
          return character_device;

        case directory:
          return directory;

        case regular:
          return regular;

        case symlink:
          return symlink;

        case socket_dgram:
        case socket_stream:
          return socket;
      }

      return unknown;
    }

    pub fn is_directory(this &) -> bool
    {
      return this.type == filetype::directory;
    }

    pub fn is_file(this &) -> bool
    {
      return this.type == filetype::regular;
    }

    pub fn is_symlink(this &) -> bool
    {
      return this.type == filetype::symlink;
    }

    pub fn stat(this &) throws(std::error) -> stat
    {
      var stat = stat();

      if (var rc = lstat(this.fd, this.name, &mut stat); rc < 0)
        throw std::system_error(cast<std::errc>(-rc));

      return stat;
    }

    pub fn eof(this &) -> bool
    {
      return this.buflen == 0;
    }

    pub dirp()
    {
    }

    pub ~dirp()
    {
      if (fd != 0)
        os::close(&mut thread_ring, fd);
    }
  }

  pub fn fmt(std::OutputStream mut &os, std::fmt_context mut &ctx, dirp &entry) throws(std::error) -> void
  {
    std::fmt_to(&mut os, &mut ctx, entry.name);
  }

  pub fn opendir(dirp mut &dirp, String &path) throws(std::error) -> i32
  {
    using os;

    var fd = open(&mut thread_ring, os::string(path.data, path.len), O_RDONLY | O_DIRECTORY, 0);

    if (fd < 0)
    {
      if (fd == EPERM || fd == ENOENT || fd == EACCES || fd == ENOTDIR || fd == EINVAL)
        return fd;

      throw std::system_error(cast<std::errc>(-fd));
    }

    dirp.fd = fd;
    dirp.pathname = path;

    if (!path.ends_with(cast<u8>('/')))
      dirp.pathname += cast<u8>('/');

    dirp.pathlen = dirp.pathname.len;

    readdir(&mut dirp);

    return 0;
  }

  pub fn readdir(dirp mut &dirp) throws(std::error) -> i32
  {
    using os;

    for (;;)
    {
      if (dirp.cursor < dirp.buflen)
      {
        dirp.cursor += cast(dirp.head.rec_len);
      }

      if (dirp.buflen <= dirp.cursor)
      {
        var cnt = read(&mut thread_ring, dirp.fd, dirp.buffer.data, dirp.buffer.len);

        if (cnt < 0)
          throw std::system_error(cast<std::errc>(-cnt));

        dirp.buflen = cast(cnt);
        dirp.cursor = 0;
      }

      if (dirp.cursor < dirp.buflen)
      {
        var entry = dirp.head;

        if (entry.name == "." || entry.name == "..")
          continue;

        dirp.pathname.replace(dirp.pathlen, ~0, dirp.head.name);
      }

      return 0;
    }
  }

#end
