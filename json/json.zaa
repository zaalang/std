//
// json
//

import std.stdlib : assert;
import std.io : InputReader;
import std.string : String;
import std.range : Range;
import std.vector;
import std.flat_hash_map;
import std.scan;
import std.fmt;
import json.parser;

pub enum errc : u32
{
  internal_error = 1,
  expected_quote,
  expected_comma,
  expected_colon,
  bad_escape,
  invalid_value,
  invalid_utf8,
  unexpected_end_of_line,
  unexpected_end_of_stream,

  pub fn bool(errc code) -> bool
  {
    return cast<u32>(code) != 0;
  }
}

pub union value
{
  pub Null,
  pub Real(f64),
  pub Int64(i64),
  pub UInt64(u64),
  pub Boolean(bool),
  pub String(std::string),
  pub Array(std::vector<value>),
  pub Map(std::flat_hash_map<std::string, value>),

  pub fn bool(this&) -> bool
  {
    return this.kind != cast(0);
  }

  pub fn is_null(this&) -> bool
  {
    return this.kind == typeof(this.kind)::Null;
  }

  pub fn is_real(this&) -> bool
  {
    return this.kind == typeof(this.kind)::Real;
  }

  pub fn is_int64(this&) -> bool
  {
    return this.kind == typeof(this.kind)::Integer;
  }

  pub fn is_uint64(this&) -> bool
  {
    return this.kind == typeof(this.kind)::Integer;
  }

  pub fn is_number(this&) -> bool
  {
    return this.is_real || this.is_int64 || this.is_uint64;
  }

  pub fn is_boolean(this&) -> bool
  {
    return this.kind == typeof(this.kind)::Boolean;
  }

  pub fn is_string(this&) -> bool
  {
    return this.kind == typeof(this.kind)::String;
  }

  pub fn is_array(this&) -> bool
  {
    return this.kind == typeof(this.kind)::Array;
  }

  pub fn is_object(this&) -> bool
  {
    return this.kind == typeof(this.kind)::Map;
  }

  pub fn is_primitive(this&) -> bool
  {
    return !is_array && !is_object;
  }

  pub fn is_structured(this&) -> bool
  {
    return is_array || is_object;
  }

  pub fn as<T>(this&)
  {
    switch (this)
    {
      case Real[real]:
        #if (__is_arithmetic<T>)
          return cast<T>(real);
        #if (requires { T(f64()); })
          return T(real);

      case Int64[integer]:
        #if (__is_arithmetic<T>)
          return cast<T>(integer);
        #if (requires { T(i64()); })
          return T(integer);

      case UInt64[integer]:
        #if (__is_arithmetic<T>)
          return cast<T>(integer);
        #if (requires { T(u64()); })
          return T(integer);

      case Boolean[boolean]:
        #if (requires { T(bool()); })
          return T(boolean);

      case String[string]:
        #if (__is_same<T, std::string&>)
          return T(&string);
        #if (requires { T(std::string()); })
          return T(string);
    }

    std::panic("invalid json access");
  }

  pub fn as_str(this &&)
  {
    switch (this)
    {
      case String[string]:
        return &(&&string);
    }

    std::panic("invalid json access");
  }

  pub fn as_vec(this &&)
  {
    switch (this)
    {
      case Array[array]:
        return &(&&array);
    }

    std::panic("invalid json access");
  }

  pub fn as_map(this &&)
  {
    switch (this)
    {
      case Map[map]:
        return &(&&map);
    }

    std::panic("invalid json access");
  }

  pub fn as_string(this &&)
  {
    return &(&&this).as_str;
  }

  pub fn as_array(this &&)
  {
    return &(&&this).as_vec;
  }

  pub fn as_object(this &&)
  {
    return &(&&this).as_map;
  }

  pub fn []<Key>(this&, Key &key) -> value &
  {
    static const emptyvalue = #value();

    switch (this)
    {
      case Array[array]:
        #if (__is_integral<Key>)
          if (0 <= key && cast<usize>(key) < array.len)
            return &array[cast<usize>(key)];

      case Map[map]:
        #if (requires (Key key) { std::string_view(key); })
          if (var j = map.find(key); j != map.end)
            return &map[j].value;
    }

    return &emptyvalue;
  }

  pub fn ==(value &lhs, null) -> bool
  {
    return lhs.is_null;
  }

  pub fn ==<T>(value &lhs, T rhs) -> bool
    where __is_floating_point<T>
  {
    switch (lhs)
    {
      case Real[lhs]:
        return lhs == cast<f64>(rhs);
    }

    return false;
  }

  pub fn ==<T>(value &lhs, T rhs) -> bool
    where __is_integral<T>
  {
    switch (lhs)
    {
      case Int64[lhs]:
        return lhs == cast<i64>(rhs);

      case UInt64[lhs]:
        return lhs == cast<u64>(rhs);
    }

    return false;
  }

  pub fn ==(value &lhs, bool rhs) -> bool
  {
    switch (lhs)
    {
      case Boolean[lhs]:
        return lhs == rhs;
    }

    return false;
  }

  pub fn ==(value &lhs, String &rhs) -> bool
  {
    switch (lhs)
    {
      case String[lhs]:
        return lhs == rhs;
    }

    return false;
  }

  pub fn emplace_null(this mut &) -> void
  {
    this = Null();
  }

  pub fn emplace_real(this mut &, f64 value = 0.0) -> f64 mut &
  {
    this = Real(value);

    return &this.Real;
  }

  pub fn emplace_int64(this mut &, i64 value = 0) -> i64 mut &
  {
    this = Int64(value);

    return &this.Int64;
  }

  pub fn emplace_uint64(this mut &, u64 value = 0) -> u64 mut &
  {
    this = UInt64(value);

    return &this.UInt64;
  }

  pub fn emplace_boolean(this mut &, bool value = false) -> bool mut &
  {
    this = Boolean(value);

    return &this.Boolean;
  }

  pub fn emplace_string(this mut &, String &&value = "") -> std::string mut &
  {
    this = String(&&value);

    return &this.String;
  }

  pub fn emplace_array(this mut &) -> std::vector<value> mut &
  {
    this = Array();

    return &this.Array;
  }

  pub fn emplace_object(this mut &) -> std::flat_hash_map<std::string, value> mut &
  {
    this = Map();

    return &this.Map;
  }

  pub value(null)
    : Null()
  {
  }

  pub value(f64 real)
    : Real(real)
  {
  }

  pub value<T>(T real)
    where __is_floating_point<T>
    : Real(cast<f64>(real))
  {
  }

  pub value(i64 integer)
    : Int64(integer)
  {
  }

  pub value(#i64 integer)
    : Int64(integer)
  {
  }

  pub value<T>(T integer)
    where __is_integral<T>
    : Int64(cast<i64>(integer))
  {
  }

  pub value(u64 integer)
    : UInt64(integer)
  {
  }

  pub value(bool boolean)
    : Boolean(boolean)
  {
  }

  pub value(String &&string)
    : String(&&string)
  {
  }

  pub value(Range<value> &&array)
    : Array(std::vector<value>::from(&&array))
  {
  }

  pub value(Range<std::key_value_pair<std::string, value>> &&map)
    : Map(std::flat_hash_map<std::string, value>::from(&&map))
  {
  }

  pub fn from(String &str) -> value
  {
    var ch = str.begin;
    var end = str.end;
    var gotdig = false;
    var gotdot = false;

    if (ch != end && (*ch == cast('+') || *ch == cast('-')))
      ++ch;

    for(; ch != end; ++ch)
    {
      if (cast('0') <= *ch && *ch <= cast('9'))
        gotdig = true;

      else if (*ch == cast('.'))
        gotdot = true;

      else
        break;
    }

    if (gotdig && !gotdot)
    {
      var integer = i64();
      if (var result = std::sscan(str, &mut integer); !result.error && result.len == str.len)
        return integer;
    }

    if (gotdig && !gotdot)
    {
      var integer = u64();
      if (var result = std::sscan(str, &mut integer); !result.error && result.len == str.len)
        return integer;
    }

    if (gotdig || gotdot)
    {
      var real = f64();
      if (var result = std::sscan(str, &mut real); !result.error && result.len == str.len)
        return real;
    }

    if (str == "null")
      return null;

    if (str == "true")
      return true;

    if (str == "false")
      return false;

    return str;
  }

  pub value() = default;
  pub value(value&&) = default;
  pub fn =(value mut &, value &&) -> value mut & = default;
  pub ~value() = default;
}

pub fn ==(value &lhs, value &rhs) -> bool
{
  if (lhs.kind == rhs.kind)
  {
    switch (cast<int>(lhs.kind))
    {
      #{
        #for(const k = 1; k != std::meta::fields_of($value).len; ++k)
          -> { case $(k): return lhs.$(k) == rhs.$(k); }
      }
    }
  }

  return lhs.kind == rhs.kind;
}

pub fn <=>(value &lhs, value &rhs) -> int
{
  if (lhs.kind == rhs.kind)
  {
    switch (cast<int>(lhs.kind))
    {
      #{
        #for(const k = 1; k != std::meta::fields_of($value).len; ++k)
          -> { case $(k): return lhs.$(k) <=> rhs.$(k); }
      }
    }
  }

  return lhs.kind <=> rhs.kind;
}

pub fn fmt<T>(std::OutputStream mut &os, std::fmt_context mut &ctx, value &value) throws -> void
{
  switch (value)
  {
    case Null:
      ctx.written += std::print_to(&mut os, "null");

    case Real[real]:
      ctx.written += std::print_to(&mut os, real);

    case Int64[integer]:
      ctx.written += std::print_to(&mut os, integer);

    case UInt64[integer]:
      ctx.written += std::print_to(&mut os, integer);

    case Boolean[boolean]:
      ctx.written += std::print_to(&mut os, boolean);

    case String[string]:
      ctx.written += std::format_to(&mut os, "{:?}", string);

    case Array[array]:
      ctx.written += std::print_to(&mut os, array);

    case Map[map]:
      ctx.written += std::print_to(&mut os, map);

    else:
      ctx.written += std::print_to(&mut os, "undefined");
  }
}

pub fn load_from_str(String &src) -> parse_result
{
  try
  {
    return load_from(&mut std::string_stream(src));
  }
  catch(std::error)
  {
    std::panic();
  }
}

pub fn load_from_file(String &path) throws -> parse_result
{
  return load_from(&mut std::buffered_reader(&mut std::file::open(path)));
}

pub fn load_from(InputReader mut &is) throws -> parse_result
{
  return parse(&mut is);
}
