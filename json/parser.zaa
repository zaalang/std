//
// json parser
//

import json;
import json.scanner;
import std.io : InputReader;
import std.vector;
import std.flat_map;
import std.scan;

using json::errc;
using json::mark;
using json::token;
using json::scanner;
using json::scalar_style;
using json::value;

struct parse_context
{
  token tok;
  scanner scanner;

  #[lifetime(launder(this.tok))]
  fn consume_token(this mut &, var mut &is) throws(std::error) -> void
  {
    this.tok = this.scanner.fetch(&mut is);
  }

  parse_context() = default;
  ~parse_context() = default;
}

pub struct parse_result
{
  pub errc error;
  pub mark mark;
  pub value value;

  pub parse_result() = default;
  pub parse_result(parse_result&) = default;
  pub fn =(parse_result mut &, parse_result&) -> parse_result mut & = default;
  pub ~parse_result() = default;
}

fn parse_object(parse_context mut &ctx, InputReader mut &is, value mut &value) throws(std::error) -> errc
{
  var mut &object = value.emplace_object();

  ctx.consume_token(&mut is);

  while (ctx.tok.type != token::type::r_brace)
  {
    var key = json::value();

    switch (ctx.tok.style)
    {
      case doublequoted:
        key.emplace_string(ctx.tok.value);

      else:
        return expected_quote;
    }

    ctx.consume_token(&mut is);

    switch (ctx.tok.type)
    {
      case colon:
        ctx.consume_token(&mut is);

      else:
        return expected_colon;
    }

    var element = json::value();

    if (var error = parse_value(&mut ctx, &mut is, &mut element); error)
      return error;

    object.insert(&move key.as_str, &move element);

    switch (ctx.tok.type)
    {
      case comma:
        ctx.consume_token(&mut is);

      case r_brace:
        break;

      else:
        return expected_comma;
    }
  }

  ctx.consume_token(&mut is);

  return cast(0);
}

fn parse_array(parse_context mut &ctx, InputReader mut &is, value mut &value) throws(std::error) -> errc
{
  var mut &array = value.emplace_array();

  ctx.consume_token(&mut is);

  while (ctx.tok.type != token::type::r_square)
  {
    var element = json::value();

    if (var error = parse_value(&mut ctx, &mut is, &mut element); error)
      return error;

    array.push_back(&move element);

    switch (ctx.tok.type)
    {
      case comma:
        ctx.consume_token(&mut is);

      case r_square:
        break;

      else:
        return expected_comma;
    }
  }

  ctx.consume_token(&mut is);

  return cast(0);
}

fn parse_scalar(parse_context mut &ctx, InputReader mut &is, value mut &value) throws(std::error) -> errc
{
  switch (ctx.tok.style)
  {
    case plain:
      value = json::value::from(ctx.tok.value);

    else:
      value.emplace_string(ctx.tok.value);
  }

  ctx.consume_token(&mut is);

  return cast(0);
}

fn parse_value(parse_context mut &ctx, InputReader mut &is, value mut &value) throws(std::error) -> errc
{
  switch (ctx.tok.type)
  {
    case l_square:
      return parse_array(&mut ctx, &mut is, &mut value);

    case l_brace:
      return parse_object(&mut ctx, &mut is, &mut value);

    case scalar:
      return parse_scalar(&mut ctx, &mut is, &mut value);

    else:
      switch (ctx.tok.type)
      {
        case bad_escape:
          return bad_escape;

        case unexpected_end_of_line:
          return unexpected_end_of_line;

        case unexpected_end_of_stream:
          return unexpected_end_of_stream;

        else:
          return invalid_value;
      }
  }
}

pub fn parse(InputReader mut &is) throws(std::error) -> parse_result
{
  var result = parse_result();

  var ctx = parse_context();

  ctx.consume_token(&mut is);

  if (var error = parse_value(&mut ctx, &mut is, &mut result.value); error)
  {
    result.error = error;
    result.mark = ctx.tok.loc;
  }

  if (ctx.tok.type != token::type::stream_end)
  {
    result.error = json::errc::invalid_value;
    result.mark = ctx.tok.loc;
  }

  return result;
}
