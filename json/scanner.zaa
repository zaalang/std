//
// json scanner
//

import json;
import std.io : InputReader;
import std.strconv;

pub struct mark
{
  pub int line;
  pub int column;

  pub mark() = default;
  pub mark(mark&) = default;
  pub fn =(mark mut &, mark &&) -> mark mut & = default;
  pub ~mark() = default;
}

pub enum scalar_style
{
  invalid = 0,
  plain,
  singlequoted,
  doublequoted,
}

pub struct token
{
  pub enum type
  {
    invalid = 0,
    stream_end,
    l_square,
    r_square,
    l_brace,
    r_brace,
    colon,
    comma,
    scalar,

    unexpected_end_of_line,
    unexpected_end_of_stream,
    bad_escape,
  }

  pub type type;
  pub std::string value;
  pub scalar_style style;
  pub mark loc;

  pub token() = default;
  pub token(token&&) = default;
  pub fn =(token mut &, token &&) -> token mut & = default;
  pub ~token() = default;
}

fn make_token(token::type type, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.loc = loc;

  return tok;
}

fn make_token(token::type type, std::string value, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.value = &move value;
  tok.loc = loc;

  return tok;
}

fn make_token(token::type type, scalar_style style, std::string value, mark loc) -> token
{
  var tok = token();
  tok.type = type;
  tok.value = &move value;
  tok.style = style;
  tok.loc = loc;

  return tok;
}

pub struct scanner
{
  mark loc;

  fn peek(this mut &, InputReader mut &is) throws(std::error) -> u8
  {
    if (var buffer = is.fetch(); buffer.len != 0)
      return buffer[0];

    return 0;
  }

  fn peek(this mut &, InputReader mut &is, usize index) throws(std::error) -> u8
  {
    if (var buffer = this.prefix(&mut is, index + 1); index < buffer.len)
      return buffer[index];

    return 0;
  }

  fn prefix(this mut &, InputReader mut &is, usize len) throws(std::error) -> std::string_view
  {
    if (is.buffer.len < len)
      is.pack_and_fetch();

    return std::string_view(is.buffer.data, std::min(is.buffer.len, len));
  }

  fn eat(scanner mut &this, InputReader mut &is) -> void
  {
    this.loc.column += 1;

    if (is.buffer[0] == cast('\n'))
    {
      this.loc.line += 1;
      this.loc.column = 0;
    }

    is.discard(1);
  }

  pub scanner()
  {
  }

  pub ~scanner() = default;
}

fn is_z(u8 ch) -> bool
{
  return ch == cast('\0');
}

fn is_alpha(u8 ch) -> bool
{
  return cast('0') <= ch && ch <= cast('9') || cast('a') <= ch && ch <= cast('z') || cast('A') <= ch && ch <= cast('Z') || ch == cast('_') || ch == cast('-');
}

fn is_digit(u8 ch) -> bool
{
  return cast('0') <= ch && ch <= cast('9');
}

fn is_whitespace(u8 ch) -> bool
{
  return ch == cast('\0') || ch == cast(' ') || ch == cast('\t') || ch == cast('\r') || ch == cast('\n');
}

fn is_blank(u8 ch) -> bool
{
  return ch == cast(' ') || ch == cast('\t');
}

fn is_break(u8 ch) -> bool
{
  return ch == cast('\r') || ch == cast('\n');
}

fn is_breakz(u8 ch) -> bool
{
  return ch == cast('\0') || ch == cast('\r') || ch == cast('\n');
}

fn skip_blank(scanner mut &this, InputReader mut &is) throws(std::error) -> void
{
  while (is_blank(this.peek(&mut is)))
    this.eat(&mut is);
}

fn skip_break(scanner mut &this, InputReader mut &is) throws(std::error) -> void
{
  if (is_break(this.peek(&mut is)))
  {
    if (this.prefix(&mut is, 2) == "\r\n")
      this.eat(&mut is);

    this.eat(&mut is);
  }
}

fn scan_to_next_token(scanner mut &this, InputReader mut &is) throws(std::error) -> void
{
  for (;;)
  {
    switch (this.peek(&mut is))
    {
      case ' ':
      case '\t':
        this.eat(&mut is);

      case '\r':
      case '\n':
        skip_break(&mut this, &mut is);

      else:
        break;
    }
  }
}

fn scan_token(scanner mut &this, InputReader mut &is, token::type type) throws(std::error) -> token
{
  var loc = this.loc;

  this.eat(&mut is);

  return make_token(type, loc);
}

fn scan_string_scalar(scanner mut &this, InputReader mut &is, scalar_style style) throws(std::error) -> token
{
  var loc = this.loc;
  var value = std::string();

  this.eat(&mut is);

  for (;;)
  {
    switch (var ch = this.peek(&mut is))
    {
      case '\r':
      case '\n':
        return make_token(token::type::unexpected_end_of_line, this.loc);

      case '\0':
        return make_token(token::type::unexpected_end_of_stream, this.loc);

      case '"':
        break;

      case '\\':
        switch (this.peek(&mut is, 1))
        {
          case 'b': value += cast<u8>('\x08');
          case 't': value += cast<u8>('\t');
          case 'n': value += cast<u8>('\n');
          case 'f': value += cast<u8>('\x0c');
          case 'r': value += cast<u8>('\x0d');
          case '"': value += cast<u8>('"');
          case '/': value += cast<u8>('/');
          case '\'': value += cast<u8>('\'');
          case '\\': value += cast<u8>('\\');

          case 'u':
            var length = 4;
            var buffer = this.prefix(&mut is, length + 2);

            var codepoint = ' ';
            if (std::atoi(buffer.data + 2, buffer.end, &mut codepoint, 16).len != length)
              return make_token(token::type::bad_escape, this.loc);

            for (var i = 0; i < buffer.len - 2; ++i)
              this.eat(&mut is);

            value += codepoint;

          else:
            return make_token(token::type::bad_escape, this.loc);
        }

        this.eat(&mut is);
        this.eat(&mut is);

      else:
        value += ch;
        this.eat(&mut is);
    }
  }

  this.eat(&mut is);

  return make_token(token::type::scalar, style, value, loc);
}

fn scan_plain_scalar(scanner mut &this, InputReader mut &is) throws(std::error) -> token
{
  var loc = this.loc;
  var value = std::string();

  var ch = this.peek(&mut is);

  var numeric = false;
  if (is_digit(ch) || ch == cast('.') || ch == cast('+') || ch == cast('-'))
    numeric = true;

  for (;;)
  {
    switch (ch)
    {
      case ' ':
      case '\t':
      case '\r':
      case '\n':
      case '\0':
        break;

      case ']':
      case '}':
      case ',':
        break;

      case '.':
        if (!numeric)
          break;
    }

    value += ch;
    this.eat(&mut is);
    ch = this.peek(&mut is);
  }

  return make_token(token::type::scalar, scalar_style::plain, value, loc);
}

pub fn fetch(scanner mut &this, InputReader mut &is) throws(std::error) -> token
{
  scan_to_next_token(&mut this, &mut is);

  var ch = this.peek(&mut is);

  if (ch == 0)
    return make_token(token::type::stream_end, this.loc);

  switch (ch)
  {
    case '[':
      return scan_token(&mut this, &mut is, token::type::l_square);

    case '{':
      return scan_token(&mut this, &mut is, token::type::l_brace);

    case ']':
      return scan_token(&mut this, &mut is, token::type::r_square);

    case '}':
      return scan_token(&mut this, &mut is, token::type::r_brace);

    case ':':
      return scan_token(&mut this, &mut is, token::type::colon);

    case ',':
      return scan_token(&mut this, &mut is, token::type::comma);

    case '\"':
      return scan_string_scalar(&mut this, &mut is, scalar_style::doublequoted);
  }

  return scan_plain_scalar(&mut this, &mut is);
}
