//
// json marshal
//

import std.io;
import std.fmt;
import std.range : Range;
import std.string : String;
import std.strconv;
import std.optional;

using std::OutputStream;

pub struct fmt_context
{
  pub usize written;

  fmt_context() = default;
  ~fmt_context() = default;
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, char value) throws -> void
{
  ctx.written += std::print_to(&mut os, cast<u32>(value));
}

fn fmt<T>(OutputStream mut &os, fmt_context mut &ctx, T value) throws -> void
  where __is_builtin<T>
{
  ctx.written += std::print_to(&mut os, value);
}

fn fmt<T>(OutputStream mut &os, fmt_context mut &ctx, T value) throws -> void
    where __is_enum<T>
{
  ctx.written += std::format_to(&mut os, "\"{}\"", value);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, String &value) throws -> void
{
  ctx.written += std::format_to(&mut os, "{:?}", value);
}

fn fmt<T>(OutputStream mut &os, fmt_context mut &ctx, std::optional<T> &optional) throws -> void
{
  switch (optional)
  {
    case Some:
      fmt_to(&mut os, &mut ctx, optional.value);

    case None:
      ctx.written += std::print_to(&mut os, "undefined");
  }
}

fn fmt<T>(std::OutputStream mut &os, fmt_context mut &ctx, Range<T> &range) throws -> void
{
  ctx.written += std::print_to(&mut os, "[");

  for (var k = 0, var &value : range;; ++k)
  {
    if (k != 0)
      ctx.written += std::print_to(&mut os, ",");

    fmt_to(&mut os, &mut ctx, value);
  }

  ctx.written += std::print_to(&mut os, "]");
}

fn fmt<T>(OutputStream mut &os, fmt_context mut &ctx, T &object) throws -> void
  where __is_struct<T>
{
  ctx.written += std::print_to(&mut os, "{");

  #for (const i = 0, const k : std::meta::fields_of($T); true; ++i)
  {
    #if (i != 0)
      ctx.written += std::print_to(&mut os, ",");

    ctx.written += std::print_to(&mut os, '"', std::meta::name_of(k), '"', ":");

    fmt_to(&mut os, &mut ctx, object.#k);
  }

  ctx.written += std::print_to(&mut os, "}");
}

pub fn fmt_to<T>(OutputStream mut &os, fmt_context mut &ctx, T &object) throws -> void
{
  using T;

  fmt(&mut os, &mut ctx, object);
}

pub fn marshal_to(OutputStream mut &os, var &value) throws -> usize
{
  var ctx = fmt_context();
  var os = std::output_stream(&mut os);

  fmt_to(&mut os, &mut ctx, value);

  return ctx.written;
}

#[nodiscard]
pub fn marshal(var &value) -> std::string
{
  var str = std::string();

  try
  {
    marshal_to(&mut str, value);
  }
  catch(std::error e)
  {
  }

  return str;
}
