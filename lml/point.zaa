//
// lml point
//

import std.type;
import lml.vector;
import lml.matrix;
import lml.quaternion;

pub concept Point<T, N>
{
  pub const dim = N;
  pub using coord_t = T;

  requires<point> -> point::point_t
  requires<point> (point pt) { pt.get<0>(); }
}

pub static fn get<i, T, N>(Point<T, N> &pt)
{
  return &&pt.get<i>();
}

pub fn vec<T, N>(Point<T, N> &a, Point<T, N> &b) -> lml::vector<T, N>
{
  var result = [<T>: void; N];

  #for (const i = 0; i < N; ++i)
    new<T>(&result[i])(get<i>(b) - get<i>(a));

  return lml::vector<T, N>(result);
}

pub fn translate<T, N>(Point<T, N> &pt, lml::vector<T, N> &v) -> typeof(pt)
{
  var result = [<T>: void; N];

  #for (const i = 0; i < N; ++i)
    new<T>(&result[i])(get<i>(pt) + get<i>(v));

  return typeof(pt)(result...);
}

pub fn +<T, N>(Point<T, N> &pt, lml::vector<T, N> &v) -> typeof(pt)
{
  return translate(pt, v);
}

pub fn -<T, N>(Point<T, N> &pt, lml::vector<T, N> &v) -> typeof(pt)
{
  return translate(pt, -v);
}

pub fn transform<T>(lml::matrix<T, 2, 2> &m, Point<T, 2> &pt) -> typeof(pt)
{
  var x = m[0,0]*get<0>(pt) + m[0,1]*get<1>(pt);
  var y = m[1,0]*get<0>(pt) + m[1,1]*get<1>(pt);

  return typeof(pt)(x, y);
}

pub fn transform<T>(lml::matrix<T, 3, 3> &m, Point<T, 3> &pt) -> typeof(pt)
{
  var x = m[0,0]*get<0>(pt) + m[0,1]*get<1>(pt) + m[0,2]*get<2>(pt);
  var y = m[1,0]*get<0>(pt) + m[1,1]*get<1>(pt) + m[1,2]*get<2>(pt);
  var z = m[2,0]*get<0>(pt) + m[2,1]*get<1>(pt) + m[2,2]*get<2>(pt);

  return typeof(pt)(x, y, z);
}

pub fn transform<T>(lml::matrix<T, 4, 4> &m, Point<T, 4> &pt) -> typeof(pt)
{
  var x = m[0,0]*get<0>(pt) + m[0,1]*get<1>(pt) + m[0,2]*get<2>(pt) + m[0,3]*get<3>(pt);
  var y = m[1,0]*get<0>(pt) + m[1,1]*get<1>(pt) + m[1,2]*get<2>(pt) + m[1,3]*get<3>(pt);
  var z = m[2,0]*get<0>(pt) + m[2,1]*get<1>(pt) + m[2,2]*get<2>(pt) + m[2,3]*get<3>(pt);
  var w = m[3,0]*get<0>(pt) + m[3,1]*get<1>(pt) + m[3,2]*get<2>(pt) + m[3,3]*get<3>(pt);

  return typeof(pt)(x, y, z, w);
}

pub fn transform<T>(lml::matrix<T, 3, 3> &m, Point<T, 2> &pt, T w = T(1.0)) -> typeof(pt)
{
  var x = m[0,0]*get<0>(pt) + m[0,1]*get<1>(pt) + m[0,2]*w;
  var y = m[1,0]*get<0>(pt) + m[1,1]*get<1>(pt) + m[1,2]*w;

  return typeof(pt)(x, y);
}

pub fn transform<T>(lml::matrix<T, 4, 4> &m, Point<T, 3> &pt, T w = T(1.0)) -> typeof(pt)
{
  var x = m[0,0]*get<0>(pt) + m[0,1]*get<1>(pt) + m[0,2]*get<2>(pt) + m[0,3]*w;
  var y = m[1,0]*get<0>(pt) + m[1,1]*get<1>(pt) + m[1,2]*get<2>(pt) + m[1,3]*w;
  var z = m[2,0]*get<0>(pt) + m[2,1]*get<1>(pt) + m[2,2]*get<2>(pt) + m[2,3]*w;

  return typeof(pt)(x, y, z);
}

pub fn *<T>(lml::matrix<T, 2, 2> &m, Point<T, 2> &pt) -> typeof(pt)
{
  return transform(m, pt);
}

pub fn *<T>(lml::matrix<T, 3, 3> &m, Point<T, 3> &pt) -> typeof(pt)
{
  return transform(m, pt);
}

pub fn *<T>(lml::matrix<T, 4, 4> &m, Point<T, 4> &pt) -> typeof(pt)
{
  return transform(m, pt);
}

pub fn transform<T, V>(lml::quaternion<T, V> &q, Point<T, 3> &pt) -> typeof(pt)
{
  var xyz = (q * lml::quaternion<T, V>(T(0.0), get<0>(pt), get<1>(pt), get<2>(pt)) * lml::conjugate(q));

  return typeof(pt)(xyz.x, xyz.y, xyz.z);
}

pub fn *<T, V>(lml::quaternion<T, V> &q, Point<T, 3> &pt) -> typeof(pt)
{
  return transform(q, pt);
}
