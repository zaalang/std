//
// lml geometry
//

import std.math;
import std.optional;
import lml.point : Point;
import lml.vector : Vector;
import lml.matrix : Matrix;

/// distance between two points squared
pub const fn distsqr<T, N>(Point<T, N> &a, Point<T, N> &b) -> T
{
  return normsqr(vec(a, b));
}

/// distance between two points
pub const fn dist<T, N>(Point<T, N> &a, Point<T, N> &b) -> T
{
  return norm(vec(a, b));
}

/// area of triangle
pub const fn area<T>(Point<T, 2> &a, Point<T, 2> &b, Point<T, 2> &c) -> T
{
  using T;
  using std::abs;

  return abs(perp(vec(a, b), vec(a, c))) * T(0.5);
}

pub const fn area<T>(Point<T, 3> &a, Point<T, 3> &b, Point<T, 3> &c) -> T
{
  using T;
  using std::abs;

  return norm(cross(vec(a, b), vec(a, c))) * T(0.5);
}

/// coincident points
pub const fn coincident<T, N>(Point<T, N> &a, Point<T, N> &b) -> bool
{
  using T;
  using std::fcmp;

  return fcmp(distsqr(a, b), 0.0);
}

/// collinear points
pub const fn collinear<T, N>(Point<T, N> &a, Point<T, N> &b, Point<T, N> &c) -> bool
{
  using T;
  using std::fcmp;

  return fcmp(area(a, b, c), 0.0);
}

/// orientation of xy triangle, clockwise < 0, anticlockwise > 0
pub const fn orientation<T>(Point<T, 2> &a, Point<T, 2> &b, Point<T, 2> &c) -> T
{
  using T;
  using std::fcmp;

  var result = perp(vec(a, b), vec(a, c));

  return fcmp(result, 0.0) ? T(0.0) : result;
}

/// centroid of xy triangle
pub const fn centroid<T>(Point<T, 2> &a, Point<T, 2> &b, Point<T, 2> &c) -> typeof(a)
{
  return typeof(a)((get<0>(a) + get<0>(b) + get<0>(c))/T(3.0), (get<1>(a) + get<1>(b) + get<1>(c))/T(3.0));
}

/// quadrant index for point around the origin
pub const fn quadrant<T, N>(Point<T, N> &pt) -> int
{
  var result = 0;

  #for(const i = 0; i < N; ++i)
    result += cast(get<i>(pt) < 0.0) * (1 << i);

  return result;
}

/// normal
pub const fn normal<T>(Point<T, 2> &a, Point<T, 2> &b) -> lml::vector<T, 2>
{
  return normalise(perp(vec(b, a)));
}

pub const fn normal<T>(Point<T, 3> &a, Point<T, 3> &b, Point<T, 3> &c) -> lml::vector<T, 3>
{
  return normalise(cross(vec(a, b), vec(a, c)));
}

/// slope
pub const fn slope<T>(Point<T, 2> &a, Point<T, 2> &b) -> T
{
  return (get<1>(b) - get<1>(a)) / (get<0>(b) - get<0>(a));
}

/// azimuth
pub const fn azimuth<T, N>(Point<T, N> &a, Point<T, N> &b) -> T
{
  return theta(vec(a, b));
}

/// rotate
pub const fn rotate<T>(Point<T, 2> &pt, T yaw) -> typeof(pt)
{
  using T;
  using std::sin;
  using std::cos;

  var x = cos(yaw)*get<0>(pt) - sin(yaw)*get<1>(pt);
  var y = sin(yaw)*get<0>(pt) + cos(yaw)*get<1>(pt);

  return typeof(pt)(x, y);
}

pub const fn rotatex<T>(Point<T, 3> &pt, T roll) -> typeof(pt)
{
  using T;
  using std::sin;
  using std::cos;

  var x = get<0>(pt);
  var y = cos(roll)*get<1>(pt) - sin(roll)*get<2>(pt);
  var z = sin(roll)*get<1>(pt) + cos(roll)*get<2>(pt);

  return typeof(pt)(x, y, z);
}

pub const fn rotatey<T>(Point<T, 3> &pt, T pitch) -> typeof(pt)
{
  using T;
  using std::sin;
  using std::cos;

  var x = cos(pitch)*get<0>(pt) + sin(pitch)*get<2>(pt);
  var y = get<1>(pt);
  var z = -sin(pitch)*get<0>(pt) + cos(pitch)*get<2>(pt);

  return typeof(pt)(x, y, z);
}

pub const fn rotatez<T>(Point<T, 3> &pt, T yaw) -> typeof(pt)
{
  using T;
  using std::sin;
  using std::cos;

  var x = cos(yaw)*get<0>(pt) - sin(yaw)*get<1>(pt);
  var y = sin(yaw)*get<0>(pt) + cos(yaw)*get<1>(pt);
  var z = get<2>(pt);

  return typeof(pt)(x, y, z);
}

/// nearest point on line
pub const fn nearest_on_line<T, N>(Point<T, N> &a, Point<T, N> &b, Point<T, N> &pt) -> typeof(a)
{
  var u = vec(a, b);

  return a + dot(vec(a, pt), u)/dot(u, u) * u;
}

/// nearest point on segment
pub const fn nearest_on_segment<T, N>(Point<T, N> &a, Point<T, N> &b, Point<T, N> &pt) -> typeof(a)
{
  var u = vec(a, b);

  var dot_ta = dot(vec(a, pt), u);

  if (dot_ta <= 0.0)
    return a;

  var dot_tb = dot(vec(pt, b), u);

  if (dot_tb <= 0.0)
    return b;

  return a + dot_ta/(dot_ta + dot_tb) * u;
}

/// intersection of two lines

pub struct lineintersect<U, T, N> : pub std::optional<U>
{
  pub T u;
  pub T s;
  pub T t;

  pub fn segseg(this&) -> bool { return this.u != 0.0 && this.s >= 0.0 && this.s <= 1.0 && this.t >= 0.0 && this.t <= 1.0; }
  pub fn segray(this&) -> bool { return this.u != 0.0 && this.s >= 0.0 && this.s <= 1.0 && this.t >= 0.0; }
  pub fn rayseg(this&) -> bool { return this.u != 0.0 && this.s >= 0.0 && this.t >= 0.0 && this.t <= 1.0; }
  pub fn rayray(this&) -> bool { return this.u != 0.0 && this.s >= 0.0 && this.t >= 0.0; }
  pub fn overlap(this&) -> bool { return this.region.is_some(); }

  pub std::optional<(U, U)> region;

  lineintersect() = default;
  pub lineintersect(lineintersect&) = default;
  pub ~slabintersect() = default;
}

pub fn intersection_robust<T, N>(Point<T, N> &a1, Point<T, N> &a2, Point<T, N> &b1, Point<T, N> &b2)
{
  using T;
  using std;

  var result = lineintersect<typeof(a1), T, N>();

  var u = vec(a1, a2);
  var v = vec(b1, b2);
  var w = vec(b1, a1);

  var sidea1 = orientation(a1, a2, b1);
  var sidea2 = orientation(a1, a2, b2);
  var sideb1 = orientation(b1, b2, a1);
  var sideb2 = orientation(b1, b2, a2);

  if ((sidea1 == 0.0 && sidea2 == 0.0) || (sideb1 == 0.0 && sideb2 == 0.0))
  {
    result.u = 0.0;

    var k = 0;
    var region = [<typeof(a1)*>: null; 5];

    if (dot(v, v) != 0.0)
    {
      if (dot(vec(b1, a1), v) >= 0.0 && dot(vec(a1, b2), v) > 0.0)
        region[k++] = &a1;

      if (dot(vec(b1, a2), v) > 0.0 && dot(vec(a2, b2), v) >= 0.0)
        region[k++] = &a2;
    }

    if (dot(u, u) != 0.0)
    {
      if (dot(vec(a1, b1), u) > 0.0 && dot(vec(b1, a2), u) >= 0.0)
        region[k++] = &b1;

      if (dot(vec(a1, b2), u) >= 0.0 && dot(vec(b2, a2), u) > 0.0)
        region[k++] = &b2;
    }

    if (dot(u, u) == 0.0 && dot(v, v) == 0.0 && dot(w, w) == 0.0)
    {
      region[k++] = &a1;
      region[k++] = &b1;
    }

    if (k != 0)
    {
      result.region = (*region[0], *region[k-1]);
    }
  }
  else
  {
    result.u = perp(u, v);

    if (result.u != 0.0)
    {
      result.s = perp(v, w) / result.u;
      result.t = perp(u, w) / result.u;

      if ((sidea1 * sidea2) <= 0.0 && (sideb1 * sideb2) <= 0.0)
      {
        result.s = clamp(result.s, 0.0, 1.0);
        result.t = clamp(result.t, 0.0, 1.0);

        if (sideb1 == 0.0)
          result.s = 0.0;

        if (sideb2 == 0.0)
          result.s = 1.0;

        if (sidea1 == 0.0)
          result.t = 0.0;

        if (sidea2 == 0.0)
          result.t = 1.0;
      }

      result.emplace((abs(result.s) < abs(result.t)) ? a1 + result.s * u : b1 + result.t * v);
    }
  }

  return result;
}

pub fn intersection<T, N>(Point<T, N> &a1, Point<T, N> &a2, Point<T, N> &b1, Point<T, N> &b2)
{
  using T;
  using std;

  var result = lineintersect<typeof(a1), T, N>();

  var u = vec(a1, a2);
  var v = vec(b1, b2);
  var w = vec(b1, a1);

  result.u = perp(u, v);

  if (result.u != 0.0)
  {
    result.s = perp(v, w) / result.u;
    result.t = perp(u, w) / result.u;

    result.emplace((abs(result.s) < abs(result.t)) ? a1 + result.s * u : b1 + result.t * v);
  }

  return result;
}

/// intersection of ray and triangle (mollerâ€“trumbore)
pub fn intersection<U, T>(Point<T, 3> &origin, Vector<U, T, 3> &direction, Point<T, 3> &a, Point<T, 3> &b, Point<T, 3> &c)
{
  using T;
  using std;

  var result = std::optional<typeof(origin)>();

  var ab = vec(a, b);
  var ac = vec(a, c);

  var h = cross(direction, ac);
  var d = dot(ab, h);

  if (d != 0.0)
  {
    var f = 1.0 / d;
    var s = vec(a, origin);
    var u = dot(s, h) * f;

    if (u >= 0.0 && u <= 1.0)
    {
      var q = cross(s, ab);
      var v = dot(direction, q) * f;

      if (v >= 0.0 && u + v <= 1.0)
      {
        var t = dot(ac, q) * f;

        if (t >= 0.0)
        {
          result.emplace(origin + t * direction);
        }
      }
    }
  }

  return result;
}
