//
// std pair
//

import std.memory;
import std.stdlib : assert;
import std.fmt;

pub struct key_value_pair<K, T, Allocator = std::allocator>
{
  pub K const key;
  pub T value;

  pub key_value_pair<Key, Args>(Key &&key, Args && ...args, Allocator &allocator = Allocator())
    match (Key key, Args args) { K(key, allocator?: std::declval<Allocator>()); T(args..., allocator?: std::declval<Allocator>()); }
    : key(&&key, allocator?: allocator), value(&&args..., allocator?: allocator)
  {
  }

  pub fn ==(key_value_pair &lhs, key_value_pair &rhs) -> bool = default;
  pub fn <=>(key_value_pair &lhs, key_value_pair &rhs) -> int = default;

  pub key_value_pair(key_value_pair &&, Allocator &allocator = Allocator()) = default;
  pub ~key_value_pair() = default;
}

pub fn fmt<K, V>(std::OutputStream mut &os, std::fmt_context mut &ctx, key_value_pair<K, V> &range) throws -> void
{
  std::print_to(os, range.key);
  std::print_to(os, " => ");
  std::fmt_to(os, ctx, range.value);
}
