//
// std io
//

import std.stdlib : assert;
import std.memory : memcpy;
import std.string : String;
import std.span : Span;
import std.math;
import std.vector;
import std.error;

pub concept InputStream
{
  requires<T> (T is, u8 mut *buf, usize len) {
    try
    {
      len += is.read(buf, len);
    }
    catch(std::error e)
    {
    }
  }
}

pub concept OutputStream
{
  requires<T> (T os, u8 *buf, usize len) {
    try
    {
      len += os.write(buf, len);
    }
    catch(std::error e)
    {
    }
  }
}

pub fn OutputStream<N>(u8[N] mut &array)
{
  return std::mutable_span(array.data, N);
}

pub concept InputReader
{
  requires<T> __is_match<InputStream, T>
  requires<T> (T is) { is.buffer; }
  requires<T> (T is) { try { is.fetch(); } catch(std::error e) { } }
  requires<T> (T is) { try { is.pack_and_fetch(); } catch(std::error e) { } }
  requires<T> (T is, usize len) { is.discard(len); }
}

pub struct input_stream
{
  void mut &_stream;
  usize fn(void mut &, u8 mut *, usize) throws(std::error) *_read;

  pub fn read(this mut &, u8 mut *data, usize len) throws -> usize
  {
    return this._read(&mut this._stream, data, len);
  }

  pub input_stream<T>(T mut &is)
    : _stream(&is)
  {
    assert(__is_match<InputStream, T>);

    _read = fn(void mut &stream, u8 mut *data, usize len) throws -> usize {
      return cast<T mut &>(stream).read(data, len);
    };
  }

  pub ~input_stream() = default;
}

pub struct output_stream
{
  void mut &_stream;
  usize fn(void mut &, u8 *, usize) throws(std::error) *_write;

  pub fn write(this mut &, u8 *data, usize len) throws -> usize
  {
    return this._write(&mut this._stream, data, len);
  }

  pub output_stream<T>(T mut &os)
    : _stream(&os)
  {
    assert(__is_match<OutputStream, T>);

    _write = fn(void mut &stream, u8 *data, usize len) throws -> usize {
      return cast<T mut &>(stream).write(data, len);
    };
  }

  pub ~output_stream() = default;
}

pub struct buffered_reader<T, Allocator = std::allocator, N = 0>
{
  T mut &reader;

  pub buffered_reader(T mut &reader, Allocator &allocator = Allocator())
    : reader(&reader),
      _buffer(allocator)
  {
    assert(__is_match<InputStream, T>);

    _head = 0;
    _tail = 0;
    _buffer.resize(N == 0 ? 8192 : N);
  }

  pub ~buffered_reader() = default;

  pub fn capacity(this &) -> usize
  {
    return this._buffer.capacity;
  }

  pub fn buffer(this &) -> std::span<u8>
  {
    return std::span<u8>(this._buffer.data + this._head, this._buffer.data + this._tail);
  }

  pub fn fetch(this mut &) throws -> std::span<u8>
  {
    if (this._head == this._tail)
    {
      this._head = 0;
      this._tail = this.reader.read(this._buffer.data, this._buffer.len);
    }

    return this.buffer;
  }

  pub fn pack_and_fetch(this mut &) throws -> std::span<u8>
  {
    if (this._head != 0)
    {
      std::memmove(this._buffer.data, this._buffer.data + this._head, this._tail - this._head);
      this._tail -= this._head;
      this._head = 0;
    }

    this._tail += this.reader.read(this._buffer.data + this._tail, this._buffer.len - this._tail);

    return this.buffer;
  }

  pub fn discard(this mut &, usize len) -> void
  {
    assert(len <= this._tail - this._head);

    this._head += len;
  }

  pub fn read(this mut &, u8 mut *data, usize len) throws -> usize
  {
    var ch = data;

    if (this._head != this._tail)
    {
      var size = std::min(this._tail - this._head, len);

      memcpy(ch, this._buffer.data + this._head, size);

      ch += size;
      this._head += size;
    }

    if (var remaining = len - (ch - data); remaining != 0)
    {
      if (remaining < this._buffer.len)
      {
        fetch(&mut this);

        var size = std::min(this._tail - this._head, remaining);

        memcpy(ch, this._buffer.data + this._head, size);

        ch += size;
        this._head += size;
      }
      else
      {
        ch += this.reader.read(ch, remaining);
      }
    }

    return ch - data;
  }

  pub struct line_iterator
  {
    pub line_iterator(line_iterator&) = default;
    pub ~line_iterator() = default;

    pub fn ++(line_iterator mut &this) throws -> line_iterator mut &
    {
      this.reader.discard(this.n);

      if (var buffer = this.reader.fetch(); buffer.len != 0)
      {
        this.n = std::memchr(buffer.data, cast('\n'), buffer.len);

        if (this.n == buffer.len)
        {
          buffer = this.reader.pack_and_fetch();
          this.n += std::memchr(buffer.data + this.n, cast('\n'), buffer.len - this.n);

          if (this.n == this.reader.capacity)
            throw std::system_error(std::errc::line_too_long);
        }

        this.m = this.n;

        if (this.n != buffer.len)
        {
          if (this.m != 0 && buffer[this.m - 1] == cast('\r'))
            this.m -= 1;

          this.n += 1;
        }
      }
      else
      {
        this.n = this.m = 0;
      }

      return &this;
    }

    pub fn ==(line_iterator &lhs, end_iterator rhs) -> bool
    {
      return lhs.n == 0;
    }

    line_iterator(buffered_reader mut &reader)
      : reader(&reader)
    {
    }

    usize n, usize m;
    buffered_reader mut &reader;
  }

  struct end_iterator
  {
    end_iterator() = default;
    end_iterator(end_iterator&) = default;
    fn =(end_iterator mut &this, end_iterator &that) -> end_iterator mut & = default;
    ~end_iterator() = default;
  }

  pub fn [](this&, line_iterator &iter)
  {
    return std::string_view(this.buffer.data, iter.m);
  }

  pub fn lines(this mut &) throws
  {
    return std::range_view(this, ++line_iterator(&mut this), end_iterator());
  }

  usize _head;
  usize _tail;
  std::vector<u8, Allocator, N> _buffer;
}

pub fn skip_line(InputReader mut &reader) throws -> usize
{
  var count = 0;

  for(var buffer = reader.fetch(); buffer.len != 0; buffer = reader.fetch())
  {
    var n = std::memchr(buffer.data, cast('\n'), buffer.len);

    if (n != buffer.len)
    {
      reader.discard(n + 1);
      count += n + 1;

      break;
    }

    reader.discard(n);
    count += n;
  }

  return count;
}

pub fn read_line(InputReader mut &reader, std::string mut &buf) throws -> usize
{
  var count = 0;

  for(var buffer = reader.fetch(); buffer.len != 0; buffer = reader.fetch())
  {
    var n = std::memchr(buffer.data, cast('\n'), buffer.len);

    if (n != buffer.len)
    {
      buf.write(buffer.data, n + 1);
      reader.discard(n + 1);
      count += n + 1;

      break;
    }

    buf.write(buffer.data, n);
    reader.discard(n);
    count += n;
  }

  return count;
}

//pub struct buffered_writer<T, Allocator = std::allocator, N = 0>
//pub struct line_writer<T, Allocator = std::allocator, N = 0>
