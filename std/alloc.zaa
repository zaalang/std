//
// std alloc
//

import std.stdlib;
import std.bits.malloc as heap;

pub struct mem_result
{
  pub u32 errno;
  pub usize size;
  pub void mut *addr;

  pub mem_result() = default;
  pub mem_result(mem_result&) = default;
  pub ~mem_result() = default;
}

pub struct allocator
{
  pub allocator() = default;
  pub allocator(allocator&) = default;
  pub fn =(allocator mut &, allocator&) -> allocator mut & = default;
  pub ~allocator() = default;

  pub fn allocate(this mut &, usize size, usize alignment) -> void mut *
  {
    var alloc = heap::allocate(size, alignment);

    if (!alloc.addr)
      std::panic("memory allocation failure");

    return alloc.addr;
  }

  pub fn allocate(this mut &, usize mut &size, usize alignment) -> void mut *
  {
    var alloc = heap::allocate(size, alignment);

    if (!alloc.addr)
      std::panic("memory allocation failure");

    size = alloc.size;

    return alloc.addr;
  }

  pub fn free(this mut &, void *addr, usize size) -> void
  {
    heap::free(addr);
  }

  pub fn ==(this &, allocator &) -> bool
  {
    return true;
  }

  pub fn new<T, Args>(Args && ...args) -> T mut *
    match (Args args) { T(&&args...); }
  {
    return new<T>(allocator().allocate(sizeof<T>, alignof<T>))(&&args...);
  }

  pub fn delete<T>(T mut *ptr) -> void
  {
    T::~T(&mut *ptr);
    allocator().free(ptr, sizeof<T>);
  }
}
