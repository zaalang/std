//
// std span
//

import std.stdlib : assert;
import std.range: Range;

pub concept Span<U>
{
  requires<T> (T x) { x.len; };
  requires<T> (T x) { x.data; };
  requires<T> (T x) -> U { return *x.data; };
  requires<T> (T x) { x.begin; };
  requires<T> (T x) { x.end; };
}

pub struct span<T>
{
  pub usize len;
  pub T *data;

  pub span(T *data, usize len)
    : len(len), data(data)
  {
  }

  pub span(T *beg, T *end)
    : len(end - beg), data(beg)
  {
  }

  pub fn empty(this &) -> bool
  {
    return this.len == 0;
  }

  pub fn begin(this&) -> T*
  { 
    return this.data;
  }
  
  pub fn end(this&) -> T*
  { 
    return this.data + this.len;
  }
  
  pub fn [](this &, usize index) -> T&
  {
    assert(index < this.len);

    return &*(this.data + index);
  }

  pub fn [](this &, (usize, usize) range) -> span
  {
    assert(range.0 <= range.1 && range.0 < this.len && range.1 <= this.len);

    return span(this.data + range.0, this.data + range.1);
  }

  pub fn [](this &, (usize, usize, void) range) -> span
  {
    assert(range.0 <= range.1 && range.0 < this.len && range.1 + 1 <= this.len);

    return span(this.data + range.0, this.data + range.1 + 1);
  }

  pub fn =(this mut &, mutable_span<T> &that) -> span mut &
  {
    this.len = that.len;
    this.data = that.data;
    return &this;
  }

  pub span() = default;
  pub span(span &that) = default;
  pub fn =(this mut &, span &that) -> span mut & = default;
  pub ~span() = default;
}

pub struct mutable_span<T>
{
  pub usize len;
  pub T mut *data;

  pub mutable_span(T mut *data, usize len)
    : len(len), data(data)
  {
  }

  pub mutable_span(T mut *beg, T mut *end)
    : len(end - beg), data(beg)
  {
  }

  pub fn empty(this &) -> bool
  {
    return this.len == 0;
  }

  pub fn begin(this &&)
  {
    return this.data;
  }

  pub fn end(this &&)
  {
    return this.data + this.len;
  }

  pub fn [](this &&, usize index)
  {
    assert(index < this.len);

    return &*(this.data + index);
  }

  pub fn [](this &, (usize, usize) range) -> span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 <= this.len);

    return span(this.data + range.0, this.data + range.1);
  }

  pub fn [](this &, (usize, usize, void) range) -> span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 + 1 <= this.len);

    return span(this.data + range.0, this.data + range.1 + 1);
  }

  pub fn [](this mut &, (usize, usize) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 <= this.len);

    return mutable_span(this.data + range.0, this.data + range.1);
  }

  pub fn [](this mut &, (usize, usize, void) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 + 1 <= this.len);

    return mutable_span(this.data + range.0, this.data + range.1 + 1);
  }

  pub mutable_span() = default;
  pub mutable_span(mutable_span &that) = default;
  pub fn =(this mut &, mutable_span &that) -> mutable_span mut & = default;
  pub ~mutable_span() = default;
}

pub fn Span<T = u8>(typeof("") &str) -> span<T>
  where __is_same<T, u8>
{
  return span<u8>(str.data, str.len);
}
