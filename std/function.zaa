//
// std.function
//

import std.stdlib;

pub struct delegate<R(V), Throws = void, N = 24>
{
  Fx *_fx;
  u64[(N+7)/8] _storage;

  vtable Fx
  {
    fn invoke(void *, V mut &) throws(Throws) -> R;
    fn exchange(void mut *this, void mut *other) -> void;
    fn destroy(void mut *) -> void;
  }

  struct Holder<Y>
  {
    Y callable;

    fn fx(this &) -> Fx *
    {
      return &Fx();
    }

    fn invoke(void *this, V mut &v) throws(Throws) -> R
    {
      return cast<Holder<Y> mut *>(this).callable(&&v...);
    }

    fn exchange(void mut *this, void mut *other) -> void
    {
      new<Holder<Y>>(this)(&move *cast<Holder<Y> mut *>(other));
    }

    fn destroy(void mut *this) -> void
    {
      Holder::~Holder(&mut *cast<Holder<Y> mut *>(this));
    }

    Holder(Y &&fx)
      : callable(&&fx)
    {
    }

    Holder(Holder &&) = default;
    ~Holder() = default;
  }

  pub delegate() = default;
  pub delegate(#delegate&) = default;

  #[lifetime(depends(*fx))]
  pub delegate<Y>(Y &&fx)
    where requires (Y fx, V v) -> R { try { return fx(&&v...); } catch(Throws) {} }
  {
    std::assert(sizeof<Holder<Y>> <= sizeof(_storage), "delegate too large for storage");

    _fx = new<Holder<Y>>(cast<void mut *>(_storage.data))(&&fx).fx;
  }

  pub fn bool(this &) -> bool
  {
    return this._fx != null;
  }

  pub fn ==(this &, null) -> bool
  {
    return this._fx == null;
  }

  pub fn ()(this mut &, V ...v) throws(Throws) -> R
  {
    return this._fx.invoke(this._storage.data, v);
  }

  pub fn =(this mut &, null) -> delegate mut &
  {
    this = delegate();

    return &this;
  }

  #[lifetime(launder(this), repose(fx, this), assign(this, depend(*fx)), depends(this))]
  pub fn =<Y>(this mut &, Y &&fx) -> delegate mut &
    where requires (Y fx, V v) -> R { try { return fx(&&v...); } catch(Throws) {} }
  {
    this = delegate(&&fx);

    return &this;
  }

  #[lifetime(depend(*other))]
  pub delegate(delegate &&other)
    where __is_rvalue<typeof(other)>
  {
    this._fx = other._fx;

    if (this._fx)
      this._fx.exchange(this._storage.data, other._storage.data);
  }

  #[lifetime(launder(this), repose(other, this), assign(this, depend(*other)), depend(this))]
  pub fn =(delegate mut &this, delegate &&other) -> delegate mut &
    where __is_rvalue<typeof(other)>
  {
    if (&this != &other)
    {
      if (this._fx)
        this._fx.destroy(this._storage.data);

      this._fx = other._fx;

      if (this._fx)
        this._fx.exchange(this._storage.data, other._storage.data);
    }

    return &this;
  }

  pub ~delegate()
  {
    if (this._fx)
      this._fx.destroy(this._storage.data);
  }
}
