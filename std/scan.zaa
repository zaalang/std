//
// std scan
//

import std.io;
import std.string;
import std.strconv;
import std.memory;
import std.math;
import std.type;

using std::String;
using std::InputStream;

pub struct scan_result
{
  pub usize len;
  pub usize count;
  pub std::errc error;

  pub const fn bool(this &) -> bool
  {
    return !this.error;
  }

  pub scan_result() = default;
  pub scan_result(scan_result&) = default;
  pub fn =(scan_result mut &, scan_result&) -> scan_result mut & = default;
  pub ~scan_result() = default;
}

pub struct scan_context
{
  pub u8 type;
  pub usize cursor;
  pub std::errc error;

  scan_context() = default;
  ~scan_context() = default;
}

fn scan(std::string_view is, scan_context mut &ctx, bool mut &value) -> void
{
  var str = std::atob(is.data, is.end, &mut value);

  ctx.error = str.error;
  ctx.cursor += str.len;
}

fn scan(std::string_view is, scan_context mut &ctx, char mut &value) -> void
{
  switch (ctx.type)
  {
    case 'd':
    case 'b':
    case 'B':
    case 'o':
    case 'O':
    case 'x':
    case 'X':
      scan_int(is, &mut ctx, &mut value);

    else:
      var str = std::atoc(is.data, is.end, &mut value);

      ctx.error = str.error;
      ctx.cursor += str.len;
  }
}

fn scan_int<T>(std::string_view is, scan_context mut &ctx, T mut &value) -> void
{
  var base = 10;

  switch (ctx.type)
  {
    case 'b':
    case 'B':
      base = 2;

    case 'o':
      base = 8;

    case 'x':
    case 'X':
      base = 16;
  }

  if (is.len != 0 && is[0] == cast('+'))
  {
    ctx.cursor += 1;
    is.drop_front!(1);
  }

  if (is.len > 1 && is[0] == cast('0'))
  {
    switch (is[1])
    {
      case 'b':
      case 'B':
        if (ctx.type == 0 || base == 2)
        {
          base = 2;
          ctx.cursor += 2;
          is.drop_front!(2);
        }

      case 'o':
        if (ctx.type == 0 || base == 8)
        {
          base = 8;
          ctx.cursor += 2;
          is.drop_front!(2);
        }

      case 'x':
      case 'X':
        if (ctx.type == 0 || base == 16)
        {
          base = 16;
          ctx.cursor += 2;
          is.drop_front!(2);
        }
    }
  }

  var str = std::atoi(is.data, is.end, &mut value, base);

  ctx.error = str.error;
  ctx.cursor += str.len;
}

fn scan(std::string_view is, scan_context mut &ctx, u8 mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, u16 mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, u32 mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, u64 mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, usize mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, i8 mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, i16 mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, i32 mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, i64 mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, isize mut &value) -> void
{
  scan_int(is, &mut ctx, &mut value);
}

fn scan_flt<T>(std::string_view is, scan_context mut &ctx, T mut &value) -> void
{
  if (is.len != 0 && is[0] == cast('+'))
  {
    ctx.cursor += 1;
    is.drop_front!(1);
  }

  var str = std::atof(is.data, is.end, &mut value);

  ctx.error = str.error;
  ctx.cursor += str.len;
}

fn scan(std::string_view is, scan_context mut &ctx, f32 mut &value) -> void
{
  scan_flt(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, f64 mut &value) -> void
{
  scan_flt(is, &mut ctx, &mut value);
}

fn scan(std::string_view is, scan_context mut &ctx, typeof(0) mut &literal) -> void
{
  var tmp = int(0);
  scan(is, &mut ctx, &mut tmp);
  literal = cast(tmp);
}

fn scan(std::string_view is, scan_context mut &ctx, typeof(0.0) mut &literal) -> void
{
  var tmp = float(0.0);
  scan(is, &mut ctx, &mut tmp);
  literal = cast(tmp);
}

fn scan<T>(std::string_view is, scan_context mut &ctx, T mut &value) -> void
  where __is_enum<T>
{
  var found = false;

  #for (const k : std::meta::enumerators_of($T))
  {
    if (is == std::meta::name_of(k))
    {
      value = T::#k();

      found = true;
    }
  }

  if (!found)
    ctx.error = std::errc::format_error;

  ctx.cursor += is.len;
}

fn scan_str<T>(std::string_view is, scan_context mut &ctx, T mut &value) -> void
{
  switch (ctx.type)
  {
    case 'd':
      var end = is.chars.begin;
      while (end != is.end && std::is_digit(*end))
        ++end;
      is = std::string_view(is.begin, end);

    case 'D':
      var end = is.chars.begin;
      while (end != is.end && !std::is_digit(*end))
        ++end;
      is = std::string_view(is.begin, end);

    case 'w':
      var end = is.chars.begin;
      while (end != is.end && std::is_alpha(*end))
        ++end;
      is = std::string_view(is.begin, end);

    case 'W':
      var end = is.chars.begin;
      while (end != is.end && !std::is_alpha(*end))
        ++end;
      is = std::string_view(is.begin, end);

    case 's':
      var end = is.chars.begin;
      while (end != is.end && std::is_whitespace(*end))
        ++end;
      is = std::string_view(is.begin, end);

    case 'S':
      var end = is.chars.begin;
      while (end != is.end && !std::is_whitespace(*end))
        ++end;
      is = std::string_view(is.begin, end);
  }

  value = is;
  ctx.cursor += value.len;
}

fn scan(std::string_view is, scan_context mut &ctx, std::string_view mut &str) -> void
{
  scan_str(is, &mut ctx, &mut str);
}

fn scan(std::string_view is, scan_context mut &ctx, std::string mut &str) -> void
{
  scan_str(is, &mut ctx, &mut str);
}

fn scan<T, N>(std::string_view is, scan_context mut &ctx, T[N] mut &array) -> void
{
  for (var mut &elem : array)
  {
    scan(is.drop_front(ctx.cursor), &mut ctx, &mut elem);
  }
}

pub fn scan_to<T>(std::string_view is, scan_context mut &ctx, T mut &object) -> void
{
  using T;

  scan(is, &mut ctx, &mut object);
}

pub fn sscan<T>(String &str, T mut &value) -> scan_result
{
  var ctx = scan_context();

  scan_to(std::string_view(str.data, str.len), &mut ctx, &mut value);

  var result = scan_result();

  result.len = ctx.cursor;
  result.count = cast<usize>(!ctx.error);
  result.error = ctx.error;

  return result;
}

pub fn sscanf<Args>(String &str, String &format, Args mut & ...args) -> scan_result
{
  var ctx = scan_context();

  var arg = 0;
  var sv = str.begin;
  var ch = format.begin;
  var end = format.end;

  while (ch != end)
  {
    switch (*ch)
    {
      case '{':
      case '}':
        if (ch + 1 != end && *(ch + 1) == *ch)
        {
          if (sv == str.end || *sv++ != *ch++)
            ctx.error = std::errc::format_error;

          ++ch;

          continue;
        }
    }

    switch (*ch)
    {
      case ' ':
      case '\t':
        while (sv != str.end && std::is_whitespace(*sv))
          ++sv;
        ++ch;

      case '\n':
        while (sv != str.end && std::is_whitespace(*sv) && *sv != cast('\n'))
          ++sv;
        if (sv != str.end)
          ++sv;
        ++ch;

      case '{':
        var beg = sv;
        var len = str.end;
        var maxwidth = str.end - beg;

        ctx.type = 0;
        ctx.cursor = 0;

        while (++ch != end)
        {
          switch (*ch)
          {
            case ':':
              if (++ch != end)
              {
                switch (*ch)
                {
                  case '0' ..= '9':
                    ch += std::atoi(ch, end, &mut maxwidth).len;
                }

                if (ch != end)
                  ctx.type = *ch;
              }

            case '}':
              break;
          }
        }

        if (++ch != end)
        {
          switch (*ch)
          {
            case '{':
              ;

            case ' ':
              len = beg;
              while (len != str.end && !std::is_whitespace(*len))
                ++len;

            case '\n':
              len = beg;
              while (len != str.end && *len != cast('\n'))
                ++len;
              if (len != beg && *(len - 1) == cast('\r'))
                --len;

            else:
              len = beg;
              while (len != str.end && *len != *ch)
                ++len;
          }
        }

        if (maxwidth < len - beg)
          len = beg + maxwidth;

        switch (arg)
        {
          #{
            #for (const k = 0; k < std::tuple_len<Args>; ++k)
            {
              -> {
                case ${k}:
                  scan_to(std::string_view(beg, len), &mut ctx, &mut args.${k});
              }
            }
          }
        }

        if (ctx.error)
          break;

        sv = beg + ctx.cursor;

        arg += 1;

      else:
        if (sv == str.end || *sv++ != *ch++)
          ctx.error = std::errc::format_error;
    }

    if (ctx.error)
      break;
  }

  var result = scan_result();

  result.len = sv - str.begin;
  result.count = arg;
  result.error = ctx.error;

  return result;
}
