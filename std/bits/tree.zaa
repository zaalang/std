//
// std tree
//

import std.memory;
import std.stdlib : assert;
import std.algorithm : swap;
import std.pair;

enum Color
{
  red,
  black
}

pub struct Link
{
  Color color;
  Link mut *parent;
  Link mut *left;
  Link mut *right;

  Link() = default;
  ~Link() = default;

  pub fn next(Link &&link)
  {
    var x = &link;

    if (x.right)
    {
      x = x.right;

      while (x.left)
        x = x.left;
    }
    else
    {
      while (x == x.parent.right)
        x = x.parent;

      x = x.parent;
    }

    return x;
  }

  pub fn prev(Link &&link)
  {
    var x = &link;

    if (x.left)
    {
      x = x.left;

      while (x.right)
        x = x.right;
    }
    else
    {
      while (x == x.parent.left)
        x = x.parent;

      x = x.parent;
    }

    return x;
  }
}

pub struct tree<K, T, Cmp = typeof(std::less), Allocator = std::allocator>
{
  pub struct Node : pub Link
  {
    Node()
      : value(void)
    {
    }

    ~Node() = default;

    pub value_type value;
  }
  
  pub using value_type = std::key_value_pair<K, T, Allocator>;

  pub tree(Allocator &allocator = Allocator())
    : allocator(allocator)
  {
    init(&mut this);
  }

  pub tree(Cmp &&cmp, Allocator &allocator = Allocator())
    : cmp(&&cmp), allocator(allocator)
  {
    init(&mut this);
  }

  pub ~tree()
  {
    clear(&mut this);
  }

  pub fn len(this &) -> usize
  {
    return this._len;
  }

  pub fn empty(this &) -> bool
  {
    return this._len == 0;
  }

  pub fn leftmost(this &&)
  {
    return this._leftmost;
  }

  pub fn rightmost(this &&)
  {
    return this._root.left;
  }

  pub fn root(this &&)
  {
    return &this._root;
  }

  pub fn lower_bound<Key>(this &&, Key &key)
  {
    var x = this._root.parent;
    var y = &this._root;

    while (x)
    {
      if (!this.cmp(cast<Node*>(x).value.key, key))
      {
        y = x;
        x = x.left;
      }
      else
      {
        x = x.right;
      }
    }

    return y;
  }

  pub fn upper_bound<Key>(this &&, Key &key)
  {
    var x = this._root.parent;
    var y = &this._root;

    while (x)
    {
      if (this.cmp(key, cast<Node*>(x).value.key))
      {
        y = x;
        x = x.left;
      }
      else
      {
        x = x.right;
      }
    }

    return y;
  }

  pub fn clear(this mut &) -> void
  {
    destroy(&mut this, this._root.parent);

    init(&mut this);
  }

  pub fn init(this mut &)
  {
    this._len = 0;
    this._root.color = Color::red;
    this._root.parent = null;
    this._root.left = &this._root;
    this._leftmost = &this._root;
  }

  pub fn take(this mut &, tree mut &other) -> void
  {
    assert(this.empty);
    assert(this.allocator == other.allocator);

    if (!other.empty)
    {
      this._root.parent = other._root.parent;
      this._root.parent.parent = &this._root;
      this._root.left = other._root.left;
      this._leftmost = other._leftmost;
    }

    swap(&mut this._len, &mut other.len);
    swap(&mut this.cmp, &mut other.cmp);

    other.init();
  }

  pub fn insert<Args>(this mut &, Link mut *parent, Args && ...args) -> Node mut *
  {
    var node = new<Node>(this.allocator.allocate(sizeof<Node>, alignof<Node>));

    new<value_type>(&node.value)(&&args..., allocator?: this.allocator);

    return splice(&mut this, parent, node);
  }

  pub fn extract(this mut &, Link mut *node, Link mut *next) -> Node mut *
  {
    if (node == this._leftmost)
      this._leftmost = next;

    if (node == this._root.left)
      this._root.left = (this._len == 1) ? &this._root : node.prev;

    tree_balance_for_erase(&mut this._root.parent, node);

    node.left = null;
    node.right = null;
    node.parent = null;
    node.color = Color::red;

    this._len -= 1;

    //assert(tree_verify(this));

    return cast<Node mut *>(node);
  }

  pub fn splice(this mut &, Link mut *parent, Node mut *node) -> Node mut *
  {
    node.parent = parent;

    if (parent == &this._root)
    {
      this._root.parent = node;
      this._root.left = node;
      this._leftmost = node;
    }
    else if (this.cmp(node.value.key, cast<Node*>(parent).value.key))
    {
      parent.left = node;

      if (parent == this._leftmost)
        this._leftmost = node;
    }
    else
    {
      parent.right = node;

      if (parent == this._root.left)
        this._root.left = node;
    }

    tree_balance_after_insert(&mut this._root.parent, node);

    this._len += 1;

    //assert(tree_verify(this));

    return node;
  }

  pub fn erase(this mut &, Link *first, Link *last) -> Link mut *
  {
    var node = cast<Link mut *>(first);

    while (node != last)
    {
      var next = node.next;

      extract(&mut this, node, next);

      Node::~Node(&mut *cast<Node mut *>(node));
      this.allocator.free(node, sizeof<Node>);

      node = next;
    }

    return node;
  }

  pub fn destroy(this mut &, Link mut *node) -> void
  {
    var node = cast<Node mut *>(node);

    if (node)
    {
      destroy(&mut this, node.left);
      destroy(&mut this, node.right);

      Node::~Node(&mut *node);
      this.allocator.free(node, sizeof<Node>);
    }
  }

  pub fn find_insert_position_unique<Key>(this mut &, Key &key) -> (Link mut *, Link mut *)
  {
    var x = this._root.parent;
    var y = &this._root;

    while (x)
    {
      y = x;

      if (this.cmp(key, cast<Node*>(x).value.key))
        x = x.left;
      else if (this.cmp(cast<Node*>(y).value.key, key))
        x = x.right;
      else
        return (y, null);
    }

    return (null, y);
  }

  pub fn find_insert_position_multi<Key>(this mut &, Key &key) -> (Link mut *, Link mut *)
  {
    var x = this._root.parent;
    var y = &this._root;

    while (x)
    {
      y = x;

      if (this.cmp(key, cast<Node*>(x).value.key))
        x = x.left;
      else
        x = x.right;
    }

    return (null, y);
  }

  Link _root;
  Link mut *_leftmost;
  usize _len;

  pub Cmp cmp;
  pub Allocator allocator;
}

fn tree_rotate_left(Link mut * mut &root, Link mut *x) -> void
{
  var y = x.right;

  x.right = y.left;

  if (x.right)
    x.right.parent = x;

  y.parent = x.parent;

  if (x == root)
    root = y;
  else if (x == x.parent.left)
    x.parent.left = y;
  else
    x.parent.right = y;

  y.left = x;
  x.parent = y;
}

fn tree_rotate_right(Link mut * mut &root, Link mut *x) -> void
{
  var y = x.left;

  x.left = y.right;

  if (x.left)
    x.left.parent = x;

  y.parent = x.parent;

  if (x == root)
    root = y;
  else if (x == x.parent.right)
    x.parent.right = y;
  else
    x.parent.left = y;

  y.right = x;
  x.parent = y;
}

fn tree_balance_after_insert(Link mut * mut &root, Link mut *x) -> void
{
  while (x != root && x.parent.color == Color::red)
  {
    var xpp = x.parent.parent;

    if (x.parent == xpp.left)
    {
      var y = xpp.right;

      if (y && y.color == Color::red)
      {
        x.parent.color = Color::black;
        y.color = Color::black;
        xpp.color = Color::red;
        x = xpp;
      }
      else
      {
        if (x == x.parent.right)
        {
          x = x.parent;
          tree_rotate_left(&mut root, x);
        }

        x.parent.color = Color::black;
        xpp.color = Color::red;
        tree_rotate_right(&mut root, xpp);
      }
    }
    else
    {
      var y = xpp.left;

      if (y && y.color == Color::red)
      {
        x.parent.color = Color::black;
        y.color = Color::black;
        xpp.color = Color::red;
        x = xpp;
      }
      else
      {
        if (x == x.parent.left)
        {
          x = x.parent;
          tree_rotate_right(&mut root, x);
        }

        x.parent.color = Color::black;
        xpp.color = Color::red;
        tree_rotate_left(&mut root, xpp);
      }
    }
  }

  root.color = Color::black;
}

fn tree_balance_for_erase(Link mut * mut &root, Link mut *z) -> void
{
  var y = z;
  var x = z;
  var xp = z;

  if (!y.left)
    x = y.right;
  else if (!y.right)
    x = y.left;
  else
  {
    y = y.right;
    while (y.left)
      y = y.left;
    x = y.right;
  }

  if (y != z)
  {
    z.left.parent = y;
    y.left = z.left;

    if (y != z.right)
    {
      xp = y.parent;
      if (x)
        x.parent = y.parent;
      y.parent.left = x;
      y.right = z.right;
      z.right.parent = y;
    }
    else
      xp = y;

    if (z == root)
      root = y;
    else if (z.parent.left == z)
      z.parent.left = y;
    else
      z.parent.right = y;

    y.parent = z.parent;
    swap(&mut y.color, &mut z.color);
    y = z;
  }
  else
  {
    xp = y.parent;
    if (x)
      x.parent = y.parent;

    if (z == root)
      root = x;
    else if (z.parent.left == z)
      z.parent.left = x;
    else
      z.parent.right = x;
  }

  if (y.color == Color::black)
  {
    while (x != root && (!x || x.color == Color::black))
    {
      if (x == xp.left)
      {
        var w = xp.right;

        if (w.color == Color::red)
        {
          w.color = Color::black;
          xp.color = Color::red;
          tree_rotate_left(&mut root, xp);
          w = xp.right;
        }

        if ((!w.left || w.left.color == Color::black) && (!w.right || w.right.color == Color::black))
        {
          w.color = Color::red;
          x = xp;
          xp = xp.parent;
        }
        else
        {
          if (!w.right || w.right.color == Color::black)
          {
            w.left.color = Color::black;
            w.color = Color::red;
            tree_rotate_right(&mut root, w);
            w = xp.right;
          }

          w.color = xp.color;
          xp.color = Color::black;
          if (w.right)
            w.right.color = Color::black;
          tree_rotate_left(&mut root, xp);
          break;
        }
      }
      else
      {
        var w = xp.left;

        if (w.color == Color::red)
        {
          w.color = Color::black;
          xp.color = Color::red;
          tree_rotate_right(&mut root, xp);
          w = xp.left;
        }

        if ((!w.right || w.right.color == Color::black) && (!w.left || w.left.color == Color::black))
        {
          w.color = Color::red;
          x = xp;
          xp = xp.parent;
        }
        else
        {
          if (!w.left || w.left.color == Color::black)
          {
            w.right.color = Color::black;
            w.color = Color::red;
            tree_rotate_left(&mut root, w);
            w = xp.left;
          }

          w.color = xp.color;
          xp.color = Color::black;
          if (w.left)
            w.left.color = Color::black;
          tree_rotate_right(&mut root, xp);
          break;
        }
      }
    }

    if (x)
      x.color = Color::black;
  }
}

fn tree_verify<K, T, Cmp, Allocator>(tree<K, T, Cmp, Allocator> &tree) -> bool
{
  using Node = tree<K, T, Cmp, Allocator>::Node;

  if (tree.len == 0)
    return tree.len == 0 && tree.leftmost == &tree.root && tree.rightmost == &tree.root;

  fn black_count(Link *first, Link *last) -> usize
  {
    var len = 0;

    for(var node = first; node != last; node = node.parent)
    {
      if (node.color == Color::black)
        ++len;
    }

    return len;
  }

  var len = black_count(tree.leftmost, tree.root.parent);

  for(var node = tree.leftmost; node != &tree.root; node = node.next)
  {
    var x = node;
    var l = x.left;
    var r = x.right;

    if (x.color == Color::red && ((l && l.color == Color::red) || (r && r.color == Color::red)))
      return false;

    if (l && tree.cmp(cast<Node*>(x).value.key, cast<Node*>(l).value.key))
      return false;

    if (r && tree.cmp(cast<Node*>(r).value.key, cast<Node*>(x).value.key))
      return false;

    if (!l && !r && black_count(x, tree.root.parent) != len)
      return false;
  }

  var leftmost = tree.root.parent;

  while (leftmost.left)
    leftmost = leftmost.left;

  if (tree.leftmost != leftmost)
    return false;

  var rightmost = tree.root.parent;

  while (rightmost.right)
    rightmost = rightmost.right;

  if (tree.root.left != rightmost)
    return false;

  return true;
}
