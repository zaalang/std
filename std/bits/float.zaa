//
// std float
//

import std.stdlib : assert;
import std.memory;
import std.numeric;
import std.math;
import std.type;

struct DiyFp
{
  u64 f;
  int e;
  
  DiyFp(u64 f, int e)
    : f(f), e(e)
  {
  }

  DiyFp() = default;
  DiyFp(DiyFp&) = default;
  fn =(DiyFp mut &, DiyFp&) -> DiyFp mut & = default;
  ~DiyFp() = default;
}

struct BoundedFp
{
  DiyFp value;
  DiyFp lower;
  DiyFp upper;
  
  BoundedFp() = default;
  BoundedFp(BoundedFp&) = default;
  ~BoundedFp() = default;
}
  
fn compute_bounded_fp<T>(T value) -> BoundedFp
{
  using std::F32;
  using std::F64;
  
  const mantisa_bits = F64::digits - 1;
  const exponent_bits = 64 - mantisa_bits - 1;
  const significand_mask = u64(1 << mantisa_bits) - 1;
  const exponent_mask = (~u64(0) >> 1) & ~significand_mask;
  const exponent_bias = (1 << exponent_bits) - F64::max_exponent + mantisa_bits - 1;
  const min_normal_e = F32::min_exponent - F64::digits;

  var result = BoundedFp();
  
  var u = std::bit_cast<u64>(cast<f64>(value));
  var biased_e = cast<int>((u & exponent_mask) >> mantisa_bits);
  var significand = u & significand_mask;

  if (biased_e != 0)
  {
    result.value.f = significand + (1 << mantisa_bits);
    result.value.e = biased_e - exponent_bias;
  }
  else
  {
    result.value.f = significand;
    result.value.e = 1 - exponent_bias;
  }
  
  #if (std::is_same<T, f32>)
  {
    var half_ulp = 1 << (F64::digits - F32::digits - 1);
    
    if (min_normal_e > result.value.e) 
      half_ulp <<= min_normal_e - result.value.e;

    if (significand == 0 && biased_e != 0 && result.value.e > min_normal_e)
    {
      result.lower.f = result.value.f - (half_ulp >> 1);
      result.lower.e = result.value.e;
    }
    else
    {
      result.lower.f = result.value.f - half_ulp;
      result.lower.e = result.value.e;
    }

    result.upper.f = result.value.f + half_ulp;
    result.upper.e = result.value.e;
  }
  
  #if (std::is_same<T, f64>)
  {
    if (significand == 0 && biased_e > 1)
    {
      result.lower.f = (result.value.f << 2) - 1;
      result.lower.e = result.value.e - 2;
    }
    else
    {
      result.lower.f = (result.value.f << 1) - 1;
      result.lower.e = result.value.e - 1;
    }

    result.upper.f = (result.value.f << 1) + 1;
    result.upper.e = result.value.e - 1;
  }

  return result;
}

fn normalize(DiyFp mut &fp) -> void
{
  assert(fp.f != 0);

  var shift = std::clz(fp.f);
  
  fp.f <<= shift;
  fp.e -= shift;
}

fn *(DiyFp &lhs, DiyFp &rhs) -> DiyFp
{ 
  var a = lhs.f >> 32;
  var b = lhs.f & 0xFFFFFFFF;
  var c = rhs.f >> 32;
  var d = rhs.f & 0xFFFFFFFF;
  var ac = a * c;
  var bc = b * c;
  var ad = a * d;
  var bd = b * d;
  var mid = (bd >> 32) + (ad & 0xFFFFFFFF) + (bc & 0xFFFFFFFF) + (1 << 31);

  return DiyFp(ac + (ad >> 32) + (bc >> 32) + (mid >> 32), lhs.e + rhs.e + 64);
}

fn pow10(int index) -> u64
{
  const Pow10 = [ 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 ];
  
  assert(0 <= index && cast(index) < Pow10.len);
  
  return Pow10[cast(index)];
}

fn cached_power(usize index) -> DiyFp
{
  const Cached_Significands = [
    0xfa8fd5a0081c0288, 0xbaaee17fa23ebf76, 0x8b16fb203055ac76,
    0xcf42894a5dce35ea, 0x9a6bb0aa55653b2d, 0xe61acf033d1a45df,
    0xab70fe17c79ac6ca, 0xff77b1fcbebcdc4f, 0xbe5691ef416bd60c,
    0x8dd01fad907ffc3c, 0xd3515c2831559a83, 0x9d71ac8fada6c9b5,
    0xea9c227723ee8bcb, 0xaecc49914078536d, 0x823c12795db6ce57,
    0xc21094364dfb5637, 0x9096ea6f3848984f, 0xd77485cb25823ac7,
    0xa086cfcd97bf97f4, 0xef340a98172aace5, 0xb23867fb2a35b28e,
    0x84c8d4dfd2c63f3b, 0xc5dd44271ad3cdba, 0x936b9fcebb25c996,
    0xdbac6c247d62a584, 0xa3ab66580d5fdaf6, 0xf3e2f893dec3f126,
    0xb5b5ada8aaff80b8, 0x87625f056c7c4a8b, 0xc9bcff6034c13053,
    0x964e858c91ba2655, 0xdff9772470297ebd, 0xa6dfbd9fb8e5b88f,
    0xf8a95fcf88747d94, 0xb94470938fa89bcf, 0x8a08f0f8bf0f156b,
    0xcdb02555653131b6, 0x993fe2c6d07b7fac, 0xe45c10c42a2b3b06,
    0xaa242499697392d3, 0xfd87b5f28300ca0e, 0xbce5086492111aeb,
    0x8cbccc096f5088cc, 0xd1b71758e219652c, 0x9c40000000000000,
    0xe8d4a51000000000, 0xad78ebc5ac620000, 0x813f3978f8940984,
    0xc097ce7bc90715b3, 0x8f7e32ce7bea5c70, 0xd5d238a4abe98068,
    0x9f4f2726179a2245, 0xed63a231d4c4fb27, 0xb0de65388cc8ada8,
    0x83c7088e1aab65db, 0xc45d1df942711d9a, 0x924d692ca61be758,
    0xda01ee641a708dea, 0xa26da3999aef774a, 0xf209787bb47d6b85,
    0xb454e4a179dd1877, 0x865b86925b9bc5c2, 0xc83553c5c8965d3d,
    0x952ab45cfa97a0b3, 0xde469fbd99a05fe3, 0xa59bc234db398c25,
    0xf6c69a72a3989f5c, 0xb7dcbf5354e9bece, 0x88fcf317f22241e2,
    0xcc20ce9bd35c78a5, 0x98165af37b2153df, 0xe2a0b5dc971f303a,
    0xa8d9d1535ce3b396, 0xfb9b7cd9a4a7443c, 0xbb764c4ca7a44410,
    0x8bab8eefb6409c1a, 0xd01fef10a657842c, 0x9b10a4e5e9913129,
    0xe7109bfba19c0c9d, 0xac2820d9623bf429, 0x80444b5e7aa7cf85,
    0xbf21e44003acdd2d, 0x8e679c2f5e44ff8f, 0xd433179d9c8cb841,
    0x9e19db92b4e31ba9, 0xeb96bf6ebadf77d9, 0xaf87023b9bf0ee6b,
  ];

  const Cached_Exponents = [
    -1220, -1193, -1166, -1140, -1113, -1087, -1060, -1034, -1007, -980, -954,
    -927,  -901,  -874,  -847,  -821,  -794,  -768,  -741,  -715,  -688, -661,
    -635,  -608,  -582,  -555,  -529,  -502,  -475,  -449,  -422,  -396, -369,
    -343,  -316,  -289,  -263,  -236,  -210,  -183,  -157,  -130,  -103, -77,
    -50,   -24,   3,     30,    56,    83,    109,   136,   162,   189,  216,
    242,   269,   295,   322,   348,   375,   402,   428,   455,   481,  508,
    534,   561,   588,   614,   641,   667,   694,   720,   747,   774,  800,
    827,   853,   880,   907,   933,   960,   986,   1013,  1039,  1066
  ];
 
  return DiyFp(Cached_Significands[index], Cached_Exponents[index]);
}

fn get_cached_power(int e, int mut &K) -> DiyFp
{
  var k = cast<usize>((cast<i64>(-61 - e) * 0x4d104d42 + (1 << 32) - 1) >> 32 + 347);

  var index = (k >> 3) + 1;
  
  K = -(-348 + cast(index << 3));

  return cached_power(index);
}

fn grisu_round_weed(u8 mut *digit, u64 delta, u64 mut &remainder, u64 divisor, u64 diff, u64 ulp) -> bool
{
  var wp_up = (diff - 1) * ulp;
  var wp_down = (diff + 1) * ulp;

  while (remainder < wp_up && delta - remainder >= divisor && 
        (remainder + divisor < wp_up || wp_up - remainder >= remainder + divisor - wp_up))
  {
    *digit -= 1;
    remainder += divisor;
  }

  if (remainder < wp_down && delta - remainder >= divisor && 
     (remainder + divisor < wp_down || wp_down - remainder >= remainder + divisor - wp_down))
    return false;

  return 2*ulp <= remainder && remainder <= delta - 4*ulp;
}

fn grisu_digits(u8 mut *beg, u8 mut *end, BoundedFp mut &fp, int mut &K, usize mut &len) -> bool
{
  normalize(fp.upper);

  if (fp.value.e > fp.upper.e)
  {
    fp.value.f <<= fp.value.e - fp.upper.e;
    fp.value.e = fp.upper.e;
  }

  if (fp.lower.e > fp.upper.e)
  {
    fp.lower.f <<= fp.lower.e - fp.upper.e;
    fp.lower.e = fp.upper.e;
  }

  var cached_pow = get_cached_power(fp.upper.e, K);

  fp.value = fp.value * cached_pow;
  fp.lower = fp.lower * cached_pow;
  fp.upper = fp.upper * cached_pow;

  fp.lower.f -= 1;
  fp.upper.f += 1;

  let shift = -fp.upper.e;
  var integral = fp.upper.f >> shift;
  var fractional = fp.upper.f - (integral << shift);
  var delta = fp.upper.f - fp.lower.f;
  var diff = fp.upper.f - fp.value.f;
  var ulp = 1;
  
  var kappa = 1;
  for(var pow = 10; pow <= integral; pow *= 10)
    ++kappa;

  var ch = beg;

  assert(end - beg >= 32);

  while (kappa > 0)
  {
    var divisor = pow10(kappa - 1);
    
    var digit = integral / divisor;
    
    *ch++ = cast(digit + cast('0'));

    integral -= digit * divisor;

    --kappa;

    if (var remainder = (integral << shift) + fractional; remainder <= delta)
    {
      K += kappa;
      len = ch - beg;

      return grisu_round_weed(ch - 1, delta, remainder, divisor << shift, diff, ulp);
    }
  }
  
  for(;;)
  {
    ulp *= 10;
    delta *= 10;
    fractional *= 10;

    var digit = fractional >> shift;
    
    *ch++ = cast(digit + cast('0'));

    fractional -= digit << shift;

    --kappa;

    if (fractional < delta)
    {
      K += kappa;
      len = ch - beg;

      return grisu_round_weed(ch - 1, delta, fractional, 1 << shift, diff, ulp);
    }
  }
}

fn fallback_digits(u8 mut *beg, u8 mut *end, BoundedFp mut &fp, int mut &K, usize mut &len) -> void
{
  import std.bits.bigint as bg : bigint;

  let shift = -fp.value.e;
  var integral = fp.value.f >> shift;

  var kappa = 1;
  for(var pow = 10; pow <= integral; pow *= 10)
    ++kappa;

  var value = bigint<1024>(fp.value.f);
  var scale = bigint<1024>(1);
  scale.mulexp(kappa - 1);
  scale <<= shift;

  var ch = beg;

  for(var i = 0; i <= len; ++i)
  {
    var digit = divmod(value, scale);

    *ch++ = cast(digit + cast('0'));

    value *= 10;
  }

  var digit = divmod(value, scale);

  if (digit > 5 || (value.bits[0] != 0 && digit == 5))
  {
    rof(var i = ch; i == beg; --i)
    {
      if ((*i)++ < cast('9'))
        break;

      *i = cast('0');

      if (i == beg)
      {
        K += 1;
        *i = cast('1');
      }
    }
  }

  for(var i = ch - 1; *i == cast('0'); --i)
  {
    K += 1;
    ch -= 1;
  }

  K -= 1;
  len = ch - beg;
}

pub fn grisu<T>(u8 mut *beg, u8 mut *end, T value, int mut &K, usize mut &len) -> void
{
  if (value == 0.0)
  {
    *beg = cast('0');

    K = 0;
    len = 1;
    
    return;
  }

  var fp = compute_bounded_fp(value);

  var ok = grisu_digits(beg, end, fp, K, len);

  if (!ok)
  {
    fallback_digits(beg, end, fp, K, len);
  }
}
