//
// std utf8
//

import std.stdlib;

// UTF-8 decode
// Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>
// See http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ for details.

pub const ACCEPT = 0;
pub const REJECT = 12;

const utf8d = [
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 00..1f
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 20..3f
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 40..5f
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 60..7f
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, // 80..9f
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, // a0..bf
  8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, // c0..df
  0xa,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x4,0x3,0x3, // e0..ef
  0xb,0x6,0x6,0x6,0x5,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8, // f0..ff

   0,12,24,36,60,96,84,12,12,12,48,72, 12,12,12,12,12,12,12,12,12,12,12,12,
  12, 0,12,12,12,12,12, 0,12, 0,12,12, 12,24,12,12,12,12,12,24,12,24,12,12,
  12,12,12,12,12,12,12,24,12,12,12,12, 12,24,12,12,12,12,12,12,12,24,12,12,
  12,12,12,12,12,12,12,36,12,36,12,12, 12,36,12,12,12,12,12,36,12,36,12,12,
  12,36,12,12,12,12,12,12,12,12,12,12,
];

pub fn decode(u32 mut &state, char mut &codep, u8 ch) -> u32
{
  var byte = cast<char>(ch);
  var type = utf8d[cast(ch)];

  codep = (state != 0) ? (byte & 0x3f) | (codep << 6) : (0xff >> type) & (byte);
  state = utf8d[256 + cast(state) + type];

  return state;
}

pub fn len_prev(u8 *beg, u8 *end) -> usize
{
  std::assert(beg != end);

  var i = 1;

  rof(var ch = end; ch == beg || i >= 4; --ch)
  {
    if ((*ch & 0xC0) != 0x80)
      break;

    ++i;
  }

  return i;
}

pub fn len_next(u8 *beg, u8 *end) -> usize
{
  std::assert(beg != end);

  if ((*beg & 0x80) == 0x00)
    return 1;

  if ((*beg & 0xe0) == 0xc0)
    return 2;

  if ((*beg & 0xf0) == 0xe0)
    return 3;

  if ((*beg & 0xf8) == 0xf0)
    return 4;

  return 1;
}

pub fn len(u8 *beg, u8 *end, bool mut &valid) -> usize
{
  var len = 0;

  var state = 0;
  var codepoint = char(0);
  for (var ch = beg; ch != end; ++ch)
  {
    if (decode(&mut state, &mut codepoint, *ch) == ACCEPT)
      ++len;
  }

  valid = (state == ACCEPT);

  return len;
}

pub fn len(char value) -> usize
{
  if (value <= 0x7f)
    return 1;

  if (value <= 0x7ff)
    return 2;

  if (value <= 0xffff)
    return 3;

  if (value <= 0x10ffff)
    return 4;

  return 0;
}

pub fn encode(u8 mut *ch, char value) -> usize
{
  if (value <= 0x7f)
    return encode1(ch, value);

  if (value <= 0x7ff)
    return encode2(ch, value);

  if (value <= 0xffff)
    return encode3(ch, value);

  if (value <= 0x10ffff)
    return encode4(ch, value);

  return 0;
}

pub fn encode1(u8 mut *ch, char value) -> usize
{
  *ch++ = cast(value);

  return 1;
}

pub fn encode2(u8 mut *ch, char value) -> usize
{
  *ch++ = 0b11000000 | cast(value >> 6);
  *ch++ = 0b10000000 | cast(value & 0b00111111);

  return 2;
}

pub fn encode3(u8 mut *ch, char value) -> usize
{
  *ch++ = 0b11100000 | cast(value >> 12);
  *ch++ = 0b10000000 | cast((value >> 6) & 0b00111111);
  *ch++ = 0b10000000 | cast(value & 0b00111111);

  return 3;
}

pub fn encode4(u8 mut *ch, char value) -> usize
{
  *ch++ = 0b11110000 | cast(value >> 18);
  *ch++ = 0b10000000 | cast((value >> 12) & 0b00111111);
  *ch++ = 0b10000000 | cast((value >> 6) & 0b00111111);
  *ch++ = 0b10000000 | cast(value & 0b00111111);

  return 4;
}
