//
// std circular_buffer
//

import std.stdlib : assert;
import std.memory : memset, memcpy, memmove;
import std.algorithm : swap;
import std.range : Sentinal, Range;
import std.span : span, mutable_span;
import std.type : as_const;

pub struct circular_buffer<T, Allocator = std::allocator, N = 0>
{
  pub circular_buffer(Allocator &allocator = Allocator())
    : _allocator(allocator),
      _smallbuffer(void)
  {
    #if (N != 0)
    {
      init(&mut this);
    }
  }

  pub circular_buffer<M>(circular_buffer<T, Allocator, M> &&other, Allocator &allocator = Allocator())
    : _allocator(allocator),
      _smallbuffer(void)
  {
    init(&mut this);

    insert(&mut this, this.end, &&other);
  }

  #[lifetime(poison(this))]
  pub fn =<M>(this mut &, circular_buffer<T, Allocator, M> &&other) -> circular_buffer mut &
  {
    if (&this != &other)
    {
      clear(&mut this);

      insert(&mut this, this.end, &&other);
    }

    return &this;
  }

  pub fn with_capacity(usize capacity, Allocator &allocator = Allocator()) -> circular_buffer
  {
    var result = circular_buffer(allocator);

    reserve(&mut result, capacity);

    return result;
  }

  pub ~circular_buffer()
  {
    clear(&mut this);

    if (_data && _data != cast(_smallbuffer.data))
      _allocator.free(_data, _capacity * sizeof<T>);
  }

  pub fn len(this &) -> usize
  {
    return this._len;
  }

  pub fn full(this &) -> bool
  {
    return this._len == this._capacity;
  }

  pub fn empty(this &) -> bool
  {
    return this._len == 0;
  }

  pub fn capacity(this &) -> usize
  {
    return this._capacity;
  }

  #[lifetime(depend(this))]
  pub fn spans(this &)
  {
    var spans = [ std::span<T>(); 2 ];

    spans[0] = std::span(this._data + this._head, std::min(this._len, this._capacity - this._head));
    spans[1] = std::span(this._data, this._len - spans[0].len);

    return spans;
  }

  #[lifetime(depend(this))]
  pub fn spans(this mut &)
  {
    var spans = [ std::mutable_span<T>(); 2 ];

    spans[0] = std::mutable_span(this._data + this._head, std::min(this._len, this._capacity - this._head));
    spans[1] = std::mutable_span(this._data, this._len - spans[0].len);

    return spans;
  }

  pub fn allocator(this &) -> Allocator &
  {
    return &this._allocator;
  }

  #[lifetime(depend(this))]
  pub fn [](this &&, usize index)
  {
    assert(index < this.len);

    return &cast<&&typeof(this)>(*(this._data + (this._head + index) & (this._capacity - 1)));
  }

  pub struct iterator
  {
    pub iterator() = default;
    pub iterator(iterator&) = default;
    pub fn =(iterator mut &this, iterator &that) -> iterator mut & = default;
    pub ~iterator() = default;

    #[lifetime(depend(this))]
    pub fn ++(iterator mut &this) -> iterator mut &
    {
      ++this.cursor;
      return &this;
    }

    #[lifetime(depend(this))]
    pub fn --(iterator mut &this) -> iterator mut &
    {
      --this.cursor;
      return &this;
    }

    iterator(usize item)
      : cursor(item)
    {
    }

    usize cursor;
  }

  pub fn ==(iterator &lhs, iterator &rhs) -> bool
  {
    return lhs.cursor == rhs.cursor;
  }

  pub fn -(iterator lhs, iterator rhs) -> usize
  {
    return lhs.cursor - rhs.cursor;
  }

  #[lifetime(clone(lhs))]
  pub fn -(iterator lhs, usize rhs) -> iterator
  {
    return iterator(lhs.cursor - rhs);
  }

  #[lifetime(clone(lhs))]
  pub fn +(iterator lhs, usize rhs) -> iterator
  {
    return iterator(lhs.cursor + rhs);
  }

  #[lifetime(depend(this))]
  pub fn begin(this &)
  {
    return iterator(this._head);
  }

  #[lifetime(depend(this))]
  pub fn end(this &)
  {
    return iterator(this._head + this._len);
  }

  #[lifetime(depend(this))]
  pub fn [](this &&, iterator iter)
  {
    return &cast<&&typeof(this)>(*(this._data + iter.cursor & (this._capacity - 1)));
  }

  #[lifetime(depend(this))]
  pub fn front(this &&)
  {
    assert(!this.empty);

    return &*(this._data + this._head);
  }

  #[lifetime(depend(this))]
  pub fn back(this &&)
  {
    assert(!this.empty);

    return &*(this._data + (this._head + this._len - 1) & (this._capacity - 1));
  }

  #[lifetime(poison(this), depend(this))]
  pub fn push_back<Args>(this mut &, Args && ...args) -> void
    match (Args args) { T(&&args..., allocator?: std::declval<Allocator>()); }
  {
    if (this.full)
    {
      if (this.empty)
        return;

      pop_front(&mut this);
    }

    var tail = (this._head + this._len) & (this._capacity - 1);

    new<T>(this._data + tail)(&&args..., allocator?: this.allocator);

    this._len += 1;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn push_front<Args>(this mut &, Args && ...args) -> void
    match (Args args) { T(&&args..., allocator?: std::declval<Allocator>()); }
  {
    if (this.full)
    {
      if (this.empty)
        return;

      pop_back(&mut this);
    }

    this._head = (this._capacity + this._head - 1) & (this._capacity - 1);

    new<T>(this._data + this._head)(&&args..., allocator?: this.allocator);

    this._len += 1;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn insert<Args>(this mut &, iterator position, Args && ...args) -> iterator
    match (Args args) { T(&&args..., allocator?: std::declval<Allocator>()); }
  {
    if (this.full)
    {
      if (this.empty)
        return this.end;

      if (position.cursor == this._head)
        return this.end;

      if (var index = position.cursor - this._head; index != 0)
      {
        pop_front(&mut this);
        position.cursor = this._head + index - 1;
      }
    }

    var index = position.cursor;

    if (index != this._head + this._len)
    {
      uninitialised_move(&mut this, this._head + this._len, this._head + this._len - 1, this._head + this._len);
      initialised_move_backward(&mut this, index + 1, index, this._head + this._len - 1);
      destruct(&mut this, index, index + 1);
    }

    new<T>(this._data + index & (this._capacity - 1))(&&args..., allocator?: this.allocator);

    this._len += 1;

    return iterator(index);
  }

  #[lifetime(poison(this), depend(this))]
  pub fn insert<U>(this mut &, iterator position, Range<U> &&other) -> iterator
    match (U u) { T(u, allocator?: std::declval<Allocator>()); }
  {
    #if (__is_same<circular_buffer, typeof(other)>)
      assert(&this != &other);

    #if (__is_rvalue<typeof(other)> && requires (typeof(this) this, typeof(other) other) { this.take(&mut other); })
    {
      if (this.empty)
        return this.take(&mut other);
    }

    for(var it = position, var first = other.begin, var last = other.end; first != last; ++it, ++first)
    {
      it = insert(&mut this, it, (&&other)[first]);

      if (it.cursor == this._head + this._len)
        break;
    }

    return position;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn insert<I>(this mut &, iterator position, I first, Sentinal<I> last) -> iterator
    where requires (I i) { T(*i); }
  {
    var slot = ensure_space(&mut this, position, std::distance(first, last));

    for(var it = slot; first != last; ++it, ++first)
    {
      new<T>(it)(*first, allocator?: this.allocator);
    }

    return slot;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn emplace<Args>(this mut &, iterator position, Args && ...args) -> T mut &
    match (Args args) { T(&&args..., allocator?: std::declval<Allocator>()); }
  {
    return &this[insert(&mut this, position, &&args...)];
  }

  #[lifetime(poison(this), depend(this))]
  pub fn append<U>(this mut &, Range<U> &&other) -> iterator
    match (U u) { T(u, allocator?: std::declval<Allocator>()); }
  {
    return insert(&mut this, this.end, &&other);
  }

  #[lifetime(poison(this), depend(this))]
  pub fn append<I>(this mut &, I first, Sentinal<I> last) -> iterator
    where requires (I i) { T(*i); }
  {
    return insert(&mut this, this.end, first, last);
  }

  #[lifetime(poison(this))]
  pub fn pop_front(this mut &) -> void
  {
    assert(!this.empty);

    T::~T(&mut *(this._data + this._head & (this._capacity - 1)));

    this._len -= 1;
    this._head = (this._head + 1) & (this._capacity - 1);
  }

  #[lifetime(poison(this))]
  pub fn pop_back(this mut &) -> void
  {
    assert(!this.empty);

    T::~T(&mut *(this._data + (this._head + this._len - 1) & (this._capacity - 1)));

    this._len -= 1;
  }

  #[lifetime(poison(this))]
  pub fn take_front(this mut &) -> T
  {
    var result = &move std::launder(this.front);

    pop_front(&mut this);

    return result;
  }

  #[lifetime(poison(this))]
  pub fn take_back(this mut &) -> T
  {
    var result = &move std::launder(this.back);

    pop_back(&mut this);

    return result;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn erase(this mut &, iterator position) -> iterator
  {
    return erase(&mut this, position, 1);
  }

  #[lifetime(poison(this), depend(this))]
  pub fn erase(this mut &, iterator first, iterator last) -> iterator
  {
    return erase(&mut this, first, last.cursor - first.cursor);
  }

  #[lifetime(poison(this), depend(this))]
  pub fn erase(this mut &, iterator position, usize count) -> iterator
  {
    assert(this._head <= position.cursor && position.cursor + count <= this._head + this._len);

    var index = position.cursor;

    initialised_move(&mut this, index, index + count, this._head + this._len);
    destruct(&mut this, this._head + this._len - count, this._head + this._len);

    this._len -= count;

    return iterator(index);
  }

  #[lifetime(poison(this), depend(this))]
  pub fn drop_n!(this mut &, usize n) -> circular_buffer mut &
  {
    erase(&mut this, this.begin, std::min(this._len, n));

    return &this;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn take_n!(this mut &, usize n) -> circular_buffer mut &
  {
    erase(&mut this, this.begin + std::min(this._len, n), this.len - std::min(this._len, n));

    return &this;
  }

  #[lifetime(poison(this))]
  pub fn reserve(this mut &, usize mincapacity) -> void
  {
    if (this._capacity < mincapacity)
    {
      mincapacity = std::ceil_pow2(mincapacity);

      var newdata = cast<T mut *>(this._allocator.allocate(mincapacity * sizeof<T>, alignof<T>));

      uninitialised_move(&mut this, newdata, this._head, this._head + this._len);
      destruct(&mut this, this._head, this._head + this._len);

      if (this._data && this._data != cast(this._smallbuffer.data))
        this._allocator.free(this._data, this._capacity * sizeof<T>);

      this._head = 0;
      this._data = newdata;
      this._capacity = mincapacity;
    }
  }

  #[lifetime(poison(this))]
  pub fn resize(this mut &, usize size) -> void
  {
    reserve(&mut this, size);

    while (size < this._len)
      this.pop_back();

    while (this._len < size)
      this.push_back();
  }

  #[lifetime(poison(this))]
  pub fn clear(this mut &) -> void
  {
    erase(&mut this, this.begin, this._len);
  }

  fn init(this mut &)
  {
    this._len = 0;
    this._head = 0;
    this._data = cast(this._smallbuffer.data);
    this._capacity = this._smallbuffer.len / sizeof<T>;

    assert(cast<usize>(this._data) & (alignof<T> - 1) == 0);
    assert(this._capacity == 0 || this._capacity & (this._capacity - 1) == 0);
  }

  fn take<M>(this mut &, circular_buffer<T, Allocator, M> mut &other) -> iterator
  {
    assert(this.empty);
    assert(this.allocator == other.allocator);

    if (other._data != cast(other._smallbuffer.data))
    {
      swap(&mut this._data, &mut other._data);
      swap(&mut this._len, &mut other._len);
      swap(&mut this._head, &mut other._head);
      swap(&mut this._capacity, &mut other._capacity);

      if (other._data == cast(this._smallbuffer.data))
        other.init();
    }
    else
    {
      insert(&mut this, this.begin, std::moveable_range_view(&mut other, other.begin, other.end));

      other.clear();
    }

    return iterator(this._head);
  }

  fn initialised_move(this mut &, usize dst, usize first, usize last) -> void
  {
    while (first != last)
    {
      T::~T(&mut *(this._data + dst & (this._capacity - 1)));

      new<T>(this._data + dst++ & (this._capacity - 1))(&move *(this._data + first++ & (this._capacity - 1)), allocator?: this.allocator);
    }
  }

  fn initialised_move_backward(this mut &, usize dst, usize first, usize last) -> void
  {
    var end = dst + (last - first);

    while (first != last)
    {
      T::~T(&mut *(this._data + (end - 1) & (this._capacity - 1)));

      new<T>(this._data + --end & (this._capacity - 1))(&move *(this._data + --last & (this._capacity - 1)), allocator?: this.allocator);
    }
  }

  fn uninitialised_move(this mut &, usize dst, usize first, usize last) -> void
  {
    while (first != last)
    {
      new<T>(this._data + dst++ & (this._capacity - 1))(&move *(this._data + first++ & (this._capacity - 1)), allocator?: this.allocator);
    }
  }

  fn uninitialised_move(this mut &, T mut *dst, usize first, usize last) -> void
  {
    while (first != last)
    {
      new<T>(dst++)(&move *(this._data + first++ & (this._capacity - 1)), allocator?: this.allocator);
    }
  }

  fn destruct(this mut &, usize first, usize last) -> void
  {
    #if (!__is_trivial_destroy<T>)
    {
      while (first != last)
        T::~T(&mut *(this._data + first++ & (this._capacity - 1)));
    }
  }

  pub circular_buffer(#circular_buffer&) = default;

  usize _len;
  usize _head;
  T mut *_data;

  usize _capacity;
  u8[N*sizeof<T>] _smallbuffer; // NOTE: relying on alignment after a usize

  Allocator _allocator;
}

#[lifetime(poison(range))]
pub fn erase<T, Value>(circular_buffer<T> mut &range, Value &value) -> usize
  match (Value value) { T(value); }
{
  var n = range.len;

  range.erase(std::remove(range, value), range.end);

  return n - range.len;
}

#[lifetime(poison(range))]
pub fn erase_if<T, Pred>(circular_buffer<T> mut &range, Pred &pred) -> usize
  where requires (T i, Pred &pred) { pred(i); }
{
  var n = range.len;

  range.erase(std::remove_if(range, pred), range.end);

  return n - range.len;
}
