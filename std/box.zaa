//
// std.box
//

import std.stdlib;
import std.memory;
import std.string : String;
import std.fmt;
import std.scan;

pub struct box<T, Allocator = std::allocator>
{
  struct Bx
  {
    T value;

    Bx<Args>(Args && ...args, Allocator &allocator)
      : value(void), _allocator(allocator)
    {
      new<T>(&value)(&&args..., allocator?: _allocator);
    }

    Allocator _allocator;
  }

  Bx mut *inner;

  #[lifetime(depend(this))]
  pub fn *(this &&)
  {
    return &cast<&&typeof(this)>(this.inner.value);
  }

  pub box(T &&value, Allocator &allocator = Allocator())
    : inner(void)
  {
    inner = new<Bx>(Allocator(allocator).allocate(sizeof<Bx>, alignof<Bx>))(&&value, allocator: allocator);
  }

  pub box<Args>(Args && ...args, Allocator &allocator = Allocator())
    match (Args args) { T(&move args..., allocator?: std::declval<Allocator>()); }
    : inner(void)
  {
    inner = new<Bx>(Allocator(allocator).allocate(sizeof<Bx>, alignof<Bx>))(&&args..., allocator: allocator);
  }

  pub box(box &&other)
    where __is_rvalue<typeof(other)>
    : inner(void)
  {
    inner = release(&move other);
  }

  pub fn adopt(Bx mut *ptr) -> box
  {
    return box(ptr);
  }

  #[lifetime(poison(this))]
  pub fn =(box mut &this, box &&other) -> box mut &
    where __is_rvalue<typeof(other)>
  {
    reset(&mut this, release(&move other));

    return &this;
  }

  pub static fn release(box &&this) -> Bx mut *
    where __is_rvalue<typeof(this)>
  {
    var ptr = this.inner;

    this.inner = null;

    return ptr;
  }

  #[lifetime(launder(this), poison(this))]
  pub static fn reset(this mut &, Bx mut *ptr = null) -> void
  {
    if (this.inner)
    {
      T::~T(&mut this.inner.value);

      destroy(this.inner);
    }

    this.inner = ptr;
  }

  fn destroy(Bx mut *ptr) -> void
  {
    var allocator = &move ptr._allocator;

    Allocator::~Allocator(&mut ptr._allocator);

    allocator.free(ptr, sizeof<Bx>);
  }

  box(Bx mut *ptr)
    : inner(ptr)
  {
  }

  pub ~box()
  {
    reset(&mut this);
  }
}

pub fn fmt<T>(std::OutputStream mut &os, std::fmt_context mut &ctx, std::box<T> &boxed) throws -> void
{
  ctx.written += std::print_to(&mut os, *boxed);
}

pub fn scan<T>(std::string_view is, std::scan_context mut &ctx, std::box<T> mut &boxed) -> void
{
  std::scan_to(is, &mut ctx, &mut *boxed);
}
