//
// std unicode
//

import std.stdlib : assert;
import std.string;
import std.span : Span;
import std.bits.utf as utf;

pub fn len_utf8(char ch) -> usize
{
  return utf::len(ch);
}

pub fn encode_utf8(Span<u8> mut &dst, char ch) -> std::string_view
{
  assert(0 < utf::len(ch) && utf::len(ch) <= dst.len);

  var len = utf::encode(dst.data, ch);

  return std::string_view(dst.data, len);
}

pub fn is_ascii(u8 ch) -> bool
{
  return ch < 0x80;
}

pub fn is_ascii(char ch) -> bool
{
  return ch < 0x80;
}

pub fn is_unicode(u8 ch) -> bool
{
  return ch < 0x80;
}

pub fn is_unicode(char ch) -> bool
{
  return ch < 0x10ffff;
}

pub fn is_alpha(u8 ch) -> bool
{
  return cast('a') <= ch && ch <= cast('z') || cast('A') <= ch && ch <= cast('Z');
}

pub fn is_alpha(char ch) -> bool
{
  return 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z';
}

pub fn is_digit(u8 ch) -> bool
{
  return cast('0') <= ch && ch <= cast('9');
}

pub fn is_digit(char ch) -> bool
{
  return '0' <= ch && ch <= '9';
}

pub fn is_alphanumeric(u8 ch) -> bool
{
  return cast('a') <= ch && ch <= cast('z') || cast('A') <= ch && ch <= cast('Z') || cast('0') <= ch && ch <= cast('9');
}

pub fn is_alphanumeric(char ch) -> bool
{
  return is_alpha(ch) || is_digit(ch);
}

pub fn is_cntrl(u8 ch) -> bool
{
  return ch < 0x20 || ch == 0x7f;
}

pub fn is_cntrl(char ch) -> bool
{
  return ch < 0x20 || ch == 0x7f;
}

pub fn is_lowercase(u8 ch) -> bool
{
  return cast('a') <= ch && ch <= cast('z');
}

pub fn is_lowercase(char ch) -> bool
{
  return 'a' <= ch && ch <= 'z';
}

pub fn is_uppercase(u8 ch) -> bool
{
  return cast('A') <= ch && ch <= cast('Z');
}

pub fn is_uppercase(char ch) -> bool
{
  return 'A' <= ch && ch <= 'Z';
}

pub fn is_whitespace(u8 ch) -> bool
{
  return ch == cast(' ') || ch == cast('\t') || ch == cast('\n') || ch == cast('\r') || ch == cast('\v') || ch == cast('\f');
}

pub fn is_whitespace(char ch) -> bool
{
  return ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' || ch == '\v' || ch == '\f' || ch == 0x85 || ch == 0xa0;
}

pub fn to_lowercase(u8 ch) -> u8
{
  return ch | (cast<u8>(is_uppercase(ch)) << 5);
}

pub fn to_lowercase(char ch) -> char
{
  if ('A' <= ch && ch <= 'Z')
    return ch + 0x20;

  return ch;
}

pub fn to_uppercase(u8 ch) -> u8
{
  return ch & ~(cast<u8>(is_lowercase(ch)) << 5);
}

pub fn to_uppercase(char ch) -> char
{
  if ('a' <= ch && ch <= 'z')
    return ch - 0x20;

  return ch;
}

pub fn is_non_spacing(char ch) -> bool
{
  // uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c
  const nonspacing = [<(char, char)>:
    0x0300 .. 0x036f, 0x0483 .. 0x0486, 0x0488 .. 0x0489,
    0x0591 .. 0x05bd, 0x05bf .. 0x05bf, 0x05c1 .. 0x05c2,
    0x05c4 .. 0x05c5, 0x05c7 .. 0x05c7, 0x0600 .. 0x0603,
    0x0610 .. 0x0615, 0x064b .. 0x065e, 0x0670 .. 0x0670,
    0x06d6 .. 0x06e4, 0x06e7 .. 0x06e8, 0x06ea .. 0x06ed,
    0x070f .. 0x070f, 0x0711 .. 0x0711, 0x0730 .. 0x074a,
    0x07a6 .. 0x07b0, 0x07eb .. 0x07f3, 0x0901 .. 0x0902,
    0x093c .. 0x093c, 0x0941 .. 0x0948, 0x094d .. 0x094d,
    0x0951 .. 0x0954, 0x0962 .. 0x0963, 0x0981 .. 0x0981,
    0x09bc .. 0x09bc, 0x09c1 .. 0x09c4, 0x09cd .. 0x09cd,
    0x09e2 .. 0x09e3, 0x0a01 .. 0x0a02, 0x0a3c .. 0x0a3c,
    0x0a41 .. 0x0a42, 0x0a47 .. 0x0a48, 0x0a4b .. 0x0a4d,
    0x0a70 .. 0x0a71, 0x0a81 .. 0x0a82, 0x0abc .. 0x0abc,
    0x0ac1 .. 0x0ac5, 0x0ac7 .. 0x0ac8, 0x0acd .. 0x0acd,
    0x0ae2 .. 0x0ae3, 0x0b01 .. 0x0b01, 0x0b3c .. 0x0b3c,
    0x0b3f .. 0x0b3f, 0x0b41 .. 0x0b43, 0x0b4d .. 0x0b4d,
    0x0b56 .. 0x0b56, 0x0b82 .. 0x0b82, 0x0bc0 .. 0x0bc0,
    0x0bcd .. 0x0bcd, 0x0c3e .. 0x0c40, 0x0c46 .. 0x0c48,
    0x0c4a .. 0x0c4d, 0x0c55 .. 0x0c56, 0x0cbc .. 0x0cbc,
    0x0cbf .. 0x0cbf, 0x0cc6 .. 0x0cc6, 0x0ccc .. 0x0ccd,
    0x0ce2 .. 0x0ce3, 0x0d41 .. 0x0d43, 0x0d4d .. 0x0d4d,
    0x0dca .. 0x0dca, 0x0dd2 .. 0x0dd4, 0x0dd6 .. 0x0dd6,
    0x0e31 .. 0x0e31, 0x0e34 .. 0x0e3a, 0x0e47 .. 0x0e4e,
    0x0eb1 .. 0x0eb1, 0x0eb4 .. 0x0eb9, 0x0ebb .. 0x0ebc,
    0x0ec8 .. 0x0ecd, 0x0f18 .. 0x0f19, 0x0f35 .. 0x0f35,
    0x0f37 .. 0x0f37, 0x0f39 .. 0x0f39, 0x0f71 .. 0x0f7e,
    0x0f80 .. 0x0f84, 0x0f86 .. 0x0f87, 0x0f90 .. 0x0f97,
    0x0f99 .. 0x0fbc, 0x0fc6 .. 0x0fc6, 0x102d .. 0x1030,
    0x1032 .. 0x1032, 0x1036 .. 0x1037, 0x1039 .. 0x1039,
    0x1058 .. 0x1059, 0x1160 .. 0x11ff, 0x135f .. 0x135f,
    0x1712 .. 0x1714, 0x1732 .. 0x1734, 0x1752 .. 0x1753,
    0x1772 .. 0x1773, 0x17b4 .. 0x17b5, 0x17b7 .. 0x17bd,
    0x17c6 .. 0x17c6, 0x17c9 .. 0x17d3, 0x17dd .. 0x17dd,
    0x180b .. 0x180d, 0x18a9 .. 0x18a9, 0x1920 .. 0x1922,
    0x1927 .. 0x1928, 0x1932 .. 0x1932, 0x1939 .. 0x193b,
    0x1a17 .. 0x1a18, 0x1b00 .. 0x1b03, 0x1b34 .. 0x1b34,
    0x1b36 .. 0x1b3a, 0x1b3c .. 0x1b3c, 0x1b42 .. 0x1b42,
    0x1b6b .. 0x1b73, 0x1dc0 .. 0x1dca, 0x1dfe .. 0x1dff,
    0x200b .. 0x200f, 0x202a .. 0x202e, 0x2060 .. 0x2063,
    0x206a .. 0x206f, 0x20d0 .. 0x20ef, 0x302a .. 0x302f,
    0x3099 .. 0x309a, 0xa806 .. 0xa806, 0xa80b .. 0xa80b,
    0xa825 .. 0xa826, 0xfb1e .. 0xfb1e, 0xfe00 .. 0xfe0f,
    0xfe20 .. 0xfe23, 0xfeff .. 0xfeff, 0xfff9 .. 0xfffb,
    0x10a01 .. 0x10a03, 0x10a05 .. 0x10a06, 0x10a0c .. 0x10a0f,
    0x10a38 .. 0x10a3a, 0x10a3f .. 0x10a3f, 0x1d167 .. 0x1d169,
    0x1d173 .. 0x1d182, 0x1d185 .. 0x1d18b, 0x1d1aa .. 0x1d1ad,
    0x1d242 .. 0x1d244, 0xe0001 .. 0xe0001, 0xe0020 .. 0xe007f,
    0xe0100 .. 0xe01ef
  ];

  if (nonspacing[0].0 <= ch && ch <= nonspacing[nonspacing.len - 1].1)
  {
    var lo = 0;
    var hi = nonspacing.len;

    while (hi > lo)
    {
      var mid = (lo + hi) / 2;

      if (ch > nonspacing[mid].1)
        lo = mid + 1;
      else if (ch < nonspacing[mid].0)
        hi = mid;
      else
        return true;
    }
  }

  return false;
}

pub fn is_wide_spacing(char ch) -> bool
{
  const widespacing = [<(char, char)>:
    0x1100 .. 0x115f, 0x2329 .. 0x232a, 0x2e80 .. 0x303e, 0x3040 .. 0xa4cf,
    0xac00 .. 0xd7a3,
    0xf900 .. 0xfaff,
    0xfe10 .. 0xfe19,
    0xfe30 .. 0xfe6f,
    0xff00 .. 0xff60,
    0xffe0 .. 0xffe6,
    0x20000 .. 0x2fffd,
    0x30000 .. 0x3fffd
  ];

  if (widespacing[0].0 <= ch && ch <= widespacing[widespacing.len - 1].1)
  {
    var lo = 0;
    var hi = widespacing.len;

    while (hi > lo)
    {
      var mid = (lo + hi) / 2;

      if (ch > widespacing[mid].1)
        lo = mid + 1;
      else if (ch < widespacing[mid].0)
        hi = mid;
      else
        return true;
    }
  }

  return false;
}
