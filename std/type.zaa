//
// std type manipulation
//

pub using max_align_t = u64;

pub using void_t<...T> = void;
pub using identity_t<T> = T;
pub extern fn declval<T>() -> T;

pub const fn is_same<T, U>() -> bool
{
  return __is_same<T, U>();
}

pub const fn is_const<T>() -> bool
{
  return __is_const<T>();
}

pub const fn is_const<T>(T &&v) -> bool
{
  return __is_const<typeof(v)>();
}

pub const fn is_rvalue<T>() -> bool
{
  return __is_rvalue<T>();
}

pub const fn is_rvalue<T>(T &&v) -> bool
{
  return __is_rvalue<typeof(v)>();
}

pub const fn is_match<T, U>() -> bool
{
  return __is_match<T, U>();
}

pub const fn is_array<T>() -> bool
{
  return __is_array<T>();
}

pub const fn array_len<T>() -> usize
{
  return __array_len<T>();
}

pub const fn is_tuple<T>() -> bool
{
  return __is_tuple<T>();
}

pub const fn tuple_len<T>() -> usize
{
  return __tuple_len<T>();
}

pub const fn is_integral<T>() -> bool
{
  return __is_integral<T>();
}

pub const fn is_unsigned<T>() -> bool
  where __is_integral<T>
{
  return __is_unsigned<T>();
}

pub const fn is_floating_point<T>() -> bool
{
  return __is_floating_point<T>();
}

pub const fn is_arithmetic<T>() -> bool
{
  return __is_arithmetic<T>();
}

pub fn as_const<T>(T &v) -> T&
{
  return &v;
}

struct add_const_t<T>
{
  using type = T const;
}

pub using add_const<T> = add_const_t<T>::type;

struct remove_const_t<T>
{
  using type = typeof(*declval<typeof(declval<T>) mut &>);
}

pub using remove_const<T> = remove_const_t<T>::type;

pub const fn is_pointer<T>() -> bool
{
  return __is_pointer<T>();
}

pub const fn is_reference<T>() -> bool
{
  return __is_reference<T>();
}

struct add_pointer_t<T>
{
  using type = T *;
}

pub using add_pointer<T> = add_pointer_t<T>::type;

struct add_mut_pointer_t<T>
{
  using type = T mut *;
}

pub using add_mut_pointer<T> = add_mut_pointer_t<T>::type;

struct remove_pointer_t<T>
{
  #if __is_pointer<T>
    using type = typeof(*declval<T>);
  #else
    using type = T;
  #end
}

pub using remove_pointer<T> = remove_pointer_t<T>::type;

struct add_reference_t<T>
{
  using type = T &;
}

pub using add_reference<T> = add_reference_t<T>::type;

struct add_mut_reference_t<T>
{
  using type = T mut &;
}

pub using add_mut_reference<T> = add_mut_reference_t<T>::type;

struct remove_reference_t<T>
{
  #if __is_reference<T>
    using type = typeof(*declval<T>);
  #else
    using type = T;
  #end
}

pub using remove_reference<T> = remove_reference_t<T>::type;

struct decay_t<T>
{
  using type = remove_const<remove_reference<T>>;
}

pub using decay<T> = decay_t<T>::type;

struct make_unsigned_t<T>
{
  #if (__is_same<T, i8>)
    using type = u8;
  #else if (__is_same<T, i16>)
    using type = u16;
  #else if (__is_same<T, i32>)
    using type = u32;
  #else if (__is_same<T, i64>)
    using type = u64;
  #else if (__is_same<T, isize>)
    using type = usize;
  #end
}

pub using make_unsigned<T> = make_unsigned_t<T>::type;
