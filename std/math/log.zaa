//
// std math log
//

import std.math;
import std.numeric;

pub const fn ln(#int x)
  where x == 2
{
  return std::Ln2;
}

pub const fn ln<T>(T x) -> T
  where __is_floating_point<T>
{
  // BSD-3
  // https://golang.org/src/math/log.go

  using std;

  const Ln2Hi = 6.93147180369123816490e-01; /* 3fe62e42 fee00000 */
  const Ln2Lo = 1.90821492927058770002e-10; /* 3dea39ef 35793c76 */
  const L1    = 6.666666666666735130e-01;   /* 3FE55555 55555593 */
  const L2    = 3.999999999940941908e-01;   /* 3FD99999 9997FA04 */
  const L3    = 2.857142874366239149e-01;   /* 3FD24924 94229359 */
  const L4    = 2.222219843214978396e-01;   /* 3FCC71C5 1D8E78AF */
  const L5    = 1.818357216161805012e-01;   /* 3FC74664 96CB03DE */
  const L6    = 1.531383769920937332e-01;   /* 3FC39A09 D078C69F */
  const L7    = 1.479819860511658591e-01;   /* 3FC2F112 DF3E5244 */

  if (is_nan(x) || is_infinite(x))
    return x;

  if (x < 0.0)
    return NaN;

  if (x == 0.0)
    return Infinity;

  let xa = __frexp(x);
  var f1 = xa.0;
  var ki = xa.1;

  if (f1 < Sqrt2/2.0)
  {
    f1 *= 2.0;
    ki -= 1;
  }

  var f = f1 - 1.0;
  var k = cast<T>(ki);

  let s = f / (2.0 + f);
  let s2 = s * s;
  let s4 = s2 * s2;
  let t1 = s2 * (L1 + s4*(L3 + s4*(L5 + s4*L7)));
  let t2 = s4 * (L2 + s4*(L4 + s4*L6));
  let r = t1 + t2;
  let hfsq = 0.5 * f * f;

  return k*Ln2Hi - ((hfsq - (s*(hfsq + r) + k*Ln2Lo)) - f);
}

pub const fn log<T>(T x, T base) -> T
  where __is_floating_point<T>
{
  return ln(x) / ln(base);
}

pub const fn log2<T>(T x) -> T
  where __is_floating_point<T>
{
  using std;

  let xa = __frexp(x);

  if (xa.0 == 0.5)
    return cast<T>(xa.1 - 1);

  return ln(xa.0) * Log2E + cast<T>(xa.1);
}

pub const fn ceil_log2<T>(T x) -> T
  where __is_integral<T>
{
  return cast<T>(64 - __clz(cast<u64>(x - 1)));
}

pub const fn floor_log2<T>(T x) -> T
  where __is_integral<T>
{
  return cast<T>(63 - __clz(cast<u64>(x)));
}

pub const fn log10<T>(T x) -> T
  where __is_floating_point<T>
{
  using std;

  switch (std::bit_cast<u64>(cast<f64>(x)))
  {
    case 0x4024000000000000: return 1.0;
    case 0x4059000000000000: return 2.0;
    case 0x408f400000000000: return 3.0;
    case 0x40c3880000000000: return 4.0;
    case 0x40f86a0000000000: return 5.0;
    case 0x412e848000000000: return 6.0;
    case 0x416312d000000000: return 7.0;
    case 0x4197d78400000000: return 8.0;
    case 0x41cdcd6500000000: return 9.0;
    case 0x4202a05f20000000: return 10.0;
    case 0x42374876e8000000: return 11.0;
    case 0x426d1a94a2000000: return 12.0;
    case 0x42a2309ce5400000: return 13.0;
    case 0x42d6bcc41e900000: return 14.0;
    case 0x430c6bf526340000: return 15.0;
    case 0x4341c37937e08000: return 16.0;
  }

  return ln(x) * Log10E;
}

pub const fn floor_log10<T>(T x) -> T
  where __is_integral<T>
{
  var kappa = 0;

  #if (sizeof<T> > 4)
  {
    if (x >= 10_000_000_000)
    {
      x /= 10_000_000_000;

      kappa += 10;
    }
  }

  #if (sizeof<T> > 2)
  {
    if (x >= 100_000)
    {
      x /= 100_000;

      kappa += 5;
    }
  }

  return kappa + cast<T>((((cast<u32>(x) + 393206) & (cast<u32>(x) + 524188)) ^ ((cast<u32>(x) + 916504) & (cast<u32>(x) + 514288))) >> 17);
}
