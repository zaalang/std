//
// std math tan
//

import std.math;

pub const fn tan<T>(T x) -> T
  where __is_floating_point<T>
{
  // BSD-3
  // https://golang.org/src/math/tan.go

  using std;

  const PI4A = 7.85398125648498535156e-1;
  const PI4B = 3.77489470793079817668e-8;
  const PI4C = 2.69515142907905952645e-15;

  const P = [ -1.30936939181383777646e4, 1.15351664838587416140e6, -1.79565251976484877988e7 ];
  const Q = [ 1.00000000000000000000e0,	1.36812963470692954678e4, -1.32089234440210967447e6, 2.50083801823357915839e7, -5.38695755929454629881e7 ];

  const Threshold = __is_same<T, f32> ? 1e-4 : 1e-14;

  if (x == 0.0 || is_nan(x))
    return x;

  if (is_infinite(x))
    return NaN;

  var sign = false;

  if (x < 0.0)
  {
    x = -x;
    sign = true;
  }

  var j = cast<u64>(x * (4.0 / PI));

  if (j & 1 == 1)
    ++j;

  var y = cast<T>(j);
  var z = ((x - y*PI4A) - y*PI4B) - y*PI4C;
  var zz = z * z;

  if (zz > Threshold)
    y = z + z * (zz * poly(zz, P) / poly(zz, Q));
  else
    y = z;

  if (j & 2 == 2)
    y = -1.0 / y;

  return sign ? -y : y;
}

fn poly<T>(T x, T[3] a) -> T
{
  return ((a[0]*x) + a[1])*x + a[2];
}

fn poly<T>(T x, T[5] a) -> T
{
  return ((((a[0]*x) + a[1])*x + a[2])*x + a[3])*x + a[4];
}
