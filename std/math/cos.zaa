//
// std math cos
//

import std.math;

pub const fn cos<T>(T x) -> T
  where __is_floating_point<T>
{
  // BSD-3
  // https://golang.org/src/math/cos.go

  using std;

  const PI4A = 7.85398125648498535156e-1;
  const PI4B = 3.77489470793079817668e-8;
  const PI4C = 2.69515142907905952645e-15;

  const SIN = [ 1.58962301576546568060e-10, -2.50507477628578072866e-8, 2.75573136213857245213e-6, -1.98412698295895385996e-4, 8.33333333332211858878e-3, -1.66666666666666307295e-1 ];
  const COS = [ -1.13585365213876817300e-11, 2.08757008419747316778e-9, -2.75573141792967388112e-7, 2.48015872888517045348e-5, -1.38888888888730564116e-3, 4.16666666666665929218e-2 ];

  if (is_nan(x) || is_infinite(x))
    return NaN;

  var sign = false;

  if (x < 0.0)
  {
    x = -x;
  }

  var j = cast<u64>(x * (4.0 / PI));

  if (j & 1 == 1)
    ++j;

  var y = cast<T>(j);
  var z = ((x - y*PI4A) - y*PI4B) - y*PI4C;

  j &= 7;

  if (j > 3)
  {
    j -= 4;
    sign = !sign;
  }

  if (j > 1)
  {
    sign = !sign;
  }

  var zz = z * z;

  if (j == 1 || j == 2)
    y = z + z * zz * poly(zz, SIN);
  else
    y = 1.0 - 0.5*zz + zz * zz * poly(zz, COS);

  return sign ? -y : y;
}

fn poly<T>(T x, T[6] a) -> T
{
  return (((((a[0]*x) + a[1])*x + a[2])*x + a[3])*x + a[4])*x + a[5];
}
