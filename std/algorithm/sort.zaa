//
// std algorithm sort
//

import std.algorithm;
import std.range : Iterator, BidirectionalIterator, RandomAccessIterator, Sentinal, Range;

pub fn is_sorted_until<T, I, Cmp>(Range<T> &range, I last, Cmp &cmp = std::less) -> I
{
  var first = range.begin;

  if (first != last)
  {
    var next = first;
    while (++next != last)
    {
      if (cmp(range[next], range[first]))
        return next;

      first = next;
    }
  }

  return last;
}

pub fn is_sorted<T, Cmp>(Range<T> &range, Cmp &cmp = std::less) -> bool
{
  return is_sorted_until(range, range.end, cmp) == range.end;
}

pub fn sort<T, Cmp>(Range<T> mut &range, Cmp &cmp = std::less) -> void
{
  var first = range.begin;

  for(var i = first, var last = range.end; i != last; ++i)
  {
    for(var j = first; j != i; ++j)
    {
      if (cmp(range[i], range[j]))
        std::swap(&mut range[i], &mut range[j]);
    }
  }
}

pub fn partial_sort<T, I, Cmp>(Range<T> mut &range, I middle, Cmp &cmp = std::less) -> void
{
  var first = range.begin;

  if (first == middle)
    return;

  var subrange = std::subrange(range, first, middle);

  std::heapify(&mut subrange, cmp);

  for(var i = middle, var end = range.end; i != end; ++i)
  {
    if (cmp(range[i], range[first]))
    {
      std::swap(&mut range[i], &mut range[first]);

      std::sift_down_heap(&mut subrange, cmp);
    }
  }

  std::sort_heap(&mut subrange, cmp);
}

#[lifetime(depend(range))]
pub fn sort!<T, Cmp>(Range<T> mut &range, Cmp &cmp = std::less)
{
  sort(&mut range, cmp);

  return &range;
}

#[lifetime(depend(range))]
pub fn partial_sort!<T, I, Cmp>(Range<T> mut &range, I middle, Cmp &cmp = std::less)
{
  partial_sort(&mut range, middle, cmp);

  return &range;
}
