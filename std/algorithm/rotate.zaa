//
// std algorithm rotate
//

import std.algorithm;
import std.range : Iterator, BidirectionalIterator, RandomAccessIterator, Sentinal, Range;

#[unsafe]
pub fn rotate_left<I>(I first, Sentinal<I> last) -> I
{
  if (first == last)
    return first;

  var tmp = &move *first;
  var lm1 = std::move(first, last, std::next(first), last);
  *lm1 = &move tmp;

  return lm1;
}

#[safe]
#[lifetime(repose(first, range), repose(last, range), depend(range))]
pub fn rotate_left<T, I>(Range<T> mut &range, I first, Sentinal<I> last) -> I
{
  if (first == last)
    return first;

  var tmp = &move range[first];

  for (var src = std::next(first); src != last; )
  {
    range[first++] = &move range[src++];
  }

  range[first] = &move tmp;

  return first;
}

#[lifetime(depend(range))]
pub fn rotate_left!<T>(Range<T> mut &range)
{
  rotate_left(&mut range, range.begin, range.end);

  return &range;
}

#[unsafe]
pub fn rotate_right<I>(I first, I last) -> I
  where __is_match<BidirectionalIterator, I>()
{
  if (first == last)
    return last;

  var lm1 = std::prev(last);
  var tmp = &move *lm1;
  var fp1 = std::move_backward(first, last, first, lm1);
  *first = &move tmp;

  return fp1;
}

#[safe]
#[lifetime(repose(first, range), repose(last, range), depend(range))]
pub fn rotate_right<T, I>(Range<T> mut &range, I first, I last) -> I
  where __is_match<BidirectionalIterator, I>()
{
  if (first == last)
    return last;

  var src = std::prev(last);
  var tmp = &move range[src];

  for (; src != first; )
  {
    range[--last] = &move range[--src];
  }

  range[first] = &move tmp;

  return last;
}

#[lifetime(depend(range))]
pub fn rotate_right!<T>(Range<T> mut &range)
{
  rotate_right(&mut range, range.begin, range.end);

  return &range;
}

#[lifetime(repose(first, range), repose(middle, range), repose(last, range), depend(range))]
pub fn rotate<T, I>(Range<T> mut &range, I first, I middle, Sentinal<I> last) -> I
{
  if (first == middle)
    return std::next(first, ~0, last);

  if (middle == last)
    return first;

  for (var it = middle;; )
  {
    std::swap(&mut range[first++], &mut range[it++]);

    if (it == last)
      break;

    if (first == middle)
      middle = it;
  }

  if (first != middle)
  {
    var first = first;

    for (var it = middle;; )
    {
      std::swap(&mut range[first++], &mut range[it++]);

      if (it == last)
      {
        if (first == middle)
          break;

        it = middle;
      }

      if (first == middle)
        middle = it;
    }
  }

  return first;
}

#[lifetime(repose(middle, range), depend(range))]
pub fn rotate!<T, I>(Range<T> mut &range, I middle)
{
  rotate(&mut range, range.begin, middle, range.end);

  return &range;
}
