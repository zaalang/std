//
// std algorithm permutations
//

import std.algorithm;
import std.range : Iterator, BidirectionalIterator, RandomAccessIterator, Sentinal, Range;

#[lifetime(repose(first, range), repose(last, range))]
pub fn next_permutation<T, I, Cmp>(Range<T> mut &range, I first, I last, Cmp &cmp = std::less) -> bool
{
  if (first == last)
    return false;

  var i = last;

  if (first == --i)
    return false;

  for (;;)
  {
    var i1 = i;

    if (cmp(range[--i], range[i1]))
    {
      var j = last;
      while (!cmp(range[i], range[--j]))
        ;

      std::swap(&mut range[i], &mut range[j]);

      std::reverse(&mut range, i1, last);

      return true;
    }

    if (i == first)
      break;
  }

  std::reverse(&mut range, first, last);

  return false;
}

pub fn next_permutation<T, Cmp>(Range<T> mut &range, Cmp &cmp = std::less) -> bool
{
  return next_permutation(&mut range, range.begin, range.end, cmp);
}

#[lifetime(repose(first, range), repose(middle, range), repose(last, range))]
pub fn next_partial_permutation<T, I, Cmp>(Range<T> mut &range, I first, I middle, I last, Cmp &cmp = std::less) -> bool
{
  std::reverse(&mut range, middle, last);

  return next_permutation(&mut range, first, last, cmp);
}

#[lifetime(repose(middle, range))]
pub fn next_partial_permutation<T, I, Cmp>(Range<T> mut &range, I middle, Cmp &cmp = std::less) -> bool
{
  return next_partial_permutation(&mut range, range.begin, middle, range.end, cmp);
}

#[lifetime(repose(first, range), repose(middle, range), repose(last, range))]
pub fn next_combination<T, I, Cmp>(Range<T> mut &range, I first, I middle, I last, Cmp &cmp = std::less) -> bool
{
  if (first == middle || middle == last)
    return false;

  var i = first;

  if (++i == last)
    return false;

  i = middle;

  for (;;)
  {
    if (i == first)
      break;

    var i1 = last;

    if (cmp(range[--i], range[--i1]))
    {
      var j = middle;
      while (!cmp(range[i], range[j]))
        ++j;

      std::swap(&mut range[i], &mut range[j]);

      if (++i != middle && ++j != last)
      {
        std::rotate(&mut range, i, j, last);

        i1 = middle;
        for (; j != last; ++j)
          ++i1;

        std::rotate(&mut range, middle, i1, last);
      }

      return true;
    }
  }

  std::rotate(&mut range, first, middle, last);

  return false;
}

#[lifetime(repose(middle, range))]
pub fn next_combination<T, I, Cmp>(Range<T> mut &range, I middle, Cmp &cmp = std::less) -> bool
{
  return next_combination(&mut range, range.begin, middle, range.end, cmp);
}
