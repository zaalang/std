//
// std map
//

import std.memory;
import std.stdlib : assert;
import std.algorithm : swap;
import std.range : Sentinal, Range;
import std.type : as_const;
import std.bits.tree as Tree;

pub struct map<K, T, Cmp = typeof(std::less), Allocator = std::allocator>
{
  pub map(Allocator &allocator = Allocator())
    : _tree(allocator)
  {
  }

  pub map(Cmp &&cmp, Allocator &allocator = Allocator())
    where requires (Cmp cmp, K i, K j) { cmp(i, j); }
    : _tree(&&cmp, allocator)
  {
  }

  pub map(map &&other, Allocator &allocator = Allocator())
    : _tree(other.cmp, allocator)
  {
    insert(this, &&other);
  }

  pub fn =(this mut &, map &&other) -> map mut &
  {
    if (&this != &other)
    {
      clear(this);

      this._tree.cmp = other.cmp;

      insert(this, &&other);
    }

    return &this;
  }

  pub fn from(Range<value_type> &&other, Allocator &allocator = Allocator()) -> map
  {
    var result = map(allocator);

    result.insert(&&other);

    return result;
  }

  pub ~map()
  {
  }

  pub fn len(this &) -> usize
  {
    return this._tree.len;
  }

  pub fn empty(this &) -> bool
  {
    return this._tree.len == 0;
  }

  pub fn cmp(this &) -> Cmp &
  {
    return &this._tree.cmp;
  }

  pub fn allocator(this &) -> Allocator &
  {
    return &this._tree.allocator;
  }

  pub struct iterator
  {
    pub iterator() = default;
    pub iterator(iterator&) = default;
    pub fn =(iterator mut &this, iterator &that) -> iterator mut & = default;
    pub ~iterator() = default;

    pub fn *(iterator &this) -> value_type &
    {
      return &cast<node_type*>(this.cursor).value;
    }

    pub fn *(iterator mut &this) -> value_type mut &
    {
      return &cast<node_type mut *>(this.cursor).value;
    }

    pub fn ++(iterator mut &this) -> iterator mut &
    {
      this.cursor = this.cursor.next;
      return &this;
    }

    pub fn --(iterator mut &this) -> iterator mut &
    {
      this.cursor = this.cursor.prev;
      return &this;
    }

    iterator(Tree::Link mut *node)
      : cursor(node)
    {
    }

    Tree::Link mut *cursor;
  }

  pub struct move_iterator
  {
    pub move_iterator() = default;
    pub move_iterator(move_iterator&) = default;
    pub fn =(move_iterator mut &this, move_iterator &that) -> move_iterator mut & = default;
    pub ~move_iterator() = default;

    pub fn *(move_iterator &this) -> value_type &
    {
      return &cast<node_type*>(this.cursor).value;
    }

    pub fn *(move_iterator mut &this) -> value_type &&
    {
      return &std::move(cast<node_type mut *>(this.cursor).value);
    }

    pub fn ++(move_iterator mut &this) -> move_iterator mut &
    {
      this.cursor = this.cursor.next;
      return &this;
    }

    pub fn --(move_iterator mut &this) -> move_iterator mut &
    {
      this.cursor = this.cursor.prev;
      return &this;
    }

    move_iterator(Tree::Link mut *node)
      : cursor(node)
    {
    }

    Tree::Link mut *cursor;
  }

  pub struct const_iterator
  {
    pub const_iterator() = default;
    pub const_iterator(const_iterator&) = default;
    pub fn =(const_iterator mut &this, const_iterator &that) -> const_iterator mut & = default;
    pub ~const_iterator() = default;

    pub const_iterator(iterator other)
      : cursor(other.cursor)
    {
    }

    pub fn *(const_iterator &this) -> value_type &
    {
      return &cast<node_type*>(this.cursor).value;
    }

    pub fn ++(const_iterator mut &this) -> const_iterator mut &
    {
      this.cursor = this.cursor.next;
      return &this;
    }

    pub fn --(const_iterator mut &this) -> const_iterator mut &
    {
      this.cursor = this.cursor.prev;
      return &this;
    }

    const_iterator(Tree::Link *node)
      : cursor(node)
    {
    }

    Tree::Link *cursor;
  }

  pub concept Iterator
  {
    requires<T> __is_same<T, iterator> || __is_same<T, move_iterator> || __is_same<T, const_iterator>;
  }

  pub fn key(Iterator &this)
  {
    return &(*this).key;
  }

  pub fn value(Iterator &&this)
  {
    return &(*this).value;
  }

  pub fn ==(Iterator &lhs, Iterator &rhs) -> bool
  {
    return lhs.cursor == rhs.cursor;
  }

  pub fn begin(this &&)
  {
    return iter(&&this, this._tree.leftmost);
  }

  pub fn end(this &&)
  {
    return iter(&&this, &this._tree.root);
  }

  pub fn lower_bound<Key>(this &&, Key &key)
    match (Key key) { K(key); }
  {
    return iter(&&this, this._tree.lower_bound(key));
  }

  pub fn upper_bound<Key>(this &&, Key &key)
    match (Key key) { K(key); }
  {
    return iter(&&this, this._tree.upper_bound(key));
  }

  pub fn equal_range<Key>(this &&, Key &key)
    match (Key key) { K(key); }
  {
    var x = this._tree.equal_range(key);

    return std::iterator_pair(iter(&&this, x.0), iter(&&this, x.1));
  }

  pub fn find<Key>(this &&, Key &key)
    match (Key key) { K(key); }
  {
    var x = lower_bound(&&this, key);

    if (x == this.end || this.cmp()(key, x.key))
      return (&&this).end;

    return x;
  }

  pub fn contains<Key>(this &, Key &key) -> bool
    match (Key key) { K(key); }
  {
    return this.find(key) != this.end;
  }

  pub fn insert(this mut &, value_type &&value) -> (iterator, bool)
  {
    var pos = this._tree.find_insert_position_unique(value.key);

    if (pos.1)
    {
      pos.0 = this._tree.insert(pos.1, &&value);
    }

    return (iterator(pos.0), !!pos.1);
  }

  pub fn insert<Key, Args>(this mut &, Key &&key, Args && ...args) -> (iterator, bool)
    match (Key key, Args args) { K(key, allocator?: std::declval<Allocator>()); T(args..., allocator?: std::declval<Allocator>()); }
  {
    var pos = this._tree.find_insert_position_unique(key);

    if (pos.1)
    {
      pos.0 = this._tree.insert(pos.1, &&key, &&args...);
    }

    return (iterator(pos.0), !!pos.1);
  }

  pub fn insert_or_assign<Key, Args>(this mut &, Key &&key, Args && ...args) -> (iterator, bool)
    match (Key key, Args args) { K(key, allocator?: std::declval<Allocator>()); T(args..., allocator?: std::declval<Allocator>()); }
  {
    var pos = this._tree.find_insert_position_unique(key);

    if (pos.1)
    {
      pos.0 = this._tree.insert(pos.1, &&key, &&args...);
    }
    else
    {
      cast<node_type mut *>(pos.0).value.value = T(&&args..., allocator?: this.allocator);
    }

    return (iterator(pos.0), !!pos.1);
  }

  pub fn insert(this mut &, Range<value_type> &&other) -> void
  {
    #if (__is_rvalue<typeof(other)> && __is_same<map, typeof(other)>)
    {
      if (this.empty)
        return this._tree.take(other._tree);

      return this.merge(other);
    }

    return this.insert((&&other).begin, (&&other).end);
  }

  pub fn insert<I>(this mut &, I first, Sentinal<I> last) -> void
    where requires (I i) { value_type(*i); }
  {
    while (first != last)
    {
      insert(this, *first++);
    }
  }

  pub fn merge(this mut &, map mut &other) -> void
  {
    assert(&this != &other);
    assert(this.allocator == other.allocator);

    for(var node = other._tree.leftmost, var end = &other._tree.root; node != end; )
    {
      var next = node.next;

      var pos = this._tree.find_insert_position_unique(cast<node_type*>(node).value.key);

      if (pos.1)
      {
        pos.0 = this._tree.splice(pos.1, other._tree.extract(node, next));
      }

      node = next;
    }
  }

  pub fn erase<Key>(this mut &, Key &key) -> usize
  {
    var x = this.find(key);

    if (x == this.end)
      return 0;

    this._tree.erase(x.cursor, x.cursor.next);

    return 1;
  }

  pub fn erase(this mut &, Iterator position) -> iterator
  {
    return iterator(this._tree.erase(position.cursor, position.cursor.next));
  }

  pub fn erase(this mut &, Iterator first, Iterator last) -> iterator
  {
    return iterator(this._tree.erase(first.cursor, last.cursor));
  }

  pub fn clear(this mut &) -> void
  {
    this._tree.clear();
  }

  fn iter(this &&, var node)
  {
    #if (__is_const<typeof(this)>)
      return const_iterator(node);

    #else if (__is_rvalue<typeof(this)>)
      return move_iterator(node);

    #else
      return iterator(node);
  }

  using tree_type = Tree::tree<K, T, Cmp, Allocator>;
  pub using value_type = Tree::tree<K, T, Cmp, Allocator>::value_type;
  using node_type = Tree::tree<K, T, Cmp, Allocator>::Node;

  tree_type _tree;
}

pub fn hash<K, T>(var &hasher, map<K, T> &map) -> usize
{
  return hasher.combine_range(map.begin, map.end);
}

pub fn erase_if<K, T, Pred>(map<K, T> mut &map, Pred &pred) -> usize
{
  var n = map.len;
  var first = map.begin;

  for (; first != map.end; )
  {
    if (pred(*first))
      first = map.erase(first);
    else
      ++first;
  }

  return n - map.len;
}
