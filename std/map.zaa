//
// std map
//

import std.memory;
import std.stdlib : assert;
import std.algorithm : swap;
import std.range : Sentinal, Range;
import std.type : as_const;
import std.bits.tree as Tree;
import std.optional;

pub struct map<K, T, Cmp = typeof(std::less), Allocator = std::allocator>
{
  pub map(Allocator &allocator = Allocator())
    : _tree(allocator)
  {
  }

  pub map(Cmp &&cmp, Allocator &allocator = Allocator())
    where requires (Cmp cmp, K i, K j) { cmp(i, j); }
    : _tree(&&cmp, allocator)
  {
  }

  pub map(map &&other, Allocator &allocator = Allocator())
    : _tree(other.cmp, allocator)
  {
    insert(&mut this, &&other);
  }

  #[lifetime(poison(this))]
  pub fn =(this mut &, map &&other) -> map mut &
  {
    if (&this != &other)
    {
      clear(&mut this);

      this._tree.cmp = other.cmp;

      insert(&mut this, &&other);
    }

    return &this;
  }

  pub fn from(Range<value_type> &&other, Allocator &allocator = Allocator()) -> map
  {
    var result = map(allocator);

    insert(&mut result, &&other);

    return result;
  }

  pub ~map()
  {
  }

  pub fn len(this &) -> usize
  {
    return this._tree.len;
  }

  pub fn empty(this &) -> bool
  {
    return this._tree.len == 0;
  }

  pub fn cmp(this &) -> Cmp &
  {
    return &this._tree.cmp;
  }

  pub fn allocator(this &) -> Allocator &
  {
    return &this._tree.allocator;
  }

  pub struct iterator
  {
    pub iterator() = default;
    pub iterator(iterator&) = default;
    pub fn =(iterator mut &this, iterator &that) -> iterator mut & = default;
    pub ~iterator() = default;

    #[lifetime(clone(this))]
    pub fn ++(iterator mut &this) -> iterator mut &
    {
      this.cursor = this.cursor.next;
      return &this;
    }

    #[lifetime(clone(this))]
    pub fn --(iterator mut &this) -> iterator mut &
    {
      this.cursor = this.cursor.prev;
      return &this;
    }

    iterator(Tree::Link *node)
      : cursor(node)
    {
    }

    Tree::Link *cursor;
  }

  pub fn ==(iterator &lhs, iterator &rhs) -> bool
  {
    return lhs.cursor == rhs.cursor;
  }

  #[lifetime(depend(this))]
  pub fn begin(this &&)
  {
    return iterator(this._tree.leftmost);
  }

  #[lifetime(depend(this))]
  pub fn end(this &&)
  {
    return iterator(&this._tree.root);
  }

  #[lifetime(depend(this))]
  pub fn [](this &&, iterator iter)
  {
    return &cast<&&typeof(this)>(cast<node_type mut *>(iter.cursor).value);
  }

  #[lifetime(depend(this))]
  pub fn []<Key>(this &&, Key &key)
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    var j = this.find(key);

    std::assert(j != this.end);

    return &this[j].value;
  }

  #[lifetime(depend(this))]
  pub fn get<Key>(this &, Key &key) -> std::optional<T&>
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    if (var j = this.find(key); j != this.end)
      return Some(&this[j].value);

    return None;
  }

  #[lifetime(depend(this))]
  pub fn get<Key>(this mut &, Key &key) -> std::optional<T mut &>
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    if (var j = this.find(key); j != this.end)
      return Some(&this[j].value);

    return None;
  }

  #[lifetime(depend(this))]
  pub fn lower_bound<Key>(this &&, Key &key)
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    return iterator(this._tree.lower_bound(key));
  }

  #[lifetime(depend(this))]
  pub fn upper_bound<Key>(this &&, Key &key)
    match (K u, Key v, Cmp cmp) { cmp(v, u); }
  {
    return iterator(this._tree.upper_bound(key));
  }

  #[lifetime(depend(this))]
  pub fn equal_range<Key>(this &&, Key &key)
    match (K u, Key v, Cmp cmp) { cmp(u, v); cmp(v, u); }
  {
    return (lower_bound(&&this, key), upper_bound(&&this, key));
  }

  #[lifetime(depend(this))]
  pub fn find<Key>(this &&, Key &key)
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    var j = lower_bound(&&this, key);

    if (j == this.end || this.cmp()(key, (&&this)[j].key))
      return this.end;

    return j;
  }

  pub fn contains<Key>(this &, Key &key) -> bool
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    return this.find(key) != this.end;
  }

  #[lifetime(depend(this))]
  pub fn insert(this mut &, value_type &&value) -> (iterator, bool)
  {
    var pos = this._tree.find_insert_position_unique(value.key);

    if (pos.1)
    {
      pos.0 = this._tree.insert(pos.1, &&value);
    }

    return (iterator(pos.0), !!pos.1);
  }

  #[lifetime(depend(this))]
  pub fn insert<Key, Args>(this mut &, Key &&key, Args && ...args) -> (iterator, bool)
    match (Key key, Args args) { K(&&key, allocator?: std::declval<Allocator>()); T(&&args..., allocator?: std::declval<Allocator>()); }
  {
    var pos = this._tree.find_insert_position_unique(key);

    if (pos.1)
    {
      pos.0 = this._tree.insert(pos.1, &&key, &&args...);
    }

    return (iterator(pos.0), !!pos.1);
  }

  #[lifetime(depend(this))]
  pub fn insert_or_assign<Key, Args>(this mut &, Key &&key, Args && ...args) -> (iterator, bool)
    match (Key key, Args args) { K(&&key, allocator?: std::declval<Allocator>()); T(&&args..., allocator?: std::declval<Allocator>()); }
  {
    var pos = this._tree.find_insert_position_unique(key);

    if (pos.1)
    {
      pos.0 = this._tree.insert(pos.1, &&key, &&args...);
    }
    else
    {
      cast<node_type mut *>(pos.0).value.value = T(&&args..., allocator?: this.allocator);
    }

    return (iterator(pos.0), !!pos.1);
  }

  pub fn insert(this mut &, Range<value_type> &&other) -> void
  {
    #if (__is_rvalue<typeof(other)> && __is_same<map, typeof(other)>)
    {
      if (this.empty)
        return this._tree.take(&mut other._tree);

      return this.merge(&mut other);
    }

    if (var first = other.begin, var last = other.end; first != last)
    {
      while (first != last)
      {
        insert(&mut this, (&&other)[first++]);
      }
    }
  }

  pub fn insert<I>(this mut &, I first, Sentinal<I> last) -> void
    where requires (I i) { value_type(*i); }
  {
    while (first != last)
    {
      insert(&mut this, *first++);
    }
  }

  #[lifetime(poison(this), depend(this))]
  pub fn emplace<Key, Args>(this mut &, Key &&key, Args && ...args) -> T mut &
    match (Key key, Args args) { K(&&key, allocator?: std::declval<Allocator>()); T(&&args..., allocator?: std::declval<Allocator>()); }
  {
    return &this[insert(&mut this, &&key, &&args...).0].value;
  }

  #[lifetime(consume(other))]
  pub fn merge(this mut &, map mut &other) -> void
  {
    assert(&this != &other);
    assert(this.allocator == other.allocator);

    for(var node = other._tree.leftmost, var end = &other._tree.root; node != end; )
    {
      var next = node.next;

      var pos = this._tree.find_insert_position_unique(cast<node_type*>(node).value.key);

      if (pos.1)
      {
        pos.0 = this._tree.splice(pos.1, other._tree.extract(node, next));
      }

      node = next;
    }
  }

  #[lifetime(poison(this))]
  pub fn erase<Key>(this mut &, Key &key) -> usize
  {
    var j = this.find(key);

    if (j == this.end)
      return 0;

    this._tree.erase(j.cursor, j.cursor.next);

    return 1;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn erase(this mut &, iterator position) -> iterator
  {
    return iterator(this._tree.erase(position.cursor, position.cursor.next));
  }

  #[lifetime(poison(this), depend(this))]
  pub fn erase(this mut &, iterator first, iterator last) -> iterator
  {
    return iterator(this._tree.erase(first.cursor, last.cursor));
  }

  #[lifetime(poison(this))]
  pub fn take(this mut &, iterator first, iterator last) -> map
  {
    var result = map::from(std::moveable_range_view(&mut this, first, last), this.allocator);

    erase(&mut this, first, last);

    return result;
  }

  #[lifetime(launder(this), poison(this))]
  pub fn clear(this mut &) -> void
  {
    this._tree.clear();
  }

  using tree_type = Tree::tree<K, T, Cmp, Allocator>;
  pub using value_type = Tree::tree<K, T, Cmp, Allocator>::value_type;
  using node_type = Tree::tree<K, T, Cmp, Allocator>::Node;

  tree_type _tree;
}

pub fn hash<K, T>(var &hasher, map<K, T> &map) -> usize
{
  return hasher.combine_range(map, map.begin, map.end);
}

#[lifetime(poison(map))]
pub fn erase_if<K, T, Pred>(map<K, T> mut &map, Pred &pred) -> usize
{
  var n = map.len;
  var first = map.begin;

  for (; first != map.end; )
  {
    if (pred(map[first]))
      first = map.erase(first);
    else
      ++first;
  }

  return n - map.len;
}
