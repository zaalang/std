//
// std meta
//

import std.stdio : assert;

pub struct meta
{
  pub using declid = typeof(__decl__);
  pub using typeid = typeof($int);

  pub enum DeclKind : u64
  {
    TranslationUnit,
    Module,
    Function,
    DeclScoped,
    DeclRef,
    TypeName,
    TypeOf,
    Import,
    Using,
    TypeAlias,
    TypeArg,
    IdentPattern,
    TuplePattern,
    VoidVar,
    StmtVar,
    ParmVar,
    Struct,
    Union,
    VTable,
    Lambda,
    ThisVar,
    FieldVar,
    ErrorVar,
    LambdaVar,
    Initialiser,
    Case,
    CaseVar,
    Concept,
    Requires,
    Enum,
    EnumConstant,
    Attribute,
    Run,
    If,
  }

  enum DeclFlags
  {
    const public = 0x01;
  }

  enum TypeQuery
  {
    const add_const = 0xcd;
    const remove_const = 0x95;
    const add_pointer = 0xfa;
    const remove_pointer = 0x73;
    const add_reference = 0xeb;
    const remove_reference = 0xfc;
    const return_type = 0xc8;
    const parameters_type = 0x93;
    const tuple_append = 0xe4;
  }

  pub const fn kind_of(declid decl)
  {
    return cast<DeclKind>(__decl_kind(decl));
  }

  pub const fn name_of(declid decl)
  {
    return __decl_name(decl);
  }

  pub const fn parent_of(declid decl)
  {
    return __decl_parent(decl);
  }

  pub const fn children_of(declid decl, DeclKind filter = cast(0))
  {
    return __decl_children(decl, cast(filter));
  }

  pub const fn name_of(typeid type)
  {
    return __type_name(type);
  }

  pub const fn children_of(typeid type, DeclKind filter = cast(0))
  {
    return __type_children(type, cast(filter));
  }

  pub const fn fields_of(typeid type)
  {
    return __type_children(type, cast(DeclKind::FieldVar));
  }

  pub const fn enumerators_of(typeid type)
  {
    return __type_children(type, cast(DeclKind::EnumConstant));
  }

  pub const fn is_public(declid decl) -> bool
  {
    return __decl_flags(decl) & DeclFlags::public == DeclFlags::public;
  }

  pub const fn is_enumerator(declid decl) -> bool
  {
    return kind_of(decl) == DeclKind::EnumConstant;
  }

  pub const fn is_const(typeid type) -> bool
  {
    return __type_query(TypeQuery::remove_const, type) != type;
  }

  pub const fn add_const(typeid type) -> typeid
  {
    return __type_query(TypeQuery::add_const, type);
  }

  pub const fn remove_const(typeid type) -> typeid
  {
    return __type_query(TypeQuery::remove_const, type);
  }

  pub const fn is_pointer(typeid type) -> bool
  {
    return __type_query(TypeQuery::remove_pointer, type) != type;
  }

  pub const fn add_pointer(typeid type) -> typeid
  {
    return __type_query(TypeQuery::add_pointer, type);
  }

  pub const fn remove_pointer(typeid type) -> typeid
  {
    return __type_query(TypeQuery::remove_pointer, type);
  }

  pub const fn is_reference(typeid type) -> bool
  {
    return __type_query(TypeQuery::remove_reference, type) != type;
  }

  pub const fn add_reference(typeid type) -> typeid
  {
    return __type_query(TypeQuery::add_reference, type);
  }

  pub const fn remove_reference(typeid type) -> typeid
  {
    return __type_query(TypeQuery::remove_reference, type);
  }

  pub const fn return_type(declid decl) -> typeid
  {
    return __type_query(TypeQuery::return_type, decl);
  }

  pub const fn parameters_type(declid decl) -> typeid
  {
    return __type_query(TypeQuery::parameters_type, decl);
  }

  pub const fn decay(typeid type) -> typeid
  {
    return remove_const(remove_reference(type));
  }

  pub const fn tuple_append(typeid tuple, typeid type) -> typeid
  {
    return __type_query(TypeQuery::tuple_append, tuple, type);
  }

  pub const fn enumerator_name<T>(T value)
  {
    switch (value)
    {
      #{
        #for(const k : std::meta::enumerators_of($T))
        {
          -> { case $(T::#k): return $(std::meta::name_of(k)); }
        }
      }
    }

    return "unknown";
  }
}
