//
// std tuple
//

import std.stdlib;

pub using tuple<...T> = T;

pub fn tuple<T>(T&& ...elements) -> T
{
  return T(&&elements...);
}

//pub const fn tuple<T>(#T ...elements) -> T
//{
//  return elements;
//}
//
//pub const fn tuple<...T>(#T ...elements) -> T
//{
//  return elements;
//}

pub fn tie<T>(T&& ...elements)
  where !is_any_rvalue<typeof(elements)>
{
  return elements;
}

pub fn fwd_as_tuple<T>(T&& ...elements)
{
  return elements;
}

pub const fn is_any_rvalue<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 0; k < __tuple_len<T>; ++k)
    if (__is_rvalue<typeof(T::#k)>())
      return true;

  return false;
}

pub const fn is_all_rvalue<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 0; k < __tuple_len<T>; ++k)
    if (!__is_rvalue<typeof(T::#k)>())
      return false;

  return true;
}

pub const fn is_any_const<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 0; k < __tuple_len<T>; ++k)
    if (__is_const<typeof(T::#k)>())
      return true;

  return false;
}

pub const fn is_all_const<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 0; k < __tuple_len<T>; ++k)
    if (!__is_const<typeof(T::#k)>())
      return false;

  return true;
}

pub const fn is_all_same<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 1; k < __tuple_len<T>; ++k)
    if (!__is_same<typeof(T::#k), typeof(T::0)>())
      return false;

  return true;
}

pub fn tuple_tail<T>(T &&tuple)
  where __tuple_len<T> != 0
{
  fn tail<U, V>(U &&, V && ...v)
  {
    return v;
  }

  return std::tuple(&&tail(&&tuple...)...);
}

//fn tuple_cat<U, V>(U &&u, V &&v) -> (U..., V...)
//{
//  return std::tuple(&&u..., &&v...);
//}

pub fn tuple_cat<Ts>(Ts && ...tuples)
{
  fn concat<U, V>(U &&u, V &&v)
  {
    fn tie<V>(V && ...v)
    {
      return v;
    }

    fn tail<U, V>(U &&, V && ...v)
    {
      return v;
    }

    #if (__tuple_len<V> == 1)
      return tie(&&u..., &&v.0...);
    #else
      return concat(tie(&&u..., &&v.0...), tail(&&v...));
  }

  #if (__tuple_len<Ts> == 0)
    return std::tuple();
  #else
    return std::tuple(&&concat(std::tuple(), tuples)...);
}
