//
// std tuple
//

import std.stdlib : assert;

pub using tuple<...T> = T;

pub fn tuple<T>(T && ...elements) -> T
{
  return T(&&elements...);
}

//pub const fn tuple<T>(#T ...elements) -> T
//{
//  return elements;
//}
//
//pub const fn tuple<...T>(#T ...elements) -> T
//{
//  return elements;
//}

pub fn tie<T>(T && ...elements)
  where !is_any_rvalue<typeof(elements)>
{
  return elements;
}

pub fn fwd_as_tuple<T>(T && ...elements)
{
  return elements;
}

pub const fn is_any_rvalue<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 0; k < __tuple_len<T>; ++k)
    if (__is_rvalue<typeof(T::#k)>())
      return true;

  return false;
}

pub const fn is_all_rvalue<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 0; k < __tuple_len<T>; ++k)
    if (!__is_rvalue<typeof(T::#k)>())
      return false;

  return true;
}

pub const fn is_any_const<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 0; k < __tuple_len<T>; ++k)
    if (__is_const<typeof(T::#k)>())
      return true;

  return false;
}

pub const fn is_all_const<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 0; k < __tuple_len<T>; ++k)
    if (!__is_const<typeof(T::#k)>())
      return false;

  return true;
}

pub const fn is_all_same<T>() -> bool
  where __is_tuple<T>
{
  #for(const k = 1; k < __tuple_len<T>; ++k)
    if (!__is_same<typeof(T::#k), typeof(T::0)>())
      return false;

  return true;
}

pub fn tuple_cat<Ts>(Ts && ...tuples)
{
  return std::tuple(((&&tuples)...)...);
}

pub const fn tuple_iota<T>(#T value, #T bound)
{
  #if (value >= bound)
    return std::tuple();

  return std::tuple(value, tuple_iota(value + 1, bound)...);
}

pub fn tuple_select<T>(T &&tuple, #var ...indices)
{
  return std::tuple((&&tuple.#indices)...);
}

pub fn tuple_subset<T>(T &&tuple, #(usize, usize) range)
{
  return tuple_select(&&tuple, tuple_iota(range.0, range.1)...);
}

pub fn tuple_subset<T>(T &&tuple, #(usize, usize, void) range)
{
  return tuple_select(&&tuple, tuple_iota(range.0, range.1 + 1)...);
}

pub fn tuple_tail<T>(T &&tuple)
  where __tuple_len<T> != 0
{
  return tuple_select(&&tuple, tuple_iota(1, __tuple_len<T>)...);
}
