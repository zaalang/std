//
// std env
//

import std.stdio : assert;
import std.iterator;
import std.string;
import std.memory;

pub struct env
{
  struct args
  {
    pub struct iterator
    {
      iterator() = default;
      iterator(iterator&) = default;
      fn =(iterator mut &this, iterator &that) -> iterator mut & = default;
      ~iterator() = default;

      iterator(u8 **arg)
        : cursor(arg)
      {
      }

      fn *(iterator &this) -> std::string_view
      {
        return std::string_view(*this.cursor, std::memchr(*this.cursor, 0, 4096));
      }

      fn ++(iterator mut &this) -> iterator mut &
      {
        ++this.cursor;
        return &this;
      }

      fn --(iterator mut &this) -> iterator mut &
      {
        --this.cursor;
        return &this;
      }

      fn ==(iterator this, iterator that) -> bool
      {
        return this.cursor == that.cursor;
      }

      fn -(iterator lhs, iterator rhs) -> usize
      {
        return lhs.cursor - rhs.cursor;
      }

      fn +(iterator lhs, usize rhs) -> iterator
      {
        return iterator(lhs.cursor + rhs);
      }

      u8 **cursor;
    }

    pub fn len(this &) -> usize
    {
      return cast<usize>(__argc__);
    }

    pub fn begin(this &) -> iterator
    {
      return iterator(__argv__);
    }

    pub fn end(this &) -> iterator
    {
      return iterator(__argv__ + this.len);
    }

    pub fn [](this &, usize index) -> std::string_view
    {
      assert(index < this.len);

      return *(this.begin + index);
    }

    pub fn [](this &, (usize, usize) range) -> std::iterator_pair<iterator, iterator>
    {
      assert(range.0 <= range.1 && range.0 <= this.len && range.1 <= this.len);

      return std::iterator_pair(this.begin + range.0, this.begin + range.1);
    }

    args() = default;
    ~args() = default;
  }

  struct vars
  {
    pub struct iterator
    {
      iterator() = default;
      iterator(iterator&) = default;
      fn =(iterator mut &this, iterator &that) -> iterator mut & = default;
      ~iterator() = default;

      iterator(u8 **arg)
        : cursor(arg)
      {
      }

      fn *(iterator &this) -> std::string_view
      {
        return std::string_view(*this.cursor, std::memchr(*this.cursor, 0, 4096));
      }

      fn ++(iterator mut &this) -> iterator mut &
      {
        ++this.cursor;
        return &this;
      }

      fn ==(iterator lhs, iterator rhs) -> bool
      {
        return lhs.cursor == rhs.cursor;
      }

      fn ==(iterator lhs, end_iterator rhs) -> bool
      {
        return *lhs.cursor == null;
      }

      u8 **cursor;
    }

    pub struct end_iterator
    {
      end_iterator() = default;
      end_iterator(end_iterator&) = default;
      fn =(end_iterator mut &this, end_iterator &that) -> end_iterator mut & = default;
      ~end_iterator() = default;
    }

    pub fn begin(this &) -> iterator
    {
      return iterator(__envp__);
    }

    pub fn end(this &) -> end_iterator
    {
      return end_iterator();
    }

    vars() = default;
    ~vars() = default;
  }
}
