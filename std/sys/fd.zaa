//
// std sys fd
//

import std.error;
import std.string : String;

pub const STDIN = 0;
pub const STDOUT = 1;
pub const STDERR = 2;

pub enum filetype
{
  pub const unknown = 0;
  pub const block_device = 1;
  pub const character_device = 2;
  pub const directory = 3;
  pub const regular = 4;
  pub const socket_dgram = 5;
  pub const socket_stream = 6;
  pub const symlink = 7;
}

pub struct filestat
{
  pub u8 type;
  pub u64 size;
  pub u64 atime;
  pub u64 mtime;
  pub u64 ctime;

  pub filestat() = default;
  pub filestat(filestat&) = default;
  pub fn =(filestat mut &, filestat &) -> filestat mut & = default;
  pub ~filestat() = default;
}

pub struct iovec
{
  pub u8 mut *data;
  pub usize len;

  pub iovec() = default;
  pub iovec(iovec&) = default;
  pub fn =(iovec mut &, iovec &) -> iovec mut & = default;
  pub ~iovec() = default;
}

pub struct ciovec
{
  pub u8 *data;
  pub usize len;

  pub ciovec() = default;
  pub ciovec(ciovec&) = default;
  pub fn =(ciovec mut &, ciovec &) -> ciovec mut & = default;
  pub ~ciovec() = default;
}

struct string
{
  u8 *data;
  usize len;

  string(u8 *data, usize len)
    : data(data), len(len)
  {
  }

  ~string() = default;
}

pub struct fd_result
{
  pub u32 errno;
  pub usize length;

  pub fd_result() = default;
  pub fd_result(fd_result&) = default;
  pub ~fd_result() = default;
}

extern fn fd_open(uintptr mut *fd, string path, u32 oflags, u64 rights, u32 fdflags) -> u32;
extern fn fd_stat(uintptr fd, filestat *fs) -> u32;
extern fn fd_read(uintptr fd, u8 mut *buffer, usize length) -> fd_result;
extern fn fd_readv(uintptr fd, iovec mut *iovs, usize n) -> fd_result;
extern fn fd_preadv(uintptr fd, iovec mut *iovs, usize n, u64 offset) -> fd_result;
extern fn fd_write(uintptr fd, u8 *buffer, usize length) -> fd_result;
extern fn fd_writev(uintptr fd, ciovec *iovs, usize n) -> fd_result;
extern fn fd_pwritev(uintptr fd, ciovec *iovs, usize n, u64 offset) -> fd_result;
extern fn fd_close(uintptr fd) -> u32;

pub struct fd
{ 
  pub enum oflags
  {
    open = 0x0,
    create = 0x01,
    exclusive = 0x02,
    trunc = 0x04,

    pub const fn |(oflags lhs, oflags rhs) -> oflags { return cast<oflags>(cast<isize>(lhs) | cast<isize>(rhs)); }
  }

  pub enum rights
  {
    read = 0x01,
    write = 0x02,

    pub const fn |(rights lhs, rights rhs) -> rights { return cast<rights>(cast<isize>(lhs) | cast<isize>(rhs)); }
  }

  pub enum fdflags
  {
    append = 0x01,
    dsync = 0x02,
    nonblock = 0x04,
    rsync = 0x08,
    sync = 0x10,

    pub const fn |(fdflags lhs, fdflags rhs) -> fdflags { return cast<fdflags>(cast<isize>(lhs) | cast<isize>(rhs)); }
  }

  pub fn open(String &path, oflags oflags, rights rights, fdflags fdflags = cast(0)) throws(std::error) -> fd
  {
    var handle = fd(0);
    var result = fd_open(&handle.fd, string(path.data, path.len), cast(oflags), cast(rights), cast(fdflags));

    if (result != 0)
      throw std::system_error(cast<std::errc>(result));

    return handle;
  }

  pub fn bool(this &) -> bool
  {
    return this.fd != ~0;
  }

  pub fn ==(fd lhs, fd rhs) -> bool
  {
    return lhs.fd == rhs.fd;
  }

  pub fd(var fd)
    : fd(cast(fd))
  {
  }

  pub fd() = default;
  pub fd(fd&) = default;
  pub fn =(fd mut &, fd &) -> fd mut & = default;
  pub ~fd() = default;

  uintptr fd = ~0;
}

pub fn stat(fd &fd) throws(std::error) -> filestat
{
  var fs = filestat();
  var result = fd_stat(fd.fd, &fs);

  if (result != 0)
    throw std::system_error(cast<std::errc>(result));

  return fs;
}

pub fn read(fd &fd, u8 mut *data, usize len) throws(std::error) -> usize
{
  var result = fd_read(fd.fd, data, len);

  if (result.errno != 0)
    throw std::system_error(cast<std::errc>(result.errno));

  return result.length;
}

pub fn read_at(fd &fd, u64 offset, u8 mut *data, usize len) throws(std::error) -> usize
{
  var buf = iovec(void);
  buf.data = data;
  buf.len = len;

  var result = fd_preadv(fd.fd, &buf, 1, offset);

  if (result.errno != 0)
    throw std::system_error(cast<std::errc>(result.errno));

  return result.length;
}

pub fn write(fd &fd, u8 *data, usize len) throws(std::error) -> usize
{
  var result = fd_write(fd.fd, data, len);

  if (result.errno != 0)
    throw std::system_error(cast<std::errc>(result.errno));

  return result.length;
}

pub fn write_at(fd &fd, u64 offset, u8 *data, usize len) throws(std::error) -> usize
{
  var buf = ciovec(void);
  buf.data = data;
  buf.len = len;

  var result = fd_pwritev(fd.fd, &buf, 1, offset);

  if (result.errno != 0)
    throw std::system_error(cast<std::errc>(result.errno));

  return result.length;
}

pub fn close(fd &fd)
{
  if (fd.fd != STDIN && fd.fd != STDOUT && fd.fd != STDERR)
    fd_close(fd.fd);
}
