//
// std algorithm
//

import std.stdlib : assert;
import std.type;
import std.tuple;
import std.range : Iterator, RandomAccessIterator, Sentinal, Range;

pub fn swap<T>(T mut &a, T mut &b)
{
  var tmp = std::move(a);
  a = std::move(b);
  b = std::move(tmp);
}

pub fn fill<O, T>(O dst, Sentinal<O> end, T &value) -> O
{
  while (dst != end)
  {
    *dst++ = value;
  }

  return dst;
}

pub fn fill_n<O, T, N>(O dst, Sentinal<O> end, T &value, N n) -> O
{
  while (n > 0)
  {
    assert(dst != end);

    *dst++ = value;

    --n;
  }

  return dst;
}

pub fn copy<O, I>(O dst, Sentinal<O> end, I first, Sentinal<I> last) -> O
{
  while (first != last)
  {
    assert(dst != end);

    *dst++ = *first++;
  }
  
  return dst;
}

pub fn copy_backward<O, I>(Sentinal<O> dst, O end, Sentinal<I> first, I last) -> O
{
  while (first != last)
  {
    assert(end != dst);

    *--end = *--last;
  }

  return end;
}

pub fn copy_n<O, I, N>(O dst, Sentinal<O> end, I first, N n) -> O
{
  while (n > 0)
  {
    assert(dst != end);

    *dst++ = *first++;
    
    --n;
  }
  
  return dst;
}

pub fn move<O, I>(O dst, Sentinal<O> end, I first, Sentinal<I> last) -> O
{
  while (first != last)
  {
    assert(dst != end);

    *dst++ = std::move(*first++);
  }

  return dst;
}

pub fn move_backward<O, I>(Sentinal<O> dst, O end, Sentinal<I> first, I last) -> O
{
  while (first != last)
  {
    assert(end != dst);

    *--end = std::move(*--last);
  }

  return end;
}

pub fn move_n<O, I, N>(O dst, Sentinal<O> end, I first, N n) -> O
{
  while (n > 0)
  {
    assert(dst != end);

    *dst++ = std::move(*first++);

    --n;
  }

  return dst;
}

pub const fn min<T>(T &&a, T &&b)
  where !__is_arithmetic<T>
{
  return (b < a) ? &b : &a;
}

pub const fn max<T>(T &&a, T &&b)
  where !__is_arithmetic<T>
{
  return (a < b) ? &b : &a;
}

pub const fn min<Args>(Args & ...args)
  where __tuple_len<Args> > 2 && std::is_all_same<Args>
{
  var &result = args.0;
  #for(const k = 1; k < __tuple_len<Args>; ++k)
  {
    if (args.k < result)
      &result = &args.k;
  }

  return &result;
}

pub const fn max<Args>(Args & ...args)
  where __tuple_len<Args> > 2 && std::is_all_same<Args>
{
  var &result = args.0;
  #for(const k = 1; k < __tuple_len<Args>; ++k)
  {
    if (result < args.k)
      &result = &args.k;
  }

  return &result;
}

pub const less = fn (var &x, var &y) -> bool { return x < y; };
pub const greater = fn (var &x, var &y) -> bool { return x > y; };

pub fn min_element<I, Cmp>(I first, Sentinal<I> last, Cmp &cmp = less) -> I
{
  var result = first;

  if (first != last)
  {
    for(++first; first != last; ++first)
    {
      if (cmp(*first, *result))
        result = first;
    }
  }

  return result;
}

pub fn min_element<T, Cmp>(Range<T> &&range, Cmp &cmp = less)
{
  return min_element(range.begin, range.end, cmp);
}

pub fn max_element<I, Cmp>(I first, Sentinal<I> last, Cmp &cmp = less) -> I
{
  var result = first;

  if (first != last)
  {
    for(++first; first != last; ++first)
    {
      if (cmp(*result, *first))
        result = first;
    }
  }

  return result;
}

pub fn max_element<T, Cmp>(Range<T> &&range, Cmp &cmp = less)
{
  return max_element(range.begin, range.end, cmp);
}

pub fn sort<I, Cmp>(I first, Sentinal<I> last, Cmp &cmp = less) -> void
  where __is_match<RandomAccessIterator, I> && requires (I i, I j, Cmp &cmp) { cmp(*i, *j); swap(*i, *j); }
{
  for(var i = first; i != last; ++i)
  {
    for(var j = first; j != i; ++j)
    {
      if (cmp(*i, *j))
        swap(*i, *j);
    }
  }
}

pub fn sort<T, Cmp>(Range<T> mut &range, Cmp &cmp = less) -> void
  where requires (typeof(range) mut &range, Cmp &cmp) { sort(range.begin, range.end, cmp); }
{
  sort(range.begin, range.end, cmp);
}

pub fn lower_bound<I, Value, Cmp>(I first, Sentinal<I> last, Value &value, Cmp &cmp = less) -> I
  where __is_match<RandomAccessIterator, I> && requires (I i, Value &value, Cmp &cmp) { cmp(*i, value); }
{
  var count = std::distance(first, last);

  while (count > 0)
  {
    var m = count / 2;
    var it = first + m;

    if (cmp(*it, value))
    {
      first = ++it;
      count -= m + 1;
    }
    else
    {
      count = m;
    }
  }

  return first;
}

pub fn lower_bound<T, Value, Cmp>(Range<T> &&range, Value &value, Cmp &cmp = less)
  match (Value value) { T(value); }
  where requires (typeof(range) &range, Value &value, Cmp &cmp) { lower_bound(range.begin, range.end, value, cmp); }
{
  return lower_bound((&&range).begin, (&&range).end, value, cmp);
}

pub fn upper_bound<I, Value, Cmp>(I first, Sentinal<I> last, Value &value, Cmp &cmp = less) -> I
  where __is_match<RandomAccessIterator, I> && requires (I i, Value &value, Cmp &cmp) { cmp(value, *i); }
{
  var count = std::distance(first, last);

  while (count > 0)
  {
    var m = count / 2;
    var it = first + m;

    if (!cmp(value, *it))
    {
      first = ++it;
      count -= m + 1;
    }
    else
    {
      count = m;
    }
  }

  return first;
}

pub fn upper_bound<T, Value, Cmp>(Range<T> &&range, Value &value, Cmp &cmp = less)
  match (Value value) { T(value); }
  where requires (typeof(range) &range, Value &value, Cmp &cmp) { upper_bound(range.begin, range.end, value, cmp); }
{
  return upper_bound((&&range).begin, (&&range).end, value, cmp);
}

pub fn equal_range<I, Value, Cmp>(I first, Sentinal<I> last, Value &value, Cmp &cmp = less) -> std::iterator_pair<I, I>
  where __is_match<RandomAccessIterator, I> && requires (I i, Value &value, Cmp &cmp) { cmp(*i, value); cmp(value, *i); }
{
  return std::iterator_pair(lower_bound(first, last, value, cmp), upper_bound(first, last, value, cmp));
}

pub fn equal_range<T, Value, Cmp>(Range<T> &&range, Value &value, Cmp &cmp = less)
  match (Value value) { T(value); }
  where requires (typeof(range) &range, Value &value, Cmp &cmp) { lower_bound(range.begin, range.end, value, cmp); }
{
  return equal_range((&&range).begin, (&&range).end, value, cmp);
}

pub fn binary_search<I, Value, Cmp>(I first, Sentinal<I> last, Value &value, Cmp &cmp = less) -> I
  where __is_match<RandomAccessIterator, I> && requires (I i, Value &value, Cmp &cmp) { cmp(*i, value); }
{
  var j = lower_bound(first, last, value, cmp);

  if (j == last || cmp(value, *j))
    return last;

  return j;
}

pub fn binary_search<T, Value, Cmp>(Range<T> &&range, Value &value, Cmp &cmp = less)
  match (Value value) { T(value); }
  where requires (typeof(range) &range, Value &value, Cmp &cmp) { binary_search(range.begin, range.end, value, cmp); }
{
  return binary_search((&&range).begin, (&&range).end, value, cmp);
}

pub fn count_if<I, Pred>(I first, Sentinal<I> last, Pred &pred) -> usize
{
  var count = 0;

  for (; first != last; ++first)
  {
    if (pred(*first))
      ++count;
  }

  return count;
}

pub fn count_if<T, Pred>(Range<T> &&range, Pred &pred)
{
  return count_if((&&range).begin, (&&range).end, pred);
}
