//
// std algorithm
//

import std.stdlib : assert;
import std.range : Sentinal, Range;

pub fn swap<T>(T mut &a, T mut &b)
{
  var tmp = std::move(a);
  a = std::move(b);
  b = std::move(tmp);
}

pub fn fill<O, T>(O dst, Sentinal<O> end, T &value) -> O
{
  while (dst != end)
  {
    *dst++ = value;
  }

  return dst;
}

pub fn fill_n<O, T, N>(O dst, Sentinal<O> end, T &value, N n) -> O
{
  while (n > 0)
  {
    assert(dst != end);

    *dst++ = value;

    --n;
  }

  return dst;
}

pub fn copy<O, I>(O dst, Sentinal<O> end, I first, Sentinal<I> last) -> O
{
  while (first != last)
  {
    assert(dst != end);

    *dst++ = *first++;
  }
  
  return dst;
}

pub fn copy_n<O, I, N>(O dst, Sentinal<O> end, I first, N n) -> O
{
  while (n > 0)
  {
    assert(dst != end);

    *dst++ = *first++;
    
    --n;
  }
  
  return dst;
}
