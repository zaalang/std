//
// std array
//

import std.span;
import std.stdlib : assert;

pub struct array<T, N> : T[N]
{
  array() = default;
  array(array&) = default;
  ~array() = default;

  array(T[N] &that)
    : super(that)
  {
  }

  fn with_size(#usize size) -> array<T, size>
  {
    return array<T, size>();
  }

  fn [](this&, (usize, usize) range) -> std::span<T>
  {
    assert(range.0 <= range.1 && range.0 < this.len && range.1 <= this.len);

    return std::span<T>(this.data + range.0, this.data + range.1);
  }

  fn [](this mut &, (usize, usize) range) -> std::mutable_span<T>
  {
    assert(range.0 <= range.1 && range.0 < this.len && range.1 <= this.len);

    return std::mutable_span<T>(this.data + range.0, this.data + range.1);
  }
}
