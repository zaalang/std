//
// std array
//

import std.span;
import std.stdlib : assert;
import std.range : Range;
import std.span : span, mutable_span;
import std.type : as_const;

pub struct array<T, N> : T[N]
{
  pub array() = default;
  pub array(array &&) = default;
  pub fn =(this mut &, array &&) -> array mut & = default;

  pub array(T[N] &&that)
    : super(&&that)
  {
  }

  pub fn =(this mut &, T[N] &&other) -> array mut &
  {
    this.super = &&other;
    return &this;
  }

  pub fn with_size(#usize size) -> array<T, size>
  {
    return array<T, size>();
  }

  pub ~array() = default;

  #[lifetime(depend(this))]
  pub fn [](this &, (usize, usize) range) -> span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 <= this.len);

    return span(this.data + range.0, this.data + range.1);
  }

  #[lifetime(depend(this))]
  pub fn [](this &, (usize, usize, void) range) -> span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 + 1 <= this.len);

    return span(this.data + range.0, this.data + range.1 + 1);
  }

  #[lifetime(depend(this))]
  pub fn [](this mut &, (usize, usize) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 <= this.len);

    return mutable_span(this.data + range.0, this.data + range.1);
  }

  #[lifetime(depend(this))]
  pub fn [](this mut &, (usize, usize, void) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 + 1 <= this.len);

    return mutable_span(this.data + range.0, this.data + range.1 + 1);
  }

  #[lifetime(depend(this))]
  pub fn [](this &, (T*, T*) range) -> span<T>
  {
    assert(range.0 <= range.1 && this.data <= range.0 && range.1 <= this.data + this.len);

    return span(range.0, range.1);
  }

  #[lifetime(depend(this))]
  pub fn [](this &, (T*, T*, void) range) -> span<T>
  {
    assert(range.0 <= range.1 && this.data <= range.0 && range.1 + 1 <= this.data + this.len);

    return span(range.0, range.1 + 1);
  }

  #[lifetime(depend(this))]
  pub fn [](this mut &, (T*, T*) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && this.data <= range.0 && range.1 <= this.data + this.len);

    return mutable_span(cast<T mut *>(range.0), cast<T mut *>(range.1));
  }

  #[lifetime(depend(this))]
  pub fn [](this mut &, (T*, T*, void) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && this.data <= range.0 && range.1 + 1 <= this.data + this.len);

    return mutable_span(cast<T mut *>(range.0), cast<T mut *>(range.1 + 1));
  }

  #[lifetime(depend(this))]
  pub fn begin(this &&)
  {
    return this.data;
  }

  #[lifetime(depend(this))]
  pub fn end(this &&)
  {
    return this.data + this.len;
  }

  #[lifetime(depend(this))]
  pub fn front(this &&)
  {
    assert(N != 0);

    return &*this.data;
  }

  #[lifetime(depend(this))]
  pub fn back(this &&)
  {
    assert(N != 0);

    return &*(this.data + this.len - 1);
  }
}

pub fn hash<T, N>(var &hasher, array<T, N> &array) -> usize
{
  return hasher.combine_contiguous(array.data, array.len);
}

pub fn fmt<T, N>(std::OutputStream mut &os, std::fmt_context mut &ctx, std::array<T, N> &array) throws -> void
{
  std::fmt_to(&mut os, &mut ctx, array.super);
}
