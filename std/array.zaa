//
// std array
//

import std.span;
import std.stdlib : assert;
import std.range : Range;
import std.span : span, mutable_span;
import std.type : as_const;

pub struct array<T, N> : T[N]
{
  pub array() = default;
  pub array(array&&) = default;
  pub fn =(this mut &, array &&) -> array mut & = default;

  pub array(T[N] &&that)
    : super(&&that)
  {
  }

  pub fn =(this mut &, T[N] &&other) -> array mut &
  {
    this.super = &&other;
    return &this;
  }

  pub fn with_size(#usize size) -> array<T, size>
  {
    return array<T, size>();
  }

  pub ~array() = default;

  pub fn [](this &, (usize, usize) range) -> span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 <= this.len);

    return span(this.data + range.0, this.data + range.1);
  }

  pub fn [](this mut &, (usize, usize) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 <= this.len);

    return mutable_span(this.data + range.0, this.data + range.1);
  }

  pub struct iterator
  {
    pub iterator() = default;
    pub iterator(iterator&) = default;
    pub fn =(iterator mut &this, iterator &that) -> iterator mut & = default;
    pub ~iterator() = default;

    pub fn *(iterator &this) -> T&
    {
      return &*this.cursor;
    }

    pub fn *(iterator mut &this) -> T mut &
    {
      return &*this.cursor;
    }

    pub fn ++(iterator mut &this) -> iterator mut &
    {
      ++this.cursor;
      return &this;
    }

    pub fn --(iterator mut &this) -> iterator mut &
    {
      --this.cursor;
      return &this;
    }

    iterator(T mut *item)
      : cursor(item)
    {
    }

    T mut *cursor;
  }

  pub struct move_iterator
  {
    pub move_iterator() = default;
    pub move_iterator(move_iterator&) = default;
    pub fn =(move_iterator mut &this, move_iterator &that) -> move_iterator mut & = default;
    pub ~move_iterator() = default;

    pub fn *(move_iterator &this) -> T &
    {
      return &*this.cursor;
    }

    pub fn *(move_iterator mut &this) -> T &&
    {
      return &std::move(*this.cursor);
    }

    pub fn ++(move_iterator mut &this) -> move_iterator mut &
    {
      ++this.cursor;
      return &this;
    }

    pub fn --(move_iterator mut &this) -> move_iterator mut &
    {
      --this.cursor;
      return &this;
    }

    move_iterator(T mut *item)
      : cursor(item)
    {
    }

    T mut *cursor;
  }

  pub struct const_iterator
  {
    pub const_iterator() = default;
    pub const_iterator(const_iterator&) = default;
    pub fn =(const_iterator mut &this, const_iterator &that) -> const_iterator mut & = default;
    pub ~const_iterator() = default;

    pub const_iterator(iterator other)
      : cursor(other.cursor)
    {
    }

    pub fn *(const_iterator &this) -> T&
    {
      return &*this.cursor;
    }

    pub fn ++(const_iterator mut &this) -> const_iterator mut &
    {
      ++this.cursor;
      return &this;
    }

    pub fn --(const_iterator mut &this) -> const_iterator mut &
    {
      --this.cursor;
      return &this;
    }

    const_iterator(T *item)
      : cursor(item)
    {
    }

    T *cursor;
  }

  pub concept Iterator
  {
    requires<T> __is_same<T, iterator> || __is_same<T, move_iterator> || __is_same<T, const_iterator>;
  }

  pub fn ==(Iterator &lhs, Iterator &rhs) -> bool
  {
    return lhs.cursor == rhs.cursor;
  }

  pub fn -(Iterator lhs, Iterator rhs) -> usize
  {
    return lhs.cursor - rhs.cursor;
  }

  pub fn +(Iterator lhs, usize rhs) -> typeof(lhs)
  {
    using Iterator = typeof(lhs);

    return Iterator(lhs.cursor + rhs);
  }

  pub fn begin(this &&)
  {
    return iter(&&this, this.data);
  }

  pub fn end(this &&)
  {
    return iter(&&this, this.data + this.len);
  }

  pub fn front(this &&)
  {
    assert(N != 0);

    return &*this.data;
  }

  pub fn back(this &&)
  {
    assert(N != 0);

    return &*(this.data + this.len - 1);
  }

  fn iter(this &&, var item)
  {
    #if (__is_const<typeof(this)>)
      return const_iterator(item);

    #else if (__is_rvalue<typeof(this)>)
      return move_iterator(item);

    #else
      return iterator(item);
  }
}
