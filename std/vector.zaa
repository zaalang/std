//
// std vector
//

import std.stdlib : assert;
import std.memory : memset, memcpy, memmove;
import std.algorithm : swap;
import std.range : Sentinal, Range;
import std.span : span, mutable_span;
import std.type : as_const;

pub struct vector<T, Allocator = std::allocator, N = 0>
{
  pub vector(Allocator &allocator = Allocator())
    : _allocator(allocator),
      _smallbuffer(void)
  {
    init(this);
  }

  pub vector<M>(vector<T, Allocator, M> &&other, Allocator &allocator = Allocator())
    : _allocator(allocator),
      _smallbuffer(void)
  {
    init(this);

    insert(this, this.end, &&other);
  }

  pub fn =<M>(this mut &, vector<T, Allocator, M> &&other) -> vector mut &
  {
    if (&this == &other)
      return &this;

    clear(this);

    insert(this, this.end, &&other);

    return &this;
  }

  pub fn with_size(usize size, Allocator &allocator = Allocator()) -> vector
  {
    var result = vector(allocator);

    result.resize(size);

    return result;
  }

  pub fn with_capacity(usize capacity, Allocator &allocator = Allocator()) -> vector
  {
    var result = vector(allocator);

    result.reserve(capacity);

    return result;
  }

  pub fn from(Range<T> &&other, Allocator &allocator = Allocator()) -> vector
  {
    var result = vector(allocator);

    result.insert(result.end, &&other);

    return result;
  }

  pub fn from<U>(Range<U> &&other, Allocator &allocator = Allocator()) -> vector
    match (U u) { T(u, allocator?: std::declval<Allocator>()); }
    where !__is_same<T, U>
  {
    var result = vector(allocator);

    result.insert(result.end, &&other);

    return result;
  }

  pub ~vector()
  {
    clear(this);

    if (this._data != cast(this._smallbuffer.data))
      this._allocator.free(this._data, this._capacity * sizeof<T>);
  }

  pub fn len(this &) -> usize
  {
    return this._len;
  }

  pub fn empty(this &) -> bool
  {
    return this._len == 0;
  }

  pub fn capacity(this &) -> usize
  {
    return this._capacity;
  }

  pub fn data(this &&)
  {
    return this._data;
  }

  pub fn allocator(this &) -> Allocator &
  {
    return &this._allocator;
  }

  pub fn [](this &&, usize index)
  {
    assert(index < this.len);

    return &*(this.data + index);
  }

  pub fn [](this &, (usize, usize) range) -> span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 <= this.len);

    return span(this.data + range.0, this.data + range.1);
  }

  pub fn [](this mut &, (usize, usize) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this.len && range.1 <= this.len);

    return mutable_span(this.data + range.0, this.data + range.1);
  }

  pub struct iterator
  {
    pub iterator() = default;
    pub iterator(iterator&) = default;
    pub fn =(iterator mut &this, iterator &that) -> iterator mut & = default;
    pub ~iterator() = default;

    pub fn *(iterator &this) -> T&
    {
      return &*this.cursor;
    }

    pub fn *(iterator mut &this) -> T mut &
    {
      return &*this.cursor;
    }

    pub fn ++(iterator mut &this) -> iterator mut &
    {
      ++this.cursor;
      return &this;
    }

    pub fn --(iterator mut &this) -> iterator mut &
    {
      --this.cursor;
      return &this;
    }

    iterator(T mut *item)
      : cursor(item)
    {
    }

    T mut *cursor;
  }

  pub struct move_iterator
  {
    pub move_iterator() = default;
    pub move_iterator(move_iterator&) = default;
    pub fn =(move_iterator mut &this, move_iterator &that) -> move_iterator mut & = default;
    pub ~move_iterator() = default;

    pub fn *(move_iterator &this) -> T &
    {
      return &*this.cursor;
    }

    pub fn *(move_iterator mut &this) -> T &&
    {
      return &std::move(*this.cursor);
    }

    pub fn ++(move_iterator mut &this) -> move_iterator mut &
    {
      ++this.cursor;
      return &this;
    }

    pub fn --(move_iterator mut &this) -> move_iterator mut &
    {
      --this.cursor;
      return &this;
    }

    move_iterator(T mut *item)
      : cursor(item)
    {
    }

    T mut *cursor;
  }

  pub struct const_iterator
  {
    pub const_iterator() = default;
    pub const_iterator(const_iterator&) = default;
    pub fn =(const_iterator mut &this, const_iterator &that) -> const_iterator mut & = default;
    pub ~const_iterator() = default;

    pub const_iterator(iterator other)
      : cursor(other.cursor)
    {
    }

    pub fn *(const_iterator &this) -> T&
    {
      return &*this.cursor;
    }

    pub fn ++(const_iterator mut &this) -> const_iterator mut &
    {
      ++this.cursor;
      return &this;
    }

    pub fn --(const_iterator mut &this) -> const_iterator mut &
    {
      --this.cursor;
      return &this;
    }

    const_iterator(T *item)
      : cursor(item)
    {
    }

    T *cursor;
  }
  
  pub concept Iterator
  {
    requires<T> __is_same<T, iterator> || __is_same<T, move_iterator> || __is_same<T, const_iterator>;
  }

  pub fn ==(Iterator &lhs, Iterator &rhs) -> bool
  {
    return lhs.cursor == rhs.cursor;
  }

  pub fn -(Iterator lhs, Iterator rhs) -> usize
  {
    return lhs.cursor - rhs.cursor;
  }

  pub fn -(Iterator lhs, usize rhs) -> typeof(lhs)
  {
    using Iterator = typeof(lhs);

    return Iterator(lhs.cursor - rhs);
  }

  pub fn +(Iterator lhs, usize rhs) -> typeof(lhs)
  {
    using Iterator = typeof(lhs);

    return Iterator(lhs.cursor + rhs);
  }

  pub fn begin(this &&)
  {
    return iter(&&this, this._data);
  }

  pub fn end(this &&)
  {
    return iter(&&this, this._data + this._len);
  }

  pub fn front(this &&)
  {
    assert(!this.empty);

    return &*this._data;
  }

  pub fn back(this &&)
  {
    assert(!this.empty);

    return &*(this._data + this._len - 1);
  }

  pub fn push_front<Args>(this mut &, Args && ...args) -> T mut &
    match (Args args) { T(args..., allocator?: std::declval<Allocator>()); }
  {
    return &*insert(this, this.begin.cursor, &&args...);
  }

  pub fn push_back<Args>(this mut &, Args && ...args) -> T mut &
    match (Args args) { T(args..., allocator?: std::declval<Allocator>()); }
  {
    return &*insert(this, this.end.cursor, &&args...);
  }

  pub fn insert<Args>(this mut &, Iterator position, Args && ...args) -> iterator
    match (Args args) { T(args..., allocator?: std::declval<Allocator>()); }
  {
    return iterator(insert(this, position.cursor, &&args...));
  }

  pub fn insert<U>(this mut &, Iterator position, Range<U> &&other) -> iterator
    match (U u) { T(u, allocator?: std::declval<Allocator>()); }
  {
    #if (__is_same<vector, typeof(other)>)
      assert(&this != &other);

    #if (__is_rvalue<typeof(other)> && requires (typeof(this) this, typeof(other) other) { take(this, other); })
    {
      if (this.empty)
        return iterator(this.take(other));
    }

    #if (__is_rvalue<typeof(other)> && __is_array<typeof(other)>)
    {
      return iterator(insert(this, position.cursor, std::move_iterator(other.begin), std::move_iterator(other.end), other.len));
    }

    return iterator(insert(this, position.cursor, (&&other).begin, (&&other).end, other.len));
  }

  pub fn insert<I>(this mut &, Iterator position, I first, Sentinal<I> last) -> iterator
  {
    return iterator(insert(this, position.cursor, first, last, std::distance(first, last)));
  }

  pub fn append(this mut &, Range<T> &&other) -> iterator
  {
    return insert(this, this.end, &&other);
  }

  pub fn append<I>(this mut &, I first, Sentinal<I> last) -> iterator
  {
    return insert(this, this.end, first, last);
  }

  pub fn pop_front(this mut &) -> void
  {
    assert(!this.empty);
    
    erase(this, this._data, 1);
  }

  pub fn pop_back(this mut &) -> void
  {
    assert(!this.empty);

    erase(this, this._data + this._len - 1, 1);
  }
  
  pub fn erase(this mut &, Iterator position) -> iterator
  {
    if (position == this.end)
      return iterator(position);

    return iterator(erase(this, position.cursor, 1));
  }

  pub fn erase(this mut &, Iterator first, Iterator last) -> iterator
  {
    return iterator(erase(this, first.cursor, last.cursor - first.cursor));
  }
  
  pub fn reserve(this mut &, usize capacity) -> void
  {
    if (this._capacity < capacity)
    {
      var data = cast<T mut *>(this._allocator.allocate(capacity * sizeof<T>, alignof<T>));

      uninitialised_move(this, data, this._data, this._data + this._len);

      swap(this._data, data);
      swap(this._capacity, capacity);

      destruct(this, data, data + this._len);

      if (data != cast(this._smallbuffer.data))
        this._allocator.free(data, capacity * sizeof<T>);
    }
  }

  pub fn resize(this mut &, usize size) -> void
  {
    reserve(this, size);

    #if (!__is_builtin<T>)
    {
      while (size < this._len)
        this.pop_back();

      while (this._len < size)
        this.push_back();
    }
    #else
    {
      if (this._len < size)
        memset(this._data + this._len, 0, (size - this._len) * sizeof<T>);

      this._len = size;
    }
  }

  pub fn clear(this mut &) -> void
  {
    erase(this, this._data, this._len);
  }
  
  fn init(this mut &)
  {
    this._len = 0;
    this._data = cast(this._smallbuffer.data);
    this._capacity = this._smallbuffer.len / sizeof<T>;

    assert(cast<usize>(this._data) & (alignof<T> - 1) == 0);
  }

  fn iter(this &&, var item)
  {
    #if (__is_const<typeof(this)>)
      return const_iterator(item);

    #else if (__is_rvalue<typeof(this)>)
      return move_iterator(item);

    #else
      return iterator(item);
  }

  fn ensure_capacity(this mut &, usize len) -> void
  {
    if (len <= this._capacity)
      return;

    if (len < 2*this._capacity)
      len = 2*this._capacity;

    reserve(this, len);
  }

  fn ensure_space(this mut &, T *position, usize len) -> T mut *
  {
    var index = position - this._data;

    ensure_capacity(this, this._len + len);

    if (index != this._len)
    {
      uninitialised_move(this, this._data + this._len, this._data + this._len - len, this._data + this._len);
      initialised_move_backward(this, this._data + index + len, this._data + index, this._data + this._len - len);
      destruct(this, this._data + index, this._data + index + len);
    }

    this._len += len;

    return this._data + index;
  }

  fn take<M>(this mut &, vector<T, Allocator, M> mut &other) -> T mut *
  {
    assert(this.empty);
    assert(this.allocator == other.allocator);

    if (other._data != cast(other._smallbuffer.data))
    {
      swap(this._data, other._data);
      swap(this._len, other._len);
      swap(this._capacity, other._capacity);

      if (other._data == cast(this._smallbuffer.data))
        other.init();
    }
    else
    {
      insert(this, this._data, std::move_iterator(other.begin), std::move_iterator(other.end), other.len);

      other.clear();
    }

    return this.data;
  }

  fn insert<Args>(this mut &, T *position, Args && ...args) -> T mut *
  {
    var item = ensure_space(this, position, 1);

    new<T>(item)(&&args..., allocator?: this.allocator);
    
    return item;
  }

  fn insert<I>(this mut &, T *position, I first, Sentinal<I> last, usize count) -> T mut *
  {
    var item = ensure_space(this, position, count);

    for(var it = item; first != last; ++it, ++first)
    {
      new<T>(it)(*first, allocator?: this.allocator);
    }

    return item;
  }

  fn erase(this mut &, T *first, usize count) -> T mut *
  {
    var index = first - this._data;

    initialised_move(this, this._data + index, this._data + index + count, this._data + this._len);
    destruct(this, this._data + this._len - count, this._data + this._len);

    this._len -= count;

    return this._data + index;
  }

  fn initialised_move(this mut &, T mut *dst, T mut *first, T mut *last) -> void
  {
    #if (!__is_trivial_copy<T>)
    {
      while (first != last)
      {
        #if (!__is_trivial_destroy<T>)
          T::~T(*dst);

        new<T>(dst++)(std::move(*first++), allocator?: this.allocator);
      }
    }
    #else
    {
      memcpy(dst, first, cast<u8 mut *>(last) - cast<u8 mut *>(first));
    }
  }

  fn initialised_move_backward(this mut &, T mut *dst, T mut *first, T mut *last) -> void
  {
    #if (!__is_trivial_copy<T>)
    {
      var end = dst + (last - first);

      while (first != last)
      {
        #if (!__is_trivial_destroy<T>)
          T::~T(*(end-1));

        new<T>(--end)(std::move(*--last), allocator?: this.allocator);
      }
    }
    #else
    {
      memmove(dst, first, cast<u8 mut *>(last) - cast<u8 mut *>(first));
    }
  }

  fn uninitialised_move(this mut &, T mut *dst, T mut *first, T mut *last) -> void
  {
    #if (!__is_trivial_copy<T>)
    {
      while (first != last)
      {
        new<T>(dst++)(std::move(*first++), allocator?: this.allocator);
      }
    }
    #else
    {
      memcpy(dst, first, cast<u8 mut *>(last) - cast<u8 mut *>(first));
    }
  }

  fn destruct(this mut &, T mut *first, T mut *last) -> void
  {
    #if (!__is_trivial_destroy<T>)
    {
      while (first != last)
        T::~T(*first++);
    }
  }

  usize _len;
  T mut *_data;

  usize _capacity;
  u8[N*sizeof<T>] _smallbuffer; // NOTE: relying on alignment after a usize

  Allocator _allocator;
}
