//
// std vector
//

import std.stdlib : assert;
import std.memory : memset, memcpy, memmove;
import std.algorithm : swap, find, find_if;
import std.range : Sentinal, Range;
import std.span : span, mutable_span, moveable_span;
import std.type : as_const;

pub struct vector<T, Allocator = std::allocator, N = 0>
{
  pub vector(Allocator &allocator = Allocator())
    : _allocator(allocator),
      _smallbuffer(void)
  {
    #if (N != 0)
    {
      init(&mut this);
    }
  }

  pub vector<M>(vector<T, Allocator, M> &&other, Allocator &allocator = Allocator())
    : _allocator(allocator),
      _smallbuffer(void)
  {
    init(&mut this);

    insert(&mut this, this.end, &&other);
  }

  #[lifetime(poison(this))]
  pub fn =<M>(this mut &, vector<T, Allocator, M> &&other) -> vector mut &
  {
    if (&this != &other)
    {
      clear(&mut this);

      insert(&mut this, this.end, &&other);
    }

    return &this;
  }

  pub fn with_size(usize size, Allocator &allocator = Allocator()) -> vector
  {
    var result = vector(allocator);

    resize(&mut result, size);

    return result;
  }

  pub fn with_capacity(usize capacity, Allocator &allocator = Allocator()) -> vector
  {
    var result = vector(allocator);

    reserve(&mut result, capacity);

    return result;
  }

  pub fn with_uninitialised_size(usize size, Allocator &allocator = Allocator()) -> vector
  {
    var result = vector(allocator);

    reserve(&mut result, size);
    append_from_capacity(&mut result, size);

    return result;
  }

  pub fn from(Range<T> &&other, Allocator &allocator = Allocator()) -> vector
  {
    var result = vector(allocator);

    insert(&mut result, result.end, &&other);

    return result;
  }

  pub fn from<U>(Range<U> &&other, Allocator &allocator = Allocator()) -> vector
    match (U u) { T(u, allocator?: std::declval<Allocator>()); }
    where !__is_same<U, T>
  {
    var result = vector(allocator);

    insert(&mut result, result.end, &&other);

    return result;
  }

  pub ~vector()
  {
    clear(&mut this);

    if (_data && _data != cast(_smallbuffer.data))
      _allocator.free(_data, _capacity * sizeof<T>);
  }

  pub fn len(this &) -> usize
  {
    return this._len;
  }

  pub fn empty(this &) -> bool
  {
    return this._len == 0;
  }

  pub fn capacity(this &) -> usize
  {
    return this._capacity;
  }

  #[lifetime(depend(this))]
  pub fn data(this &&)
  {
    return this._data;
  }

  pub fn allocator(this &) -> Allocator &
  {
    return &this._allocator;
  }

  #[lifetime(depend(this))]
  pub fn begin(this &&)
  {
    return this._data;
  }

  #[lifetime(depend(this))]
  pub fn end(this &&)
  {
    return this._data + this._len;
  }

  #[lifetime(depend(this))]
  pub fn [](this &&, usize index)
  {
    assert(index < this._len);

    return &cast<&&typeof(this)>(*(this._data + index));
  }

  #[lifetime(depend(this))]
  pub fn [](this &, (usize, usize) range) -> span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this._len && range.1 <= this._len);

    return span(this._data + range.0, this._data + range.1);
  }

  #[lifetime(depend(this))]
  pub fn [](this &, (usize, usize, void) range) -> span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this._len && range.1 + 1 <= this._len);

    return span(this._data + range.0, this._data + range.1 + 1);
  }

  #[lifetime(depend(this))]
  pub fn [](this mut &, (usize, usize) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this._len && range.1 <= this._len);

    return mutable_span(this._data + range.0, this._data + range.1);
  }

  #[lifetime(depend(this))]
  pub fn [](this mut &, (usize, usize, void) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && range.0 <= this._len && range.1 + 1 <= this._len);

    return mutable_span(this._data + range.0, this._data + range.1 + 1);
  }

  #[lifetime(depend(this))]
  pub fn [](this &&, T *iter)
  {
    assert(this._data <= iter && iter < this._data + this._len);

    return &cast<&&typeof(this)>(*cast<T mut *>(iter));
  }

  #[lifetime(depend(this))]
  pub fn [](this &, (T*, T*) range) -> span<T>
  {
    assert(range.0 <= range.1 && this._data <= range.0 && range.1 <= this._data + this._len);

    return span(range.0, range.1);
  }

  #[lifetime(depend(this))]
  pub fn [](this &, (T*, T*, void) range) -> span<T>
  {
    assert(range.0 <= range.1 && this._data <= range.0 && range.1 + 1 <= this._data + this._len);

    return span(range.0, range.1 + 1);
  }

  #[lifetime(depend(this))]
  pub fn [](this mut &, (T*, T*) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && this._data <= range.0 && range.1 <= this._data + this._len);

    return mutable_span(cast<T mut *>(range.0), cast<T mut *>(range.1));
  }

  #[lifetime(depend(this))]
  pub fn [](this mut &, (T*, T*, void) range) -> mutable_span<T>
  {
    assert(range.0 <= range.1 && this._data <= range.0 && range.1 + 1 <= this._data + this._len);

    return mutable_span(cast<T mut *>(range.0), cast<T mut *>(range.1 + 1));
  }

  pub fn as_literal(this &)
  {
    return [ this._data .. this._data + this._len ];
  }

  #[lifetime(depend(this))]
  pub fn front(this &&)
  {
    assert(this._len != 0);

    return &cast<&&typeof(this)>(*this._data);
  }

  #[lifetime(depend(this))]
  pub fn back(this &&)
  {
    assert(this._len != 0);

    return &cast<&&typeof(this)>(*(this._data + (this._len - 1)));
  }

  #[lifetime(poison(this), depend(this))]
  pub fn push_back<Args>(this mut &, Args && ...args) -> T mut &
    match (Args args) { T(&&args..., allocator?: std::declval<Allocator>()); }
  {
    #for(const k = 0; k < __tuple_len<Args>; ++k)
      assert(!(cast<void*>(this._data) <= cast<void*>(&args.#k) && cast<void*>(&args.#k) < cast<void*>(this._data + this._len)));

    var slot = ensure_space(&mut this, this.end, 1);

    new<T>(slot)(&&args..., allocator?: this.allocator);

    return &*slot;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn insert<Args>(this mut &, T *position, Args && ...args) -> T mut *
    match (Args args) { T(&&args..., allocator?: std::declval<Allocator>()); }
  {
    #for(const k = 0; k < __tuple_len<Args>; ++k)
      assert(!(cast<void*>(this._data) <= cast<void*>(&args.#k) && cast<void*>(&args.#k) < cast<void*>(this._data + this._len)));

    var slot = ensure_space(&mut this, position, 1);

    new<T>(slot)(&&args..., allocator?: this.allocator);

    return slot;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn insert<U>(this mut &, T *position, Range<U> &&other) -> T mut *
    match (U u) { T(u, allocator?: std::declval<Allocator>()); }
  {
    #if (__is_same<vector, typeof(other)>)
      assert(&this != &other);

    #if (__is_rvalue<typeof(other)> && requires (typeof(this) this, typeof(other) other) { this.take(&mut other); })
    {
      if (this.empty)
        return this.take(&mut other);
    }

    var slot = ensure_space(&mut this, position, other.len);

    for(var it = slot, var first = other.begin, var last = other.end; first != last; ++it, ++first)
    {
      new<T>(it)((&&other)[first], allocator?: this.allocator);
    }

    return slot;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn insert<I>(this mut &, T *position, I first, Sentinal<I> last) -> T mut *
    where requires (I i) { T(*i); }
  {
    #if (__is_pointer<I>)
      assert(!(this._data <= first && first < this._data + this._len));

    var slot = ensure_space(&mut this, position, std::distance(first, last));

    for(var it = slot; first != last; ++it, ++first)
    {
      new<T>(it)(*first, allocator?: this.allocator);
    }

    return slot;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn append<U>(this mut &, Range<U> &&other) -> T mut *
    match (U u) { T(u, allocator?: std::declval<Allocator>()); }
  {
    return insert(&mut this, this.end, &&other);
  }

  #[lifetime(poison(this), depend(this))]
  pub fn append<I>(this mut &, I first, Sentinal<I> last) -> T mut *
    where requires (I i) { T(*i); }
  {
    return insert(&mut this, this.end, first, last);
  }

  #[lifetime(poison(this))]
  pub fn pop_back(this mut &) -> void
  {
    assert(!this.empty);

    erase(&mut this, this._data + this._len - 1, 1);
  }

  #[lifetime(poison(this))]
  pub fn take_back(this mut &) -> T
  {
    var result = &move std::launder(this.back);

    pop_back(&mut this);

    return result;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn erase(this mut &, T *position) -> T mut *
  {
    return erase(&mut this, position, 1);
  }

  #[lifetime(poison(this), depend(this))]
  pub fn erase(this mut &, T *first, T *last) -> T mut *
  {
    return erase(&mut this, first, last - first);
  }

  #[lifetime(poison(this), depend(this))]
  pub fn erase(this mut &, T *position, usize count) -> T mut *
  {
    assert(this._data <= position && position + count <= this._data + this._len);

    var index = position - this._data;

    initialised_move(&mut this, this._data + index, this._data + index + count, this._data + this._len);
    destruct(&mut this, this._data + this._len - count, this._data + this._len);

    this._len -= count;

    return this._data + index;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn swap_erase(this mut &, T *position) -> T mut *
  {
    assert(this._data <= position && position < this._data + this._len);

    if (position != this.end - 1)
      initialised_move(&mut this, this._data + (position - this._data), this._data + this._len - 1, this._data + this._len);

    erase(&mut this, this._data + this._len - 1, 1);

    return this._data + (position - this._data);
  }

  #[lifetime(poison(this))]
  pub fn take(this mut &, T *first, T *last) -> vector
  {
    var result = vector::from(moveable_span(cast<T mut *>(first), cast<T mut *>(last)), this.allocator);

    erase(&mut this, first, last - first);

    return result;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn drop_n!(this mut &, usize n) -> vector mut &
  {
    erase(&mut this, this._data, std::min(this._len, n));

    return &this;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn take_n!(this mut &, usize n) -> vector mut &
  {
    erase(&mut this, this._data + std::min(this._len, n), this.len - std::min(this._len, n));

    return &this;
  }

  #[lifetime(poison(this))]
  pub fn reserve(this mut &, usize capacity) -> void
  {
    if (this._capacity < capacity)
    {
      var data = cast<T mut *>(this._allocator.allocate(capacity * sizeof<T>, alignof<T>));

      uninitialised_move(&mut this, data, this._data, this._data + this._len);
      destruct(&mut this, this._data, this._data + this._len);
      swap(&mut this._data, &mut data);

      if (data && data != cast(this._smallbuffer.data))
        this._allocator.free(data, this._capacity * sizeof<T>);

      this._capacity = capacity;
    }
  }

  #[lifetime(poison(this))]
  pub fn resize(this mut &, usize size) -> void
  {
    reserve(&mut this, size);

    #if (!__is_builtin<T>)
    {
      while (size < this._len)
        this.pop_back();

      while (this._len < size)
        this.push_back();
    }
    #else
    {
      if (this._len < size)
        memset(this._data + this._len, 0, (size - this._len) * sizeof<T>);

      this._len = size;
    }
  }

  #[lifetime(poison(this))]
  pub fn clear(this mut &) -> void
  {
    erase(&mut this, this._data, this._len);
  }

  pub fn append_from_capacity(this mut &, usize count) -> void
  {
    assert(this._len + count <= this._capacity);

    this._len += count;
  }

  fn init(this mut &)
  {
    this._len = 0;
    this._data = cast(this._smallbuffer.data);
    this._capacity = this._smallbuffer.len / sizeof<T>;

    assert(cast<usize>(this._data) & (alignof<T> - 1) == 0);
  }

  fn ensure_capacity(this mut &, usize len) -> void
  {
    if (len <= this._capacity)
      return;

    if (len < 2*this._capacity)
      len = 2*this._capacity;

    reserve(&mut this, len);
  }

  fn ensure_space(this mut &, T *position, usize len) -> T mut *
  {
    var index = position - this._data;

    ensure_capacity(&mut this, this._len + len);

    if (var rem = this._len - index; rem != 0)
    {
      if (rem > len)
      {
        uninitialised_move(&mut this, this._data + this._len, this._data + this._len - len, this._data + this._len);
        initialised_move_backward(&mut this, this._data + index + len, this._data + index, this._data + this._len - len);
        destruct(&mut this, this._data + index, this._data + index + len);
      }
      else
      {
        uninitialised_move(&mut this, this._data + this._len + (len - rem), this._data + this._len - rem, this._data + this._len);
        destruct(&mut this, this._data + index, this._data + index + rem);
      }
    }

    this._len += len;

    return this._data + index;
  }

  fn take<M>(this mut &, vector<T, Allocator, M> mut &other) -> T mut *
  {
    assert(this.empty);
    assert(this.allocator == other.allocator);

    if (other._data != cast(other._smallbuffer.data))
    {
      swap(&mut this._data, &mut other._data);
      swap(&mut this._len, &mut other._len);
      swap(&mut this._capacity, &mut other._capacity);

      if (other._data == cast(this._smallbuffer.data))
        other.init();
    }
    else
    {
      insert(&mut this, this._data, moveable_span(other.data, other.len));

      other.clear();
    }

    return this._data;
  }

  fn initialised_move(this mut &, T mut *dst, T mut *first, T mut *last) -> void
  {
    #if (!__is_trivial_copy<T>)
    {
      while (first != last)
      {
        #if (!__is_trivial_destroy<T>)
          T::~T(&mut *dst);

        new<T>(dst++)(&move *first++, allocator?: this.allocator);
      }
    }
    #else
    {
      memcpy(dst, first, cast<u8 mut *>(last) - cast<u8 mut *>(first));
    }
  }

  fn initialised_move_backward(this mut &, T mut *dst, T mut *first, T mut *last) -> void
  {
    #if (!__is_trivial_copy<T>)
    {
      var end = dst + (last - first);

      while (first != last)
      {
        #if (!__is_trivial_destroy<T>)
          T::~T(&mut *(end-1));

        new<T>(--end)(&move *--last, allocator?: this.allocator);
      }
    }
    #else
    {
      memmove(dst, first, cast<u8 mut *>(last) - cast<u8 mut *>(first));
    }
  }

  fn uninitialised_move(this mut &, T mut *dst, T mut *first, T mut *last) -> void
  {
    #if (!__is_trivial_copy<T>)
    {
      while (first != last)
      {
        new<T>(dst++)(&move *first++, allocator?: this.allocator);
      }
    }
    #else
    {
      memcpy(dst, first, cast<u8 mut *>(last) - cast<u8 mut *>(first));
    }
  }

  fn destruct(this mut &, T mut *first, T mut *last) -> void
  {
    #if (!__is_trivial_destroy<T>)
    {
      while (first != last)
        T::~T(&mut *first++);
    }
  }

  pub vector(#vector&) = default;

  usize _len;
  T mut *_data;

  usize _capacity;
  u8[N*sizeof<T>] _smallbuffer; // NOTE: relying on alignment after a usize

  Allocator _allocator;
}

pub fn hash<T>(var &hasher, vector<T> &vec) -> usize
{
  return hasher.combine_contiguous(vec.data, vec.len);
}

#[lifetime(poison(range))]
pub fn erase<T, Value>(vector<T> mut &range, Value &value) -> usize
  match (Value value) { T(value); }
{
  var n = range.len;

  range.erase(std::remove(range, value), range.end);

  return n - range.len;
}

#[lifetime(poison(range))]
pub fn erase_if<T, Pred>(vector<T> mut &range, Pred &pred) -> usize
  where requires (T i, Pred &pred) { pred(i); }
{
  var n = range.len;

  range.erase(std::remove_if(range, pred), range.end);

  return n - range.len;
}

#[lifetime(poison(range))]
pub fn unordered_erase_if<T, Pred>(vector<T> mut &range, Pred &pred) -> usize
  where requires (T i, Pred &pred) { pred(i); }
{
  var n = range.len;
  var first = range.begin;

  for (; first != range.end; )
  {
    if (pred(*first))
      range.swap_erase(first);
    else
      ++first;
  }

  return n - range.len;
}
