//
// std iterator
//

import std.stdlib;

// NOTE:
//  Iterator is expected to behave like at least a multi-pass-forward iterator.
//  Input iterators shouldn't match due to throwing operations

pub concept Iterator
{
  requires<T> (T x) { ++x; }
  requires<T> (T x, T y) { x == y; }
}

pub concept BidirectionalIterator
{
  requires<T> __is_match<Iterator, T>
  requires<T> (T x) { --x; }
}

pub concept RandomAccessIterator
{
  requires<T> __is_match<BidirectionalIterator, T>
  requires<T> (T x, T y) { x - y; }
  requires<T> (T x, usize y) { x + y; }
}

pub concept Sentinal<I>
{
  requires<T> (T x, I y) { y == x; }
}

pub fn distance<I>(I first, Sentinal<I> last) -> usize
{
  #if (requires (typeof(first) x, typeof(last) y) { y - x; })
  {
    return last - first;
  }
  #else
  {
    var count = 0;

    while (first != last)
    {
      ++first;
      ++count;
    }

    return count;
  }
}

#[lifetime(depend(*i))]
pub static fn next(Iterator i, usize n = 1) -> typeof(i)
{
  #if (requires (typeof(i) x, usize y) { x + y; })
  {
    return i + n;
  }
  #else
  {
    while (n != 0)
    {
      ++i;
      --n;
    }

    return i;
  }
}

#[lifetime(depend(*i))]
pub static fn next(Iterator i, usize n, Sentinal<typeof(i)> bound) -> typeof(i)
{
  #if (requires (typeof(i) x, usize y) { x + y; })
  {
    #if (requires (typeof(i) x, typeof(bound) y) { y - x; })
      n = std::min(n, bound - i);

    return i + n;
  }
  #else
  {
    while (i != bound && n != 0)
    {
      ++i;
      --n;
    }

    return i;
  }
}

#[lifetime(depend(*i))]
pub static fn prev(Iterator i, usize n = 1) -> typeof(i)
{
  #if (requires (typeof(i) x, usize y) { x - y; })
  {
    return i - n;
  }
  #else
  {
    while (n != 0)
    {
      --i;
      --n;
    }

    return i;
  }
}

#[lifetime(depend(*i))]
pub static fn prev(Iterator i, usize n, Sentinal<typeof(i)> bound) -> typeof(i)
{
  #if (requires (typeof(i) x, usize y) { x - y; })
  {
    #if (requires (typeof(i) x, typeof(bound) y) { x - y; })
      n = std::min(n, i - bound);

    return i - n;
  }
  #else
  {
    while (i != bound && n != 0)
    {
      --i;
      --n;
    }

    return i;
  }
}
