//
// std iterator
//

import std.stdlib;

// NOTE:
//  Iterator is expected to behave like at least a multi-pass-forward iterator.
//  Input iterators shouldn't match due to throwing operations

pub concept Iterator
{
  requires<T> (T x) { *x; };
  requires<T> (T x) { ++x; };
  requires<T> (T x, T y) { x == y; };
}

pub concept RandomAccessIterator
{
  requires<T> __is_match<Iterator, T>;
  requires<T> (T x, T y) { x - y; };
  requires<T> (T x, usize y) { x + y; };
}

pub concept Sentinal<I>
{
  requires<T> (T x, I y) { y == x; };
}

pub struct move_iterator<I>
{
  pub I base;

  pub move_iterator(I &&base)
    : base(&&base)
  {
  }

  pub move_iterator() = default;
  pub move_iterator(move_iterator &&) = default;
  pub fn =(move_iterator mut &, move_iterator &) -> move_iterator mut & = default;
  pub ~move_iterator() = default;

  pub fn *(move_iterator &&this)
  {
    return &&std::move(*this.base);
  }

  pub fn ++(move_iterator mut &this) -> move_iterator mut &
    where requires (I mut &x) { ++x; }
  {
    ++this.base;
    return &this;
  }

  pub fn --(move_iterator mut &this) -> move_iterator mut &
    where requires (I mut &x) { --x; }
  {
    --this.base;
    return &this;
  }
}

pub fn ==<I, J>(move_iterator<I> &lhs, move_iterator<J> &rhs) -> bool
{
  return lhs.base == rhs.base;
}

pub fn -<I, J>(move_iterator<I> &lhs, move_iterator<J> &rhs) -> usize
  where requires (I i, J j) { i - j; }
{
  return lhs.base - rhs.base;
}

pub fn -<I>(move_iterator<I> &lhs, usize rhs) -> move_iterator<I>
  where requires (I i, usize j) { i - j; }
{
  return move_iterator<I>(lhs.base - rhs);
}

pub fn +<I>(move_iterator<I> &lhs, usize rhs) -> move_iterator<I>
  where requires (I i, usize j) { i + j; }
{
  return move_iterator<I>(lhs.base + rhs);
}

pub fn distance<I>(I &first, Sentinal<I> &last) -> usize
{
  using S = typeof(last);

  #if (requires (I x, S y) { y - x; })
  {
    return last - first;
  }
  #else
  {
    var result = 0;

    while (first != last)
    {
      ++first;
      ++result;
    }

    return result;
  }
}

pub fn next(Iterator i, usize n = 1) -> typeof(i)
{
  #if (requires (typeof(i) x, usize y) { x + y; })
  {
    return i + n;
  }
  #else
  {
    while (n != 0)
    {
      ++i;
      --n;
    }

    return i;
  }
}

pub fn prev(Iterator i, usize n = 1) -> typeof(i)
{
  #if (requires (typeof(i) x, usize y) { x - y; })
  {
    return i - n;
  }
  #else
  {
    while (n != 0)
    {
      --i;
      --n;
    }

    return i;
  }
}
