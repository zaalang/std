//
// std flat hash map
//

import std.stdlib : assert;
import std.memory : memset, memcpy, memmove;
import std.algorithm : swap;
import std.range : Sentinal, Range;
import std.span : span, mutable_span;
import std.type : as_const;
import std.pair;
import std.hash;

pub struct flat_hash_map<K, T, Hash = std::hash, Cmp = typeof(std::equal_to), Allocator = std::allocator>
{
  pub flat_hash_map(Allocator &allocator = Allocator())
    : _allocator(allocator)
  {
  }

  pub flat_hash_map(Hash &&hash, Cmp &&cmp, Allocator &allocator = Allocator())
    where requires (Cmp cmp, K i, K j) { cmp(i, j); }
    : _hash(&&hash), _cmp(&&cmp), _allocator(allocator)
  {
  }

  pub flat_hash_map(flat_hash_map &&other, Allocator &allocator = Allocator())
    : _hash(other.hash), _cmp(other.cmp), _allocator(allocator)
  {
    insert(this, &&other);
  }

  pub fn =(this mut &, flat_hash_map &&other) -> flat_hash_map mut &
  {
    if (&this == &other)
      return &this;

    clear(this);

    this._cmp = other.cmp;
    this._hash = other.hash;

    insert(this, &&other);

    return &this;
  }

  pub fn with_capacity(usize capacity, Allocator &allocator = Allocator()) -> flat_hash_map
  {
    var result = flat_hash_map(allocator);

    result.reserve(capacity);

    return result;
  }

  pub fn from(Range<value_type> &&other, Allocator &allocator = Allocator()) -> flat_hash_map
  {
    var result = flat_hash_map(allocator);

    result.insert(&&other);

    return result;
  }

  pub ~flat_hash_map()
  {
    clear(this);

    if (_data)
      _allocator.free(_data, _capacity * sizeof<value_type> + (_capacity + 1) * sizeof<i8>);
  }

  pub fn len(this &) -> usize
  {
    return this._len;
  }

  pub fn empty(this &) -> bool
  {
    return this._len == 0;
  }

  pub fn capacity(this &) -> usize
  {
    return this._capacity;
  }

  pub fn cmp(this &) -> Cmp &
  {
    return &this._cmp;
  }

  pub fn hash(this &) -> Hash &
  {
    return &this._hash;
  }

  pub fn allocator(this &) -> Allocator &
  {
    return &this._allocator;
  }

  pub struct iterator
  {
    pub iterator() = default;
    pub iterator(iterator&) = default;
    pub fn =(iterator mut &this, iterator &that) -> iterator mut & = default;
    pub ~iterator() = default;

    pub fn *(iterator &this) -> value_type &
    {
      return &*this.data;
    }

    pub fn *(iterator mut &this) -> value_type mut &
    {
      return &*this.data;
    }

    pub fn ++(iterator mut &this) -> iterator mut &
    {
      ++this.ctrl;
      ++this.data;

      while (is_empty(this.ctrl) || is_deleted(this.ctrl))
      {
        ++this.ctrl;
        ++this.data;
      }

      return &this;
    }

    iterator(i8 *ctrl, value_type mut *data)
      : ctrl(ctrl), data(data)
    {
      if (ctrl && (is_empty(ctrl) || is_deleted(ctrl)))
        ++this;
    }

    i8 *ctrl;
    value_type mut *data;
  }

  pub struct move_iterator
  {
    pub move_iterator() = default;
    pub move_iterator(move_iterator&) = default;
    pub fn =(move_iterator mut &this, move_iterator &that) -> move_iterator mut & = default;
    pub ~move_iterator() = default;

    pub fn *(move_iterator &this) -> value_type &
    {
      return &*this.data;
    }

    pub fn *(move_iterator mut &this) -> value_type &&
    {
      return &*this.data;
    }

    pub fn ++(move_iterator mut &this) -> move_iterator mut &
    {
      ++this.ctrl;
      ++this.data;

      while (is_empty(this.ctrl) || is_deleted(this.ctrl))
      {
        ++this.ctrl;
        ++this.data;
      }

      return &this;
    }

    move_iterator(i8 *ctrl, value_type mut *data)
      : ctrl(ctrl), data(data)
    {
      if (ctrl && (is_empty(ctrl) || is_deleted(ctrl)))
        ++this;
    }

    i8 *ctrl;
    value_type mut *data;
  }

  pub struct const_iterator
  {
    pub const_iterator() = default;
    pub const_iterator(const_iterator&) = default;
    pub fn =(const_iterator mut &this, const_iterator &that) -> const_iterator mut & = default;
    pub ~const_iterator() = default;

    pub const_iterator(iterator other)
      : ctrl(other.ctrl), data(other.data)
    {
    }

    pub fn *(const_iterator &this) -> value_type &
    {
      return &*this.data;
    }

    pub fn ++(const_iterator mut &this) -> const_iterator mut &
    {
      ++this.ctrl;
      ++this.data;

      while (is_empty(this.ctrl) || is_deleted(this.ctrl))
      {
        ++this.ctrl;
        ++this.data;
      }

      return &this;
    }

    const_iterator(i8 *ctrl, value_type *data)
      : ctrl(ctrl), data(data)
    {
      if (ctrl && (is_empty(ctrl) || is_deleted(ctrl)))
        ++this;
    }

    i8 *ctrl;
    value_type *data;
  }

  pub concept Iterator
  {
    requires<T> __is_same<T, iterator> || __is_same<T, move_iterator> || __is_same<T, const_iterator>;
  }

  pub fn key(Iterator &this)
  {
    return &(*this).key;
  }

  pub fn value(Iterator &&this)
  {
    return &(*this).value;
  }

  pub fn ==(Iterator &lhs, Iterator &rhs) -> bool
  {
    return lhs.ctrl == rhs.ctrl;
  }

  pub fn begin(this &&)
  {
    return iter(&&this, 0);
  }

  pub fn end(this &&)
  {
    return iter(&&this, this._capacity);
  }

  pub fn find<Key>(this &&, Key &key)
    match (Key key) { K(key); }
  {
    if (this.empty)
      return (&&this).end;

    var hash = this._hash(key);
    var hash2 = H2(hash);
    var index = hash & this._capacity;

    while (true)
    {
      if (is_match(this._ctrl + index, hash2))
      {
        if (this._cmp((this._data + index).key, key))
          return iter(&&this, index);
      }

      if (is_empty(this._ctrl + index))
        break;

      index = (index + 1) & this._capacity;
    }

    return (&&this).end;
  }

  pub fn contains<Key>(this &, Key &key) -> bool
    match (Key key) { K(key); }
  {
    return this.find(key) != this.end;
  }

  pub fn insert(this mut &, value_type &&value) -> (iterator, bool)
  {
    var pos = this.find_or_prepare_insert(value.key);

    if (pos.1)
    {
      new<value_type>(this._data + pos.0)(&&value, allocator?: this.allocator);
    }

    return std::tuple(iterator(this._ctrl + pos.0, this._data + pos.0), pos.1);
  }

  pub fn insert<Key, Args>(this mut &, Key &&key, Args && ...args) -> (iterator, bool)
    match (Key key, Args args) { K(key, allocator?: std::declval<Allocator>()); T(args..., allocator?: std::declval<Allocator>()); }
  {
    var pos = this.find_or_prepare_insert(key);

    if (pos.1)
    {
      new<value_type>(this._data + pos.0)(&&key, &&args..., allocator?: this.allocator);
    }

    return std::tuple(iterator(this._ctrl + pos.0, this._data + pos.0), pos.1);
  }

  pub fn insert(this mut &, Range<value_type> &&other) -> void
  {
    //#if (__is_rvalue<typeof(other)> && __is_same<flat_hash_map, typeof(other)>)
    //{
    //  if (this.empty)
    //    return this.take(other);
    //
    //  return this.merge(other);
    //}

    return this.insert((&&other).begin, (&&other).end);
  }

  pub fn insert<I>(this mut &, I first, Sentinal<I> last) -> void
    where requires (I i) { value_type(*i); }
  {
    while (first != last)
    {
      insert(this, *first++);
    }
  }

  pub fn erase<Key>(this mut &, Key &key) -> usize
  {
    var x = this.find(key);

    if (x == this.end)
      return 0;

    this.erase(x);

    return 1;
  }

  pub fn erase(this mut &, Iterator position) -> iterator
  {
    var index = position.data - this._data;

    this._len -= 1;
    *(this._ctrl + index) = deleted;
    value_type::~key_value_pair(*(this._data + index));

    return iterator(this._ctrl + index, this._data + index);
  }

  pub fn erase(this mut &, Iterator first, Iterator last) -> iterator
  {
    while (first != last)
    {
      this.erase(first++);
    }

    return iterator(last.ctrl, last.data);
  }

  fn resize(this mut &, usize n) -> void
  {
    var capacity = (n < 16) ? 15 : ~0 >> __clz(n);

    var alloc = this._allocator.allocate(capacity * sizeof<value_type> + (capacity + 1) * sizeof<i8>, alignof<T>);

    var data = cast<value_type mut *>(alloc);
    var ctrl = cast<i8 mut *>(cast<uintptr>(alloc) + capacity * sizeof<value_type>);

    swap(this._data, data);
    swap(this._ctrl, ctrl);
    swap(this._capacity, capacity);

    memset(this._ctrl, 0x80, this._capacity);
    *(this._ctrl + this._capacity) = sentinal;

    for(var i = 0; i != capacity; ++i)
    {
      if (is_full(ctrl + i))
      {
        var hash = this._hash((data + i).key);
        var hash2 = H2(hash);

        var pos = this.find_first_non_full(hash);

        *(this._ctrl + pos) = hash2;
        new<value_type>(this._data + pos)(std::move(*(data + i)), allocator?: this.allocator);
        value_type::~key_value_pair(*(data + i));
      }
    }

    this.growth_left = (this.capacity - this.capacity / 8) - this.len;

    if (data)
      this._allocator.free(data, capacity * sizeof<value_type> + (capacity + 1) * sizeof<i8>);
  }

  fn find_first_non_full(this mut &, usize hash) -> usize
  {
    var index = hash & this._capacity;

    while (true)
    {
      if (is_empty(this._ctrl + index) || is_deleted(this._ctrl + index))
        return index;

      index = (index + 1) & this._capacity;
    }
  }

  fn find_or_prepare_insert<Key>(this mut &, Key &key) -> (usize, bool)
  {
    if (this.empty)
      resize(this, 1);

    var hash = this._hash(key);
    var hash2 = H2(hash);
    var index = hash & this._capacity;

    while (true)
    {
      if (is_match(this._ctrl + index, hash2))
      {
        if (this._cmp((this._data + index).key, key))
          return std::tuple(index, false);
      }

      if (is_empty(this._ctrl + index))
        break;

      index = (index + 1) & this._capacity;
    }

    index = this.find_first_non_full(hash);

    if (this.growth_left == 0 && !is_deleted(this._ctrl + index))
    {
      this.resize(this._len * 2 + 1);

      index = this.find_first_non_full(hash);
    }

    this._len += 1;

    if (is_empty(this._ctrl + index))
      this.growth_left -= 1;

    *(this._ctrl + index) = hash2;

    return std::tuple(index, true);
  }

  pub fn reserve(this mut &, usize capacity) -> void
  {
    if (this._capacity < capacity)
    {
      resize(this, capacity);
    }
  }

  pub fn clear(this mut &) -> void
  {
    for(var i = 0; i != this._capacity; ++i)
    {
      if (is_full(this._ctrl + i))
        value_type::~key_value_pair(*(this._data + i));
    }

    this._len = 0;

    memset(this._ctrl, 0x80, this._capacity);

    this.growth_left = (this.capacity - this.capacity / 8);
  }

  const empty = -128;
  const deleted = -2;
  const sentinal = -1;

  fn is_full(i8 *ctrl) -> bool  { return *ctrl >= 0; }
  fn is_empty(i8 *ctrl) -> bool  { return *ctrl == empty; }
  fn is_deleted(i8 *ctrl) -> bool { return *ctrl == deleted; }
  fn is_match(i8 *ctrl, i8 h2) -> bool { return *ctrl == h2; }

  fn H2(usize hash) -> i8 { return cast<i8>((hash & 0x180) >> 7 | (hash & 0x18000) >> 13 | (hash & 0x1800000) >> 19 | (hash & 0x80000000) >> 25); }

  fn iter(this &&, usize index)
  {
    #if (__is_const<typeof(this)>)
      return const_iterator(this._ctrl + index, this._data + index);

    #else if (__is_rvalue<typeof(this)>)
      return move_iterator(this._ctrl + index, this._data + index);

    #else
      return iterator(this._ctrl + index, this._data + index);
  }

  pub flat_hash_map(#flat_hash_map&) = default;

  pub using value_type = std::key_value_pair<K, T, Allocator>;

  usize _len;
  value_type mut *_data;
  i8 mut *_ctrl;
  usize _capacity;
  usize growth_left;

  Cmp _cmp;
  Hash _hash;
  Allocator _allocator;
}

pub fn hash<K, T>(var &hasher, flat_hash_map<K, T> &map) -> usize
{
  return hasher.combine_range(map.begin, map.end);
}

pub fn erase_if<K, T, Pred>(flat_hash_map<K, T> mut &map, Pred &pred) -> usize
{
  var n = map.len;
  var first = map.begin;

  for (; first != map.end; )
  {
    if (pred(*first))
      first = map.erase(first);
    else
      ++first;
  }

  return n - map.len;
}
