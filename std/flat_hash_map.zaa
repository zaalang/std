//
// std flat hash map
//

import std.stdlib : assert;
import std.memory : memset, memcpy, memmove;
import std.algorithm : swap;
import std.range : Sentinal, Range;
import std.span : span, mutable_span;
import std.type : as_const;
import std.pair;
import std.hash;
import std.optional;

pub struct flat_hash_map<K, T, Hash = std::hash, Cmp = typeof(std::equal_to), Allocator = std::allocator>
{
  pub flat_hash_map(Allocator &allocator = Allocator())
    : _allocator(allocator)
  {
  }

  pub flat_hash_map(Hash &&hash, Cmp &&cmp, Allocator &allocator = Allocator())
    where requires (Cmp cmp, K i, K j) { cmp(i, j); }
    : _hash(&&hash), _cmp(&&cmp), _allocator(allocator)
  {
  }

  pub flat_hash_map(flat_hash_map &&other, Allocator &allocator = Allocator())
    : _hash(other.hash), _cmp(other.cmp), _allocator(allocator)
  {
    insert(&mut this, &&other);
  }

  #[lifetime(poison(this), launder(this), repose(other, this), assign(this, depend(*other)), depend(this))]
  pub fn =(this mut &, flat_hash_map &&other) -> flat_hash_map mut &
  {
    std::launder(other);

    if (&this != &other)
    {
      clear(&mut this);

      this._cmp = other.cmp;
      this._hash = other.hash;

      insert(&mut this, &&other);
    }

    return &this;
  }

  pub fn with_capacity(usize capacity, Allocator &allocator = Allocator()) -> flat_hash_map
  {
    var result = flat_hash_map(allocator);

    reserve(&mut result, capacity);

    return result;
  }

  pub fn from(Range<value_type> &&other, Allocator &allocator = Allocator()) -> flat_hash_map
  {
    var result = flat_hash_map(allocator);

    insert(&mut result, &&other);

    return result;
  }

  pub ~flat_hash_map()
  {
    clear(&mut this);

    if (_data)
      _allocator.free(_data, _capacity * sizeof<value_type> + (_capacity + 1) * sizeof<i8>);
  }

  pub fn len(this &) -> usize
  {
    return this._len;
  }

  pub fn empty(this &) -> bool
  {
    return this._len == 0;
  }

  pub fn capacity(this &) -> usize
  {
    return this._capacity;
  }

  pub fn cmp(this &) -> Cmp &
  {
    return &this._cmp;
  }

  pub fn hash(this &) -> Hash &
  {
    return &this._hash;
  }

  pub fn allocator(this &) -> Allocator &
  {
    return &this._allocator;
  }

  pub struct iterator
  {
    pub iterator() = default;
    pub iterator(iterator&) = default;
    pub fn =(iterator mut &this, iterator &that) -> iterator mut & = default;
    pub ~iterator() = default;

    #[lifetime(depend(*this))]
    pub fn ++(iterator mut &this) -> iterator mut &
    {
      ++this.ctrl;
      ++this.data;

      while (is_empty(this.ctrl) || is_deleted(this.ctrl))
      {
        ++this.ctrl;
        ++this.data;
      }

      return &this;
    }

    iterator(i8 *ctrl, value_type *data)
      : ctrl(ctrl), data(data)
    {
      if (ctrl && (is_empty(ctrl) || is_deleted(ctrl)))
        ++this;
    }

    i8 *ctrl;
    value_type *data;
  }

  pub fn ==(iterator &lhs, iterator &rhs) -> bool
  {
    return lhs.ctrl == rhs.ctrl;
  }

  #[lifetime(depend(this))]
  fn data(this &&)
  {
    return this._data;
  }

  #[lifetime(depend(this))]
  pub fn begin(this &)
  {
    return iterator(this._ctrl, this._data);
  }

  #[lifetime(depend(this))]
  pub fn end(this &)
  {
    return iterator(this._ctrl + this._capacity, this._data + this._capacity);
  }

  #[lifetime(repose(iter, this), depend(this))]
  pub fn [](this &&, iterator iter)
  {
    return &cast<&&typeof(this)>(*cast<value_type mut *>(iter.data));
  }

  #[lifetime(depend(this), repose(key, this))]
  pub fn []<Key>(this &&, Key &key)
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    var j = this.find(key);

    std::assert(j != this.end);

    return &this[j].value;
  }

  #[lifetime(depend(this))]
  pub fn get<Key>(this &, Key &key) -> std::optional<T&>
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    if (var j = this.find(key); j != this.end)
      return Some(&this[j].value);

    return None;
  }

  #[lifetime(depend(this), repose(key, this))]
  pub fn get<Key>(this mut &, Key &key) -> std::optional<T mut &>
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    if (var j = this.find(key); j != this.end)
      return Some(&this[j].value);

    return None;
  }

  #[lifetime(depend(this), repose(key, this))]
  pub fn find<Key>(this &&, Key &key)
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    if (this.empty)
      return this.end;

    var hash = this._hash(key);
    var hash2 = H2(hash);
    var index = hash & this._capacity;
    var offset = 1;

    while (true)
    {
      if (is_match(this._ctrl + index, hash2))
      {
        if (this._cmp((this._data + index).key, key))
          return iterator(this._ctrl + index, this._data + index);
      }

      if (is_empty(this._ctrl + index))
        break;

      index = (index + offset) & this._capacity;
      offset += 1;
    }

    return this.end;
  }

  pub fn contains<Key>(this &, Key &key) -> bool
    match (K u, Key v, Cmp cmp) { cmp(u, v); }
  {
    return this.find(key) != this.end;
  }

  #[lifetime(poison(this), depend(this))]
  pub fn insert(this mut &, value_type &&value) -> (iterator, bool)
  {
    assert(!(cast<void*>(this._data) <= cast<void*>(&value) && cast<void*>(&value) < cast<void*>(this._data + this._len)));

    var pos = this.find_or_prepare_insert(value.key);

    if (pos.1)
    {
      new<value_type>(this.data + pos.0)(&&value, allocator?: this.allocator);
    }

    return (iterator(this._ctrl + pos.0, this._data + pos.0), pos.1);
  }

  #[lifetime(poison(this), repose(args, key), depend(this))]
  pub fn insert<Key, Args>(this mut &, Key &&key, Args && ...args) -> (iterator, bool)
    match (Key key, Args args) { K(&move key, allocator?: std::declval<Allocator>()); T(&move args..., allocator?: std::declval<Allocator>()); }
  {
    #for (const k = 0; k < __tuple_len<Args>; ++k)
      assert(!(cast<void*>(this._data) <= cast<void*>(&args.#k) && cast<void*>(&args.#k) < cast<void*>(this._data + this._len)));

    var pos = this.find_or_prepare_insert(key);

    if (pos.1)
    {
      new<value_type>(this.data + pos.0)(&&key, &&args..., allocator?: this.allocator);
    }

    return (iterator(this._ctrl + pos.0, this._data + pos.0), pos.1);
  }

  #[lifetime(poison(this), repose(args, key), depend(this))]
  pub fn insert_or_assign<Key, Args>(this mut &, Key &&key, Args && ...args) -> (iterator, bool)
    match (Key key, Args args) { K(&move key, allocator?: std::declval<Allocator>()); T(&move args..., allocator?: std::declval<Allocator>()); }
  {
    #for (const k = 0; k < __tuple_len<Args>; ++k)
      assert(!(cast<void*>(this._data) <= cast<void*>(&args.#k) && cast<void*>(&args.#k) < cast<void*>(this._data + this._len)));

    var pos = this.find_or_prepare_insert(key);

    if (pos.1)
    {
      new<value_type>(this.data + pos.0)(&&key, &&args..., allocator?: this.allocator);
    }
    else
    {
      (this._data + pos.0).value = T(&&args..., allocator?: this.allocator);
    }

    return (iterator(this._ctrl + pos.0, this._data + pos.0), pos.1);
  }

  #[lifetime(poison(this))]
  pub fn insert(this mut &, Range<value_type> &&other) -> void
  {
    #if (__is_same<flat_hash_map, typeof(other)>)
      assert(&this != &other);

    #if (__is_rvalue<typeof(other)> && __is_same<flat_hash_map, typeof(other)>)
    {
      if (this.empty)
        return this.take(&mut other);

      return this.merge(&move other);
    }

    if (var first = other.begin, var last = other.end; first != last)
    {
      while (first != last)
      {
        insert(&mut this, (&&other)[first++]);
      }
    }
  }

  #[lifetime(poison(this))]
  pub fn insert<I>(this mut &, I first, Sentinal<I> last) -> void
    where requires (I i) { value_type(*i); }
  {
    while (first != last)
    {
      insert(&mut this, *first++);
    }
  }

  #[lifetime(poison(this), repose(args, key), depend(this))]
  pub fn emplace<Key, Args>(this mut &, Key &&key, Args && ...args) -> T mut &
    match (Key key, Args args) { K(&move key, allocator?: std::declval<Allocator>()); T(&move args..., allocator?: std::declval<Allocator>()); }
  {
    return &this[insert(&mut this, &&key, &&args...).0].value;
  }

  #[lifetime(poison(this), consume(other))]
  pub fn merge(this mut &, flat_hash_map &&other) -> void
    where __is_rvalue<typeof(other)>
  {
    assert(&this != &other);
    assert(this.allocator == other.allocator);

    for (var mut &it : &move other)
    {
      insert(&mut this, &move it);
    }
  }

  #[lifetime(poison(this))]
  pub fn erase<Key>(this mut &, Key &key) -> usize
  {
    var j = this.find(key);

    if (j == this.end)
      return 0;

    this.erase(j);

    return 1;
  }

  #[lifetime(poison(this), repose(position, this), depend(this))]
  pub fn erase(this mut &, iterator position) -> iterator
  {
    var index = position.data - this._data;

    this._len -= 1;
    *(this._ctrl + index) = deleted;
    value_type::~key_value_pair(&mut *(this._data + index));

    return iterator(this._ctrl + index, this._data + index);
  }

  #[lifetime(poison(this), repose(first, this), repose(last, this), depend(this))]
  pub fn erase(this mut &, iterator first, iterator last) -> iterator
  {
    var index = last.data - this._data;

    while (first != last)
    {
      this.erase(first++);
    }

    return iterator(this._ctrl + index, this._data + index);
  }

  #[lifetime(poison(this))]
  pub fn take_erase<Key>(this mut &, Key &key) -> T
  {
    var result = &move this[key];

    std::launder(this);

    erase(&mut this, key);

    return result;
  }

  #[lifetime(poison(this), repose(position, this))]
  pub fn take_erase(this mut &, iterator position) -> T
  {
    var result = &move this[position].value;

    std::launder(this);

    erase(&mut this, position);

    return result;
  }

  #[lifetime(poison(this), repose(first, this), repose(last, this))]
  pub fn take(this mut &, iterator first, iterator last) -> flat_hash_map
  {
    var result = flat_hash_map::from(std::moveable_range_view(&mut this, first, last), this.allocator);

    erase(&mut this, first, last);

    return result;
  }

  #[lifetime(poison(this), poison(other))]
  fn take(this mut &, flat_hash_map mut &other) -> void
  {
    assert(this.empty);
    assert(this.allocator == other.allocator);

    swap(&mut this._data, &mut other._data);
    swap(&mut this._ctrl, &mut other._ctrl);
    swap(&mut this._len, &mut other._len);
    swap(&mut this._capacity, &mut other._capacity);
    swap(&mut this.growth_left, &mut other.growth_left);
  }

  #[lifetime(poison(this))]
  fn resize(this mut &, usize n) -> void
  {
    var capacity = (n < 16) ? 15 : ~0 >> __clz(n);

    var alloc = this._allocator.allocate(capacity * sizeof<value_type> + (capacity + 1) * sizeof<i8>, alignof<T>);

    var data = cast<value_type mut *>(alloc);
    var ctrl = cast<i8 mut *>(cast<uintptr>(alloc) + capacity * sizeof<value_type>);

    swap(&mut this._data, &mut data);
    swap(&mut this._ctrl, &mut ctrl);
    swap(&mut this._capacity, &mut capacity);

    memset(this._ctrl, 0x80, this._capacity);
    *(this._ctrl + this._capacity) = sentinal;

    for (var i = 0; i != capacity; ++i)
    {
      if (is_full(ctrl + i))
      {
        var hash = this._hash((data + i).key);
        var hash2 = H2(hash);

        var pos = this.find_first_non_full(hash);

        *(this._ctrl + pos) = hash2;
        uninitialised_move(&mut this, this._data + pos, data + i);
      }
    }

    this.growth_left = (this.capacity - this.capacity / 8) - this.len;

    if (data)
      this._allocator.free(data, capacity * sizeof<value_type> + (capacity + 1) * sizeof<i8>);
  }

  fn find_first_non_full(this mut &, usize hash) -> usize
  {
    var index = hash & this._capacity;
    var offset = 1;

    while (true)
    {
      if (is_empty(this._ctrl + index) || is_deleted(this._ctrl + index))
        return index;

      index = (index + offset) & this._capacity;
      offset += 1;
    }
  }

  fn find_or_prepare_insert<Key>(this mut &, Key &key) -> (usize, bool)
  {
    if (this._capacity == 0)
      resize(&mut this, 1);

    var hash = this._hash(key);
    var hash2 = H2(hash);
    var index = hash & this._capacity;
    var offset = 1;

    while (true)
    {
      if (is_match(this._ctrl + index, hash2))
      {
        if (this._cmp((this._data + index).key, key))
          return (index, false);
      }

      if (is_empty(this._ctrl + index))
        break;

      index = (index + offset) & this._capacity;
      offset += 1;
    }

    index = this.find_first_non_full(hash);

    if (this.growth_left == 0 && !is_deleted(this._ctrl + index))
    {
      resize(&mut this, this._len * 2 + 1);

      index = this.find_first_non_full(hash);
    }

    this._len += 1;

    if (is_empty(this._ctrl + index))
      this.growth_left -= 1;

    *(this._ctrl + index) = hash2;

    return (index, true);
  }

  #[unsafe]
  fn uninitialised_move(this mut &, value_type mut *dst, value_type mut *src) -> void
  {
    new<value_type>(dst)(&move *src, allocator?: this.allocator);

    value_type::~key_value_pair(&mut *src);
  }

  #[lifetime(poison(this))]
  pub fn reserve(this mut &, usize capacity) -> void
  {
    if (this._capacity < capacity)
    {
      resize(&mut this, capacity);
    }
  }

  #[lifetime(launder(this), poison(this))]
  pub fn clear(this mut &) -> void
  {
    for (var i = 0; i != this._capacity; ++i)
    {
      if (is_full(this._ctrl + i))
        value_type::~key_value_pair(&mut *(this._data + i));
    }

    this._len = 0;

    memset(this._ctrl, 0x80, this._capacity);

    this.growth_left = (this.capacity - this.capacity / 8);
  }

  const empty = -128;
  const deleted = -2;
  const sentinal = -1;

  fn is_full(i8 *ctrl) -> bool  { return *ctrl >= 0; }
  fn is_empty(i8 *ctrl) -> bool  { return *ctrl == empty; }
  fn is_deleted(i8 *ctrl) -> bool { return *ctrl == deleted; }
  fn is_match(i8 *ctrl, i8 h2) -> bool { return *ctrl == h2; }

  fn H2(usize hash) -> i8 { return cast<i8>((hash & 0x180) >> 7 | (hash & 0x18000) >> 13 | (hash & 0x1800000) >> 19 | (hash & 0x80000000) >> 25); }

  pub flat_hash_map(#flat_hash_map&) = default;

  pub using value_type = std::key_value_pair<K, T, Allocator>;

  usize _len;
  value_type mut *_data;
  i8 mut *_ctrl;
  usize _capacity;
  usize growth_left;

  Cmp _cmp;
  Hash _hash;
  Allocator _allocator;
}

pub fn ==<K, T>(flat_hash_map<K, T> &lhs, flat_hash_map<K, T> &rhs) -> bool
{
  if (lhs.len != rhs.len)
    return false;

  for (var i = lhs.begin, var lhsend = lhs.end, var rhsend = rhs.end; i != lhsend; ++i)
  {
    if (var j = rhs.find(lhs[i].key); j == rhsend || lhs[i].value != rhs[j].value)
      return false;
  }

  return true;
}

pub fn hash<K, T>(var &hasher, flat_hash_map<K, T> &map) -> usize
{
  return hasher.combine_range(map, map.begin, map.end);
}

#[lifetime(poison(map))]
pub fn erase_if<K, T, Pred>(flat_hash_map<K, T> mut &map, Pred &pred) -> usize
{
  var n = map.len;
  var first = map.begin;

  for (; first != map.end; )
  {
    if (pred(map[first]))
      first = map.erase(first);
    else
      ++first;
  }

  return n - map.len;
}
