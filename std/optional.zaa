//
// std.optional
//

import std.stdlib;
import std.memory;
import std.string : String;
import std.fmt;
import std.scan;

pub union optional<T, Allocator = std::allocator>
{
  pub None,

  pub optional()
    : None()
  {
  }

  pub optional(T &&value, Allocator &allocator = Allocator())
    : Some(&&value, allocator?: allocator)
  {
  }

  pub optional<Args>(Args && ...args, Allocator &allocator = Allocator())
    match (Args args) { T(&move args..., allocator?: std::declval<Allocator>()); }
    : Some(&&args..., allocator?: allocator)
  {
  }

  #[lifetime(poison(this))]
  pub fn =<Args>(this mut &, Args && ...args) -> optional mut &
    match (Args args) { T(&move args..., allocator?: std::declval<Allocator>()); }
  {
    insert(&mut this, &&args...);

    return &this;
  }

  pub fn bool(this &) -> bool
  {
    return this.kind == typeof(this.kind)::Some;
  }

  pub fn is_none(this &) -> bool
  {
    return this.kind != typeof(this.kind)::Some;
  }

  pub fn is_some(this &) -> bool
  {
    return this.kind == typeof(this.kind)::Some;
  }

  #if __is_reference<T>

    pub Some(std::remove_reference<T> &&),

    #[lifetime(depend(*this))]
    pub fn value(this &&)
    {
      std::assert(this.is_some);

      return &this.Some;
    }

    #[lifetime(depend(*this))]
    pub fn unwrap(this &&)
    {
      return &this.value;
    }

    #[lifetime(depend(*this), depend(default))]
    pub fn unwrap_or(this &&, std::remove_reference<T> &&default)
    {
      return (this.is_some) ? &this.Some : &default;
    }

    pub fn unwrap_or_else<Func>(this &&, Func &&func) -> std::remove_reference<T>
    {
      return (this.is_some) ? this.Some : func();
    }

    pub fn unwrap_or_default(this &&) -> std::remove_reference<T>
    {
      return (this.is_some) ? this.Some : std::remove_reference<T>();
    }

    //#[lifetime(depend(*this))]
    //pub fn *(this &&)
    //{
    //  return &this.value;
    //}

    #[lifetime(depend(*this))]
    pub fn ?!(this &&)
    {
      return &this.value;
    }

    #[lifetime(depend(*this), depend(default))]
    pub fn ??(this &&, std::remove_reference<T> &&default)
    {
      return (this.is_some) ? &this.Some : &default;
    }

    pub fn ==(optional &lhs, std::remove_reference<T> &rhs) -> bool
    {
      if (lhs.is_none)
        return false;

      return lhs.value == rhs;
    }

    pub fn <=>(optional &lhs, std::remove_reference<T> &rhs) -> int
    {
      if (lhs.is_none)
        return -1;

      return lhs.value <=> rhs;
    }

  #else

    pub Some(T),

    #[lifetime(depend(this))]
    pub fn value(this &&)
    {
      std::assert(this.is_some);

      return &(&&this.Some);
    }

    #[lifetime(depend(this))]
    pub fn unwrap(this &&)
    {
      return &(&&this).unwrap;
    }

    pub fn unwrap_or<U>(this &&, U &&default) -> T
      match (U default) { T(default); }
    {
      return (this.is_some) ? &&this.Some : T(&&default);
    }

    pub fn unwrap_or_else<Func>(this &&, Func &&func) -> T
    {
      return (this.is_some) ? &&this.Some : func();
    }

    pub fn unwrap_or_default(this &&) -> T
    {
      return (this.is_some) ? &&this.Some : T();
    }

    //#[lifetime(depend(this))]
    //pub fn *(this &&)
    //{
    //  return &(&&this).value;
    //}

    #[lifetime(depend(this))]
    pub fn ?!(this &&)
    {
      return &(&&this).value;
    }

    pub fn ??<U>(this &&, U &&default) -> T
      match (U default) { T(default); }
    {
      return (this.is_some) ? &&this.Some : T(&&default);
    }

    pub fn ==(optional &lhs, T &rhs) -> bool
    {
      if (lhs.is_none)
        return false;

      return lhs.value == rhs;
    }

    pub fn <=>(optional &lhs, T &rhs) -> int
    {
      if (lhs.is_none)
        return -1;

      return lhs.value <=> rhs;
    }

  #end

  #[lifetime(poison(this))]
  pub fn insert<Args>(this mut &, Args && ...args, Allocator &allocator = Allocator())
    match (Args args) { T(&move args..., allocator?: std::declval<Allocator>()); }
  {
    optional::~optional(&mut this);
    new<optional>(&this)(&&args..., allocator: allocator);
  }

  #[lifetime(poison(this))]
  pub fn emplace<Args>(this mut &, Args && ...args, Allocator &allocator = Allocator()) -> T mut &
    match (Args args) { T(&move args..., allocator?: std::declval<Allocator>()); }
  {
    insert(&mut this, &&args..., allocator: allocator);

    return &this.Some;
  }

  #[lifetime(launder(this), poison(this))]
  pub fn clear(this mut &) -> void
  {
    optional::~optional(&mut this);
    new<optional>(&this)();
  }

  pub fn ==(optional &lhs, optional &rhs) -> bool
  {
    if (lhs.is_none || rhs.is_none)
      return lhs.is_none == rhs.is_none;

    return lhs.value == rhs.value;
  }

  pub fn <=>(optional &lhs, optional &rhs) -> int
  {
    if (lhs.is_none || rhs.is_none)
      return lhs.is_none ? rhs.is_none ? 0 : -1 : +1;

    return lhs.value <=> rhs.value;
  }

  pub optional<U>(optional<U> &&other, Allocator &allocator = Allocator())
    match (typeof(other) other) { T((&move other).value, allocator?: std::declval<Allocator>()); }
  {
    switch (other)
    {
      case Some:
        new<optional>(&this)((&&other).value, allocator: allocator);

      case None:
        new<optional>(&this)();
    }
  }

  #[lifetime(poison(this))]
  pub fn =<U>(this mut &, optional<U> &&other) -> optional mut &
    match (typeof(other) other) { T((&move other).value, allocator?: std::declval<Allocator>()); }
  {
    optional::~optional(&mut this);

    switch (other)
    {
      case Some:
        new<optional>(&this)((&&other).value, allocator: Allocator());

      case None:
        new<optional>(&this)();
    }

    return &this;
  }

  #[lifetime(poison(this), launder(this), repose(other, this), assign(this, depend(*other)), depend(this))]
  pub fn =(this mut &, optional &&other) -> optional mut &
  {
    std::launder(other);

    if (&this != &other)
    {
      optional::~optional(&mut this);

      switch (other)
      {
        case Some[value]:
          #if (__is_reference<T>)
            new<optional>(&this)(&value, allocator: Allocator());
          #else
            new<optional>(&this)(&&value, allocator: Allocator());

        case None:
          new<optional>(&this)();
      }
    }

    return &this;
  }

  pub optional(optional &&, Allocator &allocator = Allocator()) = default;
  pub ~optional() = default;
}

pub fn fmt<T>(std::OutputStream mut &os, std::fmt_context mut &ctx, std::optional<T> &optional) throws -> void
{
  switch (optional)
  {
    case Some[value]:
      ctx.written += std::format_to(&mut os, "Some({})", value);

    case None:
      ctx.written += std::format_to(&mut os, "None");
  }
}

pub fn scan<T>(std::string_view is, std::scan_context mut &ctx, std::optional<T> mut &optional) -> void
{
  var v = T();

  std::scan_to(is, &mut ctx, &mut v);

  if (!ctx.error)
    optional = v;
}

pub fn or_else<T, Func>(std::optional<T> &&optional, Func &&func) -> std::optional<T>
{
  switch (optional)
  {
    case Some:
      return &&optional;

    else:
      return func();
  }
}

pub fn transform<T, Func>(std::optional<T> &&optional, Func &&func) -> std::optional<typeof(func((&&optional).value))>
{
  switch (optional)
  {
    case Some:
      return func((&&optional).value);
  }

  return None;
}
