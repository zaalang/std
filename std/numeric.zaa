//
// std numeric
//

pub concept Int
{
  requires<T> numeric_traits<T>::is_integer
}

pub concept Float
{
  requires<T> !numeric_traits<T>::is_integer
}

pub concept Numeric
{
  requires<T> { numeric_traits<T>::is_integer; }
}

pub struct I8
{
  pub const min = -128;
  pub const max = 127;
  
  pub const radix = 2;
  pub const digits = 7;

  pub const is_signed = true;
  pub const is_integer = true;
}

pub struct I16
{
  pub const min = -32_768;
  pub const max = 32_767;

  pub const radix = 2;
  pub const digits = 15;

  pub const is_signed = true;
  pub const is_integer = true;
}

pub struct I32
{
  pub const min = -2_147_483_648;
  pub const max = 2_147_483_647;

  pub const radix = 2;
  pub const digits = 31;

  pub const is_signed = true;
  pub const is_integer = true;
}

pub struct I64
{
  pub const min = -9_223_372_036_854_775_808;
  pub const max = 9_223_372_036_854_775_807;

  pub const radix = 2;
  pub const digits = 63;

  pub const is_signed = true;
  pub const is_integer = true;
}

pub struct U8
{
  pub const min = 0;
  pub const max = 255;
  
  pub const radix = 2;
  pub const digits = 8;

  pub const is_signed = false;
  pub const is_integer = true;
}

pub struct U16
{
  pub const min = 0;
  pub const max = 65_535;

  pub const radix = 2;
  pub const digits = 16;

  pub const is_signed = false;
  pub const is_integer = true;
}

pub struct U32
{
  pub const min = 0;
  pub const max = 4_294_967_295;

  pub const radix = 2;
  pub const digits = 32;

  pub const is_signed = false;
  pub const is_integer = true;
}

pub struct U64
{
  pub const min = 0;
  pub const max = 18_446_744_073_709_551_615;

  pub const radix = 2;
  pub const digits = 64;

  pub const is_signed = false;
  pub const is_integer = true;
}

pub struct F32
{
  pub const min = -3.40282347e+38;
  pub const max = 3.40282347e+38;
  pub const smallest = 1.17549435e-38;
  pub const epsilon = 1.19209290e-07;

  pub const radix = 2;
  pub const digits = 24;
  pub const decimal_digits = 6;
  pub const min_exponent = -125;
  pub const min_decimal_exponent = -37;
  pub const max_exponent = 128;
  pub const max_decimal_exponent = 38;

  pub const is_signed = true;
  pub const is_integer = false;
}

pub struct F64
{
  pub const min = -1.7976931348623157e+308;
  pub const max = 1.7976931348623157e+308;
  pub const smallest = 2.2250738585072014e-308;
  pub const epsilon = 2.2204460492503131e-16;
  
  pub const radix = 2;
  pub const digits = 53;
  pub const decimal_digits = 15;
  pub const min_exponent = -1021;
  pub const min_decimal_exponent = -307;
  pub const max_exponent = 1024;
  pub const max_decimal_exponent = 308;
  
  pub const is_signed = true;
  pub const is_integer = false;
}

pub const fn is_nan<T>(T x) -> bool
  where __is_floating_point<T>
{
  return __is_nan(x);
}

pub const fn is_infinite<T>(T x) -> bool
  where __is_floating_point<T>
{
  return !__is_nan(x) && !__is_finite(x);
}

pub const fn is_finite<T>(T x) -> bool
  where __is_floating_point<T>
{
  return __is_finite(x);
}

pub const fn is_normal<T>(T x) -> bool
  where __is_floating_point<T>
{
  return __is_normal(x);
}

pub struct numeric_traits<T>
{
  pub const min = type_traits::min;
  pub const max = type_traits::max;
  pub const smallest = type_traits::smallest;
  pub const epsilon = type_traits::epsilon;

  pub const radix = type_traits::radix;
  pub const digits = type_traits::digits;

  pub const is_signed = type_traits::is_signed;
  pub const is_integer = type_traits::is_integer;

  #if (__is_same<T, i8>)
    using type_traits = I8;
  #else if (__is_same<T, i16>)
    using type_traits = I16;
  #else if (__is_same<T, i32>)
    using type_traits = I32;
  #else if (__is_same<T, i64>)
    using type_traits = I64;
  #else if (__is_same<T, u8>)
    using type_traits = U8;
  #else if (__is_same<T, u16>)
    using type_traits = U16;
  #else if (__is_same<T, u32>)
    using type_traits = U32;
  #else if (__is_same<T, u64>)
    using type_traits = U64;
  #else if (__is_same<T, f32>)
    using type_traits = F32;
  #else if (__is_same<T, f64>)
    using type_traits = F64;
  #else if (__is_same<T, isize>)
    using type_traits = I64;
  #else if (__is_same<T, usize>)
    using type_traits = U64;
  #else
    using type_traits = T::numeric_traits;
  #end
}
