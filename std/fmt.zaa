//
// std fmt
//

import std.io;
import std.string;
import std.strconv;
import std.memory;
import std.math;
import std.type;
import std.meta;

using std::String;
using std::OutputStream;

struct spec
{
  bool ok;
  int width;
  int precision;
  u8 align;
  u8 sign;
  u8 type;
  u8 alt;
  u8 fill;

  const arg = -2;
  const auto = -1;

  spec() = default;
  spec(spec&) = default;
  fn =(this mut &, spec &hat) -> spec mut & = default;
  ~spec() = default;
}

pub struct fmt_context
{
  pub spec spec;

  pub usize written;

  fmt_context() = default;
  ~fmt_context() = default;
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, bool value) throws -> void
{
  var buf = [0; 16];
  var str = std::btoa(buf.begin, buf.end, value);

  ctx.written += os.write(str.ptr, str.len);
}

fn fmt_chr(OutputStream mut &os, fmt_context mut &ctx, char value) throws -> void
{
  switch(value)
  {
    case '\a':
      put(os, ctx, "\\a");

    case '\f':
      put(os, ctx, "\\f");

    case '\n':
      put(os, ctx, "\\n");

    case '\r':
      put(os, ctx, "\\r");

    case '\t':
      put(os, ctx, "\\t");

    case '\v':
      put(os, ctx, "\\v");

    case '"':
      put(os, ctx, "\\\"");

    case '\\':
      put(os, ctx, "\\\\");

    case 0:
      put(os, ctx, "\\0");

    case 1: case 2: case 3: case 4: case 5: case 6: case 8:
    case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31:
      ctx.written += format_to(os, "\\x{:02x}", cast<int>(value));

    case 127:
      put(os, ctx, "\\x7f");

    else:
      ctx.written += print_to(os, value);
  }
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, char value) throws -> void
{
  switch(ctx.spec.type)
  {
    case 'd':
    case 'b':
    case 'B':
    case 'o':
    case 'O':
    case 'x':
    case 'X':
      fmt_int(os, ctx, 1, cast(value));

    case '?':
      put(os, ctx, "'");
      fmt_chr(os, ctx, value);
      put(os, ctx, "'");

    else:
      var buf = [0; 16];
      var str = std::ctoa(buf.begin, buf.end, value);

      fmt_str(os, ctx, buf.data, str.ptr, str.ptr, str.ptr + str.len, 1);
  }
}

fn fmt_int(OutputStream mut &os, fmt_context mut &ctx, int sign, usize value) throws -> void
{
  var buf = [0; 64];
  var str = std::strconv_result(void);

  switch(ctx.spec.type)
  {
    case 'c':
      str = std::ctoa(buf.end - 4, buf.end, cast<char>(value));

    case 'b':
    case 'B':
      str = std::itoa(buf.begin, buf.end, value, 2);

    case 'o':
      str = std::itoa(buf.begin, buf.end, value, 8);

    case 'x':
    case 'X':
      str = std::itoa(buf.begin, buf.end, value, 16);

    else:
      str = std::itoa(buf.begin, buf.end, value, 10);
  }

  var beg = buf.data + (str.ptr - buf.data);

  if (ctx.spec.alt != 0)
  {
    switch(ctx.spec.type)
    {
      case 'b':
      case 'B':
        *--beg = cast('b');
        *--beg = cast('0');

      case 'o':
        *--beg = cast('0');

      case 'x':
      case 'X':
        *--beg = cast('x');
        *--beg = cast('0');
    }
  }

  if (std::is_uppercase(ctx.spec.type))
  {
    for(var ch = cast<u8 mut *>(beg), var end = str.ptr + str.len; ch != end; ++ch)
      *ch = std::to_uppercase(*ch);
  }

  switch (ctx.spec.sign)
  {
    case '+':
      *--beg = cast(sign < 0 ? '-' : '+');

    case ' ':
      *--beg = cast(sign < 0 ? '-' : ' ');

    else:
      if (sign < 0)
        *--beg = cast('-');
  }

  fmt_str(os, ctx, buf.data, beg, str.ptr, str.ptr + str.len, str.ptr + str.len - beg);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, u8 value) throws -> void
{
  fmt_int(os, ctx, +1, cast<usize>(value));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, u16 value) throws -> void
{
  fmt_int(os, ctx, +1, cast<usize>(value));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, u32 value) throws -> void
{
  fmt_int(os, ctx, +1, cast<usize>(value));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, u64 value) throws -> void
{
  fmt_int(os, ctx, +1, cast<usize>(value));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, usize value) throws -> void
{
  fmt_int(os, ctx, +1, value);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, i8 value) throws -> void
{
  if (value < 0)
    fmt_int(os, ctx, -1, cast<usize>(~value) + 1);
  else
    fmt_int(os, ctx, +1, cast<usize>(value));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, i16 value) throws -> void
{
  if (value < 0)
    fmt_int(os, ctx, -1, cast<usize>(~value) + 1);
  else
    fmt_int(os, ctx, +1, cast<usize>(value));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, i32 value) throws -> void
{
  if (value < 0)
    fmt_int(os, ctx, -1, cast<usize>(~value) + 1);
  else
    fmt_int(os, ctx, +1, cast<usize>(value));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, i64 value) throws -> void
{
  if (value < 0)
    fmt_int(os, ctx, -1, cast<usize>(~value) + 1);
  else
    fmt_int(os, ctx, +1, cast<usize>(value));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, isize value) throws -> void
{
  if (value < 0)
    fmt_int(os, ctx, -1, cast<usize>(~value) + 1);
  else
    fmt_int(os, ctx, +1, cast<usize>(value));
}

fn fmt_flt(OutputStream mut &os, fmt_context mut &ctx, var value) throws -> void
{
  var buf = [0; 64];
  var str = std::strconv_result(void);

  var signbit = std::signbit(value);

  if (signbit == 1)
    value = -value;

  var beg = buf.data + 1;

  switch(ctx.spec.type)
  {
    case 'f':
    case 'F':
      str = std::ftoa(beg, buf.end, value, 'f', ctx.spec.precision);

    case 'e':
    case 'E':
      str = std::ftoa(beg, buf.end, value, 'e', ctx.spec.precision);

    else:
      str = std::ftoa(beg, buf.end, value, 'g', ctx.spec.precision);
  }

  if (str.ptr != cast(beg))
  {
    std::memcpy(beg, str.ptr, str.len);

    str.ptr = beg;
  }

  if (std::is_uppercase(ctx.spec.type))
  {
    for(var ch = cast<u8 mut *>(beg), var end = str.ptr + str.len; ch != end; ++ch)
      *ch = std::to_uppercase(*ch);
  }

  switch (ctx.spec.sign)
  {
    case '+':
      *--beg = cast(signbit == 1 ? '-' : '+');

    case ' ':
      *--beg = cast(signbit == 1 ? '-' : ' ');

    else:
      if (signbit == 1)
        *--beg = cast('-');
  }

  fmt_str(os, ctx, buf.data, beg, beg, str.ptr + str.len, str.ptr + str.len - beg);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, f32 value) throws -> void
{
  fmt_flt(os, ctx, value);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, f64 value) throws -> void
{
  fmt_flt(os, ctx, value);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, void *pointer) throws -> void
{
  var buf = [0; 18];
  var str = std::itoa(buf.begin, buf.end, cast<uintptr>(pointer), 16);

  buf[0] = cast('0');
  buf[1] = cast('x');
  
  for(var ch = buf.begin + 2, var end = buf.end - str.len; ch != end; ++ch)
    *ch = cast('0');

  ctx.written += os.write(buf.data, buf.len);
}

fn put(OutputStream mut &os, fmt_context mut &ctx, String &str) throws -> void
{
  ctx.written += os.write(str.data, str.len);
}

fn pad(OutputStream mut &os, fmt_context mut &ctx, usize n) throws -> void
{
  var buf = [ctx.spec.fill; 64];

  while (n > buf.len)
  {
    ctx.written += os.write(buf.data, buf.len);

    n -= buf.len;
  }

  if (n != 0)
  {
    ctx.written += os.write(buf.data, n);
  }
}

fn fmt_str(OutputStream mut &os, fmt_context mut &ctx, u8 mut *beg, u8 *start, u8 *prefix, u8 *end, usize length) throws -> void
{
  var padding_left = 0;
  var padding_right = 0;

  var str = std::string_view(start, end);

  if (ctx.spec.width >= 0)
  {
    var width = cast<usize>(ctx.spec.width);

    if (width > length)
    {
      var padding = width - length;

      if (beg && padding < start - beg)
      {
        switch (ctx.spec.align)
        {
          case '>':
            std::memset(beg + (start - beg) - padding, ctx.spec.fill, padding);

          case 0:
          case '<':
            std::memcpy(beg + (start - beg) - padding, start, end - start);
            std::memset(beg + (end - beg) - padding, ctx.spec.fill, padding);

          case '^':
            std::memcpy(beg + (start - beg) - (padding - padding/2), start, end - start);
            std::memset(beg + (start - beg) - padding, ctx.spec.fill, padding/2);
            std::memset(beg + (end - beg) - (padding - padding/2), ctx.spec.fill, padding - padding/2);

          case '0':
            std::memcpy(beg + (start - beg) - padding, start, prefix - start);
            std::memset(beg + (start - beg) - padding + (prefix - start), ctx.spec.fill, padding);
        }

        str = std::string_view(start - padding, (end - start) + padding);

        padding = 0;
      }

      if (prefix != start && padding != 0)
      {
        ctx.written += os.write(start, prefix - start);

        str = std::string_view(prefix, end - prefix);
      }

      switch (ctx.spec.align)
      {
        case '<':
          padding_right = padding;

        case '>':
          padding_left = padding;

        case '^':
          padding_left = padding / 2;
          padding_right = padding - padding_left;

        case '0':
          padding_left = padding;

        else:
          padding_right = padding;
      }
    }
  }

  if (padding_left != 0)
    pad(os, ctx, padding_left);

  ctx.written += os.write(str.data, str.len);

  if (padding_right != 0)
    pad(os, ctx, padding_right);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, std::string_view str) throws -> void
{
  if (ctx.spec.type == cast('?'))
  {
    put(os, ctx, "\"");

    var i = str.begin;

    for(var j = i; j != str.end; ++j)
    {
      if (std::is_cntrl(*j) || *j == cast('\"') || *j == cast('\\') || *j == 127)
      {
        put(os, ctx, std::string_view(i, j));
        fmt_chr(os, ctx, cast<char>(*j));
        i = j + 1;
      }
    }

    put(os, ctx, std::string_view(i, str.end));

    put(os, ctx, "\"");

    return;
  }

  if (ctx.spec.precision >= 0)
  {
    if (cast(ctx.spec.precision) < str.len)
      str = str.take(cast(ctx.spec.precision));
  }

  fmt_str(os, ctx, null, str.data, str.data, str.data + str.len, str.chars.len);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, std::string_literal str) throws -> void
{
  fmt(os, ctx, std::string_view(str.data, str.len));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, std::string_ref str) throws -> void
{
  fmt(os, ctx, std::string_view(str.data, str.len));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, std::string &str) throws -> void
{
  fmt(os, ctx, std::string_view(str.data, str.len));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, std::source_location &loc) throws -> void
{
  ctx.written += format_to(os, "{}:{}", loc.file_name, loc.lineno);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, std::error &error) throws -> void
{
  var buf = [0; 256];

  fmt(os, ctx, error.message(buf.data, buf.len));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, null &) throws -> void
{
  fmt(os, ctx, "null");
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, void &) throws -> void
{
  fmt(os, ctx, "void");
}

fn fmt_array<T, N>(OutputStream mut &os, fmt_context mut &ctx, T &array) throws -> void
{
  put(os, ctx, "[");

  for(var k = 0; k < array.len; ++k)
  {
    if (k != 0)
      put(os, ctx, ", ");

    fmt_to(os, ctx, array[k]);
  }

  put(os, ctx, "]");
}

fn fmt_tuple<T>(OutputStream mut &os, fmt_context mut &ctx, T &tuple) throws -> void
{
  put(os, ctx, "(");

  #for(const k = 0; k != __tuple_len<T>; ++k)
  {
    #if (k != 0)
      put(os, ctx, ", ");

    fmt_to(os, ctx, tuple.#k);
  }

  put(os, ctx, ")");
}

fn fmt_enum<T>(OutputStream mut &os, fmt_context mut &ctx, T &object) throws -> void
{
  switch (ctx.spec.type)
  {
    case 'c':
    case 'b':
    case 'B':
    case 'o':
    case 'x':
    case 'X':
    case 'd':
      fmt(os, ctx, cast<typeof(T::super)>(object));

    else:

      var str = std::string_literal();

      #for(const k : std::meta::enumerators_of($T))
        if (object == T::#k)
          str = std::meta::name_of(k);

      if (str.len == 0)
      {
        var buf = [0; 28];
        var str = std::itoa(buf.begin, buf.end, cast<typeof(T::super)>(object), 16);

        buf[str.ptr - buf.data - 2] = cast('0');
        buf[str.ptr - buf.data - 1] = cast('x');

        fmt_str(os, ctx, buf.data, str.ptr - 2, str.ptr, str.ptr + str.len, str.len + 2);
      }

      if (str.len != 0)
      {
        fmt_str(os, ctx, null, str.data, str.data, str.data + str.len, str.chars.len);
      }
  }
}

fn fmt_union<T>(OutputStream mut &os, fmt_context mut &ctx, T &object) throws -> void
{
  var dtx = fmt_context();
  dtx.spec.type = cast('?');
  dtx.spec.width = spec::auto;
  dtx.spec.precision = spec::auto;

  dtx.written += print_to(os, std::meta::name_of(std::meta::declid($T)), " { ", object.kind, ": ");

  #for(const k = 1; k != std::meta::fields_of($T).len; ++k)
    if (object.kind == cast(k))
      fmt_to(os, dtx, object.#k);

  put(os, dtx, " }");

  ctx.written += dtx.written;
}

fn fmt_struct<T>(OutputStream mut &os, fmt_context mut &ctx, T &object) throws -> void
{
  var dtx = fmt_context();
  dtx.spec.type = cast('?');
  dtx.spec.width = spec::auto;
  dtx.spec.precision = spec::auto;

  dtx.written += print_to(os, std::meta::name_of(std::meta::declid($T)), " { ");

  #for(const i = 0, const k : std::meta::fields_of($T); true; ++i)
  {
    #if (i != 0)
      put(os, dtx, ", ");

    dtx.written += print_to(os, std::meta::name_of(k), ": ");

    fmt_to(os, dtx, object.#k);
  }

  put(os, dtx, " }");

  ctx.written += dtx.written;
}

fn fmt<T>(OutputStream mut &os, fmt_context mut &ctx, T &object) throws -> void
{
  #if (__is_array<T>)
  {
    fmt_array(os, ctx, object);
  }

  #if (__is_tuple<T>)
  {
    fmt_tuple(os, ctx, object);
  }

  #if (__is_enum<T>)
  {
    fmt_enum(os, ctx, object);
  }

  #if (__is_union<T>)
  {
    fmt_union(os, ctx, object);
  }

  #if (__is_struct<T> || __is_vtable<T>)
  {
    fmt_struct(os, ctx, object);
  }
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, std::meta::declid declid) throws -> void
{
  if (declid)
    fmt(os, ctx, std::meta::name_of(declid));
  else
    fmt(os, ctx, 0);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, std::meta::typeid typeid) throws -> void
{
  if (typeid)
    fmt(os, ctx, std::meta::name_of(typeid));
  else
    fmt(os, ctx, 0);
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, typeof(0) literal) throws -> void
{
  fmt(os, ctx, cast<int>(literal));
}

fn fmt(OutputStream mut &os, fmt_context mut &ctx, typeof(0.0) literal) throws -> void
{
  fmt(os, ctx, cast<float>(literal));
}

pub fn fmt_to<T>(OutputStream mut &os, fmt_context mut &ctx, T &object) throws -> void
{
  using T;

  fmt(os, ctx, object);
}

pub fn print_to(OutputStream mut &os, var & ...args) throws -> usize
{
  var ctx = fmt_context();
  //var os = std::output_stream(os);

  #for(var &arg : args)
  {
    ctx.spec.width = spec::auto;
    ctx.spec.precision = spec::auto;

    fmt_to(os, ctx, arg);
  }

  return ctx.written;
}

fn parse_spec(u8* mut &ch, u8 *end) -> spec
{
  var spec = spec();

  spec.fill = 0x20;
  spec.width = spec::auto;
  spec.precision = spec::auto;

  if (ch == end)
    return spec;

  if (*ch == cast(':'))
  {
    if (++ch == end)
      return spec;

    if (ch + 1 != end && (*(ch + 1) == cast('<') || *(ch + 1) == cast('>') || *(ch + 1) == cast('^')))
      spec.fill = *ch++;

    switch (*ch)
    {
      case '<':
      case '>':
      case '^':
        spec.align = *ch++;
    }

    if (ch == end)
      return spec;

    switch (*ch)
    {
      case '+':
      case '-':
      case ' ':
        spec.sign = *ch++;
    }

    if (ch == end)
      return spec;

    switch (*ch)
    {
      case '#':
        spec.alt = *ch++;
    }

    if (ch == end)
      return spec;

    switch (*ch)
    {
      case '0':
        spec.width = 0;
        spec.fill = *ch++;
        spec.align = cast('0');
    }

    if (ch == end)
      return spec;

    switch (*ch)
    {
      case '*':
        ++ch;
        spec.width = spec::arg;

      case '0' ..= '9':
        ch += std::atoi(ch, end, spec.width).len;
    }

    if (ch == end)
      return spec;

    if (*ch == cast('.'))
    {
      if (++ch == end)
        return spec;

      switch (*ch)
      {
        case '*':
          ++ch;
          spec.precision = spec::arg;

        case '0' ..= '9':
          ch += std::atoi(ch, end, spec.precision).len;
      }
    }

    if (ch == end)
      return spec;

    if (*ch != cast('}'))
      spec.type = *ch++;

    if (ch == end)
      return spec;
  }

  if (*ch == cast('}'))
    spec.ok = true;

  return spec;
}

struct arguments<N>
{
  std::string_literal[N+1] pieces;

  spec[N] specs;

  arguments() = default;
  arguments(arguments&) = default;
  ~arguments() = default;
}

fn flatten(std::string_literal str) -> std::string_literal
{
  let p = std::min(std::memchr(str.data, cast('{'), str.len), std::memchr(str.data, cast('}'), str.len));

  if (p != str.len)
    return str[0..p+1] + flatten(str[p+2..str.len]);

  return str;
}

fn parse_args<Args>(std::string_literal format) -> arguments<std::tuple_len<Args>>
{
  var args = arguments<std::tuple_len<Args>>();

  var arg = 0;
  var beg = format.data;
  var end = format.data + format.len;

  for(var ch = beg; ch != end; ++ch)
  {
    if (*ch == cast('{') || *ch == cast('}'))
    {
      ch += 1;

      if (ch == end)
        std::panic("premature end of format string");

      if ((*ch == cast('{') && *(ch-1) == cast('{')) || (*ch == cast('}') && *(ch-1) == cast('}')))
        continue;

      if (arg >= args.specs.len)
        std::panic("mismatched arg count in format string");

      args.pieces[arg] = flatten(std::string_literal(beg, ch - beg - 1));

      args.specs[arg] = parse_spec(ch, end);

      if (!args.specs[arg].ok)
        std::panic("invalid arg spec in format string");

      if (args.specs[arg].width == spec::arg)
      {
        arg += 1;

        if (arg < args.specs.len)
          args.specs[arg].precision = args.specs[arg - 1].precision;
      }

      if (args.specs[arg].precision == spec::arg)
        arg += 1;

      arg += 1;
      beg = ch + 1;
    }
  }

  if (arg != args.specs.len)
    std::panic("mismatched piece count in format string");

  args.pieces[arg] = flatten(std::string_literal(beg, end - beg));

  return args;
}

fn fmt_piece(OutputStream mut &os, fmt_context mut &ctx, std::string_literal &piece) throws -> void
{
  if (piece.len != 0)
  {
    ctx.written += os.write(piece.data, piece.len);
  }
}

fn fmt_piece(OutputStream mut &os, fmt_context mut &ctx, u8 *beg, u8 *end) throws -> void
{
  while (beg != end)
  {
    var ch = beg + std::memchr(beg, cast('}'), end - beg - 1) + 1;

    ctx.written += os.write(beg, ch - beg);

    if (ch != end && *ch == cast('}'))
      ch += 1;

    beg = ch;
  }
}

pub fn format_to<Args>(OutputStream mut &os, #std::string_literal format, Args & ...args) throws -> usize
{ 
  var ctx = fmt_context();
  //var os = std::output_stream(os);

  const fmt = #parse_args<Args>(format);

  #for(const k = 0; k < std::tuple_len<Args>; ++k)
  {
    #if (fmt.specs[k].ok)
    {
      fmt_piece(os, ctx, fmt.pieces[k]);

      ctx.spec = fmt.specs[k];
    }

    #if (fmt.specs[k].width == spec::arg)
    {
      ctx.spec.width = cast(args.#k);

      continue;
    }

    #if (fmt.specs[k].precision == spec::arg)
    {
      ctx.spec.precision = cast(args.#k);

      continue;
    }

    fmt_to(os, ctx, args.#k);
  }

  fmt_piece(os, ctx, fmt.pieces[args.len]);

  return ctx.written;
}

pub fn format_to<Args>(OutputStream mut &os, String &format, Args & ...args) throws -> usize
{
  var ctx = fmt_context();
  //var os = std::output_stream(os);

  var arg = 0;
  var beg = format.begin;
  var end = format.end;

  while (beg != end)
  {
    var ch = beg;

    while (ch != end)
    {
      ch = beg + std::memchr(beg, cast('{'), end - beg - 1) + 1;

      if (ch == end || *ch != cast('{'))
        break;

      fmt_piece(os, ctx, beg, ch);

      beg = ch + 1;
    }

    if (ch == end)
      break;

    fmt_piece(os, ctx, beg, ch - 1);

    ctx.spec = parse_spec(ch, end);

    if (ctx.spec.ok)
    {
      #for(const k = 0; k < std::tuple_len<Args>; ++k)
      {
        if (k < arg)
          continue;

        if (ctx.spec.width == spec::arg)
        {
          #if (__is_arithmetic<typeof(Args::#k)>)
            ctx.spec.width = cast(args.#k);

          if (ctx.spec.width < 0)
            ctx.spec.width = spec::auto;

          continue;
        }

        if (ctx.spec.precision == spec::arg)
        {
          #if (__is_arithmetic<typeof(Args::#k)>)
            ctx.spec.precision = cast(args.#k);

          if (ctx.spec.precision < 0)
            ctx.spec.precision = spec::auto;

          continue;
        }

        fmt_to(os, ctx, args.#k);

        arg = k + 1;

        break;
      }
    }

    beg = ch + 1;
  }

  fmt_piece(os, ctx, beg, end);

  return ctx.written;
}
