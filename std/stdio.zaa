//
// std stdio
//

import std.io;
import std.string;
import std.sys.fd;
import std.atomic;
import std.fmt;

using std::fd;
using std::String;
using std::OutputStream;

pub struct file
{
  pub fn create(String &path) throws(std::error) -> file
  {
    var fd = fd::open(path, fd::oflags::create | fd::oflags::trunc, fd::rights::read | fd::rights::write);

    return file(fd);
  }

  pub fn open(String &path) throws(std::error) -> file
  {
    var fd = fd::open(path, fd::oflags::open, fd::rights::read);

    return file(fd);
  }

  pub fn open(String &path, fd::oflags oflags, fd::rights rights, fd::fdflags fdflags = cast(0)) throws(std::error) -> file
  {
    var fd = fd::open(path, oflags, rights, fdflags);

    return file(fd);
  }

  pub fn stat(this mut &) throws(std::error) -> std::filestat
  {
    return this.fd.stat();
  }

  pub fn read(this mut &, u8 mut *data, usize len) throws(std::error) -> usize
  {
    return this.fd.read(data, len);
  }

  pub fn read_at(this mut &, u64 offset, u8 mut *data, usize len) throws(std::error) -> usize
  {
    return this.fd.read_at(offset, data, len);
  }

  pub fn write(this mut &, u8 *data, usize len) throws(std::error) -> usize
  {
    return this.fd.write(data, len);
  }

  pub fn write_at(this mut &, u64 offset, u8 *data, usize len) throws(std::error) -> usize
  {
    return this.fd.write_at(offset, data, len);
  }

  pub fn putc(this mut &, u8 ch) throws(std::error) -> usize
  {
    return this.fd.write(&ch, 1);
  }

  pub fn putc(this mut &, char ch) throws(std::error) -> usize
  {
    var buf = [0; 8];
    var len = std::ctoa(buf.data, buf.end, ch).len;

    return this.fd.write(buf.data, len);
  }

  pub fn puts(this mut &, String &str) throws(std::error) -> usize
  {
    return this.fd.write(str.data, str.len);
  }

  pub fn print(this mut &, var & ...args) throws(std::error) -> usize
  {
    return std::print_to(&mut this, args..., '\n');
  }

  pub fn printf(this mut &, String &format, var & ...args) throws(std::error) -> usize
  {
    return std::format_to(&mut this, format, args...);
  }

  pub fn printf(this mut &, #std::string_literal format, var & ...args, #var site = __site__) throws(std::error) -> usize
  {
    return std::format_to(&mut this, format, args..., site: site);
  }

  pub fn bool(this &) -> bool
  {
    return !!this.fd;
  }

  pub file()
  {
  }

  pub file(fd fd)
    : fd(fd)
  {
  }

  pub file(file &&other)
    where __is_rvalue<typeof(other)>
  {
    std::swap(&mut fd, &mut other.fd);
  }

  pub fn =(file mut &this, file &&other) -> file mut &
    where __is_rvalue<typeof(other)>
  {
    this.close();

    std::swap(&mut this.fd, &mut other.fd);

    return &this;
  }

  pub fn close(this mut &) -> void
  {
    if (this.fd)
      this.fd.close();

    this.fd = fd();
  }

  pub ~file()
  {
    if (fd)
      fd.close();
  }

  file(#file&) = default;

  std::fd fd;
}

#[lifetime(poison(buf))]
pub fn read_into(file mut &fd, std::vector<u8> mut &buf, usize maxread = ~0) throws(std::error)
{
  var size = cast<usize>(fd.stat().size);

  if (maxread < size)
    size = maxread;

  buf.resize(buf.len + size);
  fd.read(buf.data + (buf.len - size), size);

  return &buf;
}

#[lifetime(poison(buf))]
pub fn read_into(file mut &fd, std::string mut &buf, usize maxread = ~0) throws(std::error)
{
  var size = cast<usize>(fd.stat().size);

  if (maxread < size)
    size = maxread;

  buf.resize(buf.len + size);
  fd.read(buf.data + (buf.len - size), size);

  return &buf;
}

pub fn readfile_to_vector<Alloc = std::allocator, N = 0>(String &path, Alloc &alloc = Alloc(), usize maxread = ~0) throws(std::error)
{
  var buf = std::vector<u8, Alloc, N>(alloc);

  std::file::open(path).read_into(&mut buf, maxread);

  return buf;
}

pub fn readfile_to_string<Alloc = std::allocator, N = 0>(String &path, Alloc &alloc = Alloc(), usize maxread = ~0) throws(std::error)
{
  var buf = std::string<Alloc, N>(alloc);

  std::file::open(path).read_into(&mut buf, maxread);

  return buf;
}

pub fn readfile<Alloc = std::allocator, N = 0>(String &path, Alloc &alloc = Alloc(), usize maxread = ~0) throws(std::error)
{
  return readfile_to_string<Alloc, N>(path, alloc, maxread);
}

pub fn writefile(String &path, std::string &content) throws(std::error)
{
  std::file::create(path).write(content.data, content.len);
}

pub struct StdIn
{
  pub fn read(this mut &, u8 mut *data, usize len) -> usize
  {
    try
    {
      return stdin_raw.read(data, len);
    }
    catch (std::error)
    {
      return 0;
    }
  }

  StdIn() = default;
  pub StdIn(StdIn &&) = default;
  pub ~StdIn() = default;
}

pub fn stdin_raw -> file mut &
{
  static instance = #file(fd(STDIN));

  return &instance;
}

pub fn stdin -> StdIn
{
  return StdIn();
}

pub struct StdOut
{
  pub fn write(this mut &, u8 *data, usize len) -> usize
  {
    if (len == 0)
      return 0;

    if (*(data + len - 1) == cast('\n') || state.buffer.len < state.n + len)
      return write_cold(&mut this, data, len);

    std::memcpy(state.buffer.data + state.n, data, len);

    state.n += len;

    return len;
  }

  pub fn write_cold(this mut &, u8 *data, usize len) -> usize
  {
    try
    {
      if (state.n != 0 && state.n + len < state.buffer.len)
      {
        std::memcpy(state.buffer.data + state.n, data, len);

        stdout_raw.write(state.buffer.data, state.n + len);
      }
      else
      {
        if (state.n != 0)
          stdout_raw.write(state.buffer.data, state.n);

        stdout_raw.write(data, len);
      }

      state.n = 0;
    }
    catch(std::error e)
    {
      return 0;
    }

    return len;
  }

  pub fn putc(this mut &, u8 ch) -> usize
  {
    return this.write(&ch, 1);
  }

  pub fn putc(this mut &, char ch) -> usize
  {
    var buf = [0; 8];
    var len = std::ctoa(buf.data, buf.end, ch).len;

    return this.write(buf.data, len);
  }

  pub fn puts(this mut &, String &str) -> usize
  {
    return this.write(str.data, str.len);
  }

  pub fn print(this mut &, var & ...args) -> usize
  {
    try
    {
      return std::print_to(&mut this, args..., '\n');
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn printf(this mut &, String &format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(&mut this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn printf(this mut &, #std::string_literal format, var & ...args, #var site = __site__) -> usize
  {
    try
    {
      return std::format_to(&mut this, format, args..., site: site);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn flush(this mut &) -> void
  {
    if (state.n != 0)
    {
      try
      {
        stdout_raw.write(state.buffer.data, state.n);
      }
      catch(std::error e)
      {
      }

      state.n = 0;
    }
  }

  struct State
  {
    usize n;
    u8[256] buffer;

    std::ticket_lock lock;

    State() = default;
    State(#State &) = default;
  }

  fn state() -> State mut &
  {
    static state = #State();

    return &state;
  }

  StdOut()
  {
    state.lock.lock();
  }

  pub ~StdOut()
  {
    state.lock.unlock();
  }
}

pub struct StdOutLocker
{
  pub fn lock(this mut &) -> StdOut
  {
    return StdOut();
  }

  pub fn write(this mut &, u8 *data, usize len) -> usize
  {
    return this.lock().write(data, len);
  }

  pub fn putc(this mut &, u8 ch) -> usize
  {
    return this.lock().putc(ch);
  }

  pub fn putc(this mut &, char ch) -> usize
  {
    return this.lock().putc(ch);
  }

  pub fn puts(this mut &, String &str) -> usize
  {
    return this.lock().puts(str);
  }

  pub fn print(this mut &, var & ...args) -> usize
  {
    return this.lock().print(args...);
  }

  pub fn printf(this mut &, String &format, var & ...args) -> usize
  {
    return this.lock().printf(format, args...);
  }

  pub fn printf(this mut &, #std::string_literal format, var & ...args, #var site = __site__) -> usize
  {
    return this.lock().printf(format, args..., site: site);
  }

  pub fn flush(this mut &) -> void
  {
    return this.lock().flush();
  }

  StdOutLocker() = default;
  pub StdOutLocker(StdOutLocker &&) = default;
  pub ~StdOutLocker() = default;
}

pub fn stdout_raw -> file mut &
{
  static instance = #file(fd(STDOUT));

  return &instance;
}

pub fn stdout -> StdOutLocker
{
  return StdOutLocker();
}

pub struct StdErr
{
  pub fn write(this mut &, u8 *data, usize len) -> usize
  {
    try
    {
      return stderr_raw.write(data, len);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn putc(this mut &, u8 ch) -> usize
  {
    return this.write(&ch, 1);
  }

  pub fn putc(this mut &, char ch) -> usize
  {
    var buf = [0; 8];
    var len = std::ctoa(buf.data, buf.end, ch).len;

    return this.write(buf.data, len);
  }

  pub fn puts(this mut &, String &str) -> usize
  {
    return this.write(str.data, str.len);
  }

  pub fn print(this mut &, var & ...args) -> usize
  {
    try
    {
      return std::print_to(&mut this, args..., '\n');
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn printf(this mut &, String &format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(&mut this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn printf(this mut &, #std::string_literal format, var & ...args, #var site = __site__) -> usize
  {
    try
    {
      return std::format_to(&mut this, format, args..., site: site);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn flush(this mut &) -> void
  {
  }

  StdErr() = default;
  pub StdErr(StdErr &&) = default;
  pub ~StdErr() = default;
}

pub fn stderr_raw -> file mut &
{
  static instance = #file(fd(STDERR));

  return &instance;
}

pub fn stderr -> StdErr
{
  return StdErr();
}

pub fn putc(u8 ch) -> usize
{
  return stdout.lock().putc(ch);
}

pub fn putc(char ch) -> usize
{
  return stdout.lock().putc(ch);
}

pub fn fputc(StdOut mut &os, u8 ch) -> usize
{
  return os.putc(ch);
}

pub fn fputc(StdOutLocker mut &os, u8 ch) -> usize
{
  return os.lock().putc(ch);
}

pub fn fputc(StdOut mut &os, char ch) -> usize
{
  return os.putc(ch);
}

pub fn fputc(StdOutLocker mut &os, char ch) -> usize
{
  return os.lock().putc(ch);
}

pub fn fputc(StdErr mut &os, u8 ch) -> usize
{
  return os.putc(ch);
}

pub fn fputc(StdErr mut &os, char ch) -> usize
{
  return os.putc(ch);
}

pub fn fputc(file mut &os, u8 ch) throws(std::error) -> usize
{
  return os.putc(ch);
}

pub fn fputc(file mut &os, char ch) throws(std::error) -> usize
{
  return os.putc(ch);
}

pub fn puts(String &str) -> usize
{
  return stdout.lock().puts(str);
}

pub fn fputs(StdOut mut &os, String &str) -> usize
{
  return os.puts(str);
}

pub fn fputs(StdOutLocker mut &os, String &str) -> usize
{
  return os.lock().puts(str);
}

pub fn fputs(StdErr mut &os, String &str) -> usize
{
  return os.puts(str);
}

pub fn fputs(file mut &os, String &str) throws(std::error) -> usize
{
  return os.puts(str);
}

pub fn print(var & ...args) -> usize
{
  return stdout.lock().print(args...);
}

pub fn printf(String &format, var & ...args) -> usize
{
  return stdout.lock().printf(format, args...);
}

pub fn printf(#std::string_literal format, var & ...args, #var site = __site__) -> usize
{
  return stdout.lock().printf(format, args..., site: site);
}

pub fn fprint(StdOut mut &os, var & ...args) -> usize
{
  return os.print(args...);
}

pub fn fprint(StdOutLocker mut &os, var & ...args) -> usize
{
  return os.lock().print(args...);
}

pub fn fprintf(StdOut mut &os, String &format, var & ...args) -> usize
{
  return os.printf(format, args...);
}

pub fn fprintf(StdOutLocker mut &os, String &format, var & ...args) -> usize
{
  return os.lock().printf(format, args...);
}

pub fn fprintf(StdOut mut &os, #std::string_literal format, var & ...args, #var site = __site__) -> usize
{
  return os.printf(format, args..., site: site);
}

pub fn fprintf(StdOutLocker mut &os, #std::string_literal format, var & ...args, #var site = __site__) -> usize
{
  return os.lock().printf(format, args..., site: site);
}

pub fn fprint(StdErr mut &os, var & ...args) -> usize
{
  return os.print(args...);
}

pub fn fprintf(StdErr mut &os, String &format, var & ...args) -> usize
{
  return os.printf(format, args...);
}

pub fn fprintf(StdErr mut &os, #std::string_literal format, var & ...args, #var site = __site__) -> usize
{
  return os.printf(format, args..., site: site);
}

pub fn fprint(file mut &os, var & ...args) throws(std::error) -> usize
{
  return os.print(args...);
}

pub fn fprintf(file mut &os, String &format, var & ...args) throws(std::error) -> usize
{
  return os.printf(format, args...);
}

pub fn fprintf(file mut &os, #std::string_literal format, var & ...args, #var site = __site__) throws(std::error) -> usize
{
  return os.printf(format, args..., site: site);
}
