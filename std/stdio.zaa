//
// std stdio
//

import std.io;
import std.string;
import std.sys.fd;
import std.fmt;

using std::fd;
using std::String;

pub struct file
{
  pub fn create(String &path) throws -> file
  {
    var fd = fd::open(path, fd::oflags::create | fd::oflags::trunc, fd::rights::read | fd::rights::write);

    return file(fd);
  }

  fn write(this mut &, u8 *data, usize len) throws -> usize
  {
    return this.fd.write(data, len);
  }

  fn print(this mut &, var & ...args) throws -> usize
  {
    return std::print_to(this, args..., '\n');
  }

  fn printf(this mut &, String &format, var & ...args) throws -> usize
  {
    return std::format_to(this, format, args...);
  }
  
  fn printf(this mut &, #std::string_literal format, var & ...args) throws -> usize
  {
    return std::format_to(this, format, args...);
  }

  file(fd fd)
    : fd(fd)
  {
  }

  ~file()
  {
    fd.close();
  }

  std::fd fd;
}

pub struct StdOut
{
  fn write(this mut &, u8 *data, usize len) throws -> usize
  {
    return fd(STDOUT).write(data, len);
  }

  fn putc(this mut &, u8 ch) -> usize
  {
    try
    {
      return write(this, &ch, 1);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  fn print(this mut &, var & ...args) -> usize
  {
    try
    {
      return std::print_to(this, args..., '\n');
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  fn printf(this mut &, String &format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }
  
  fn printf(this mut &, #std::string_literal format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }
  
  fn flush(this mut &) -> void
  {
  }
  
  StdOut() = default;
  ~StdOut() = default;
}
  
//pub fn stdout_raw -> File
//{
//
//}

pub fn stdout -> StdOut
{
  //static StdOut instance;

  return StdOut();
}

pub fn print(var & ...args) -> usize
{
  return stdout.print(args...);
}

pub fn printf(String &format, var & ...args) -> usize
{
  return stdout.printf(format, args...);
}

pub fn printf(#std::string_literal format, var & ...args) -> usize
{
  return stdout.printf(format, args...);
}
