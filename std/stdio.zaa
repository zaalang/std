//
// std stdio
//

import std.io;
import std.string;
import std.sys.fd;
import std.fmt;

using std::fd;
using std::String;

pub struct file
{
  pub fn create(String &path) throws -> file
  {
    var fd = fd::open(path, fd::oflags::create | fd::oflags::trunc, fd::rights::read | fd::rights::write);

    return file(fd);
  }

  pub fn open(String &path) throws -> file
  {
    var fd = fd::open(path, fd::oflags::open, fd::rights::read);

    return file(fd);
  }

  pub fn stat(this mut &) throws -> std::filestat
  {
    return this.fd.stat();
  }

  pub fn read(this mut &, u8 mut *data, usize len) throws -> usize
  {
    return this.fd.read(data, len);
  }

  pub fn write(this mut &, u8 *data, usize len) throws -> usize
  {
    return this.fd.write(data, len);
  }

  pub fn print(this mut &, var & ...args) throws -> usize
  {
    return std::print_to(this, args..., '\n');
  }

  pub fn printf(this mut &, String &format, var & ...args) throws -> usize
  {
    return std::format_to(this, format, args...);
  }
  
  pub fn printf(this mut &, #std::string_literal format, var & ...args) throws -> usize
  {
    return std::format_to(this, format, args...);
  }

  pub file(fd fd)
    : fd(fd)
  {
  }

  pub ~file()
  {
    fd.close();
  }

  std::fd fd;
}

pub fn read_into(file mut &fd, std::vector<u8> mut &buf, usize maxread = ~0) throws
{
  var size = cast<usize>(fd.stat().size);

  if (maxread < size)
    size = maxread;

  buf.resize(buf.len + size);
  fd.read(buf.data + (buf.len - size), size);

  return &buf;
}

pub fn read_into(file mut &fd, std::string mut &buf, usize maxread = ~0) throws
{
  var size = cast<usize>(fd.stat().size);

  if (maxread < size)
    size = maxread;

  buf.resize(buf.len + size);
  fd.read(buf.data + (buf.len - size), size);

  return &buf;
}

pub fn readfile_to_vector<Alloc = std::allocator, N = 0>(String &path, Alloc &alloc = Alloc(), usize maxread = ~0) throws
{
  var buf = std::vector<u8, Alloc, N>(alloc);

  std::file::open(path).read_into(buf, maxread);

  return buf;
}

pub fn readfile_to_string<Alloc = std::allocator, N = 0>(String &path, Alloc &alloc = Alloc(), usize maxread = ~0) throws
{
  var buf = std::string<Alloc, N>(alloc);

  std::file::open(path).read_into(buf, maxread);

  return buf;
}

pub fn readfile<Alloc = std::allocator, N = 0>(String &path, Alloc &alloc = Alloc(), usize maxread = ~0) throws
{
  return readfile_to_string<Alloc, N>(path, alloc, maxread);
}

pub fn writefile(String &path, std::string &content) throws
{
  std::file::create(path).write(content.data, content.len);
}

pub struct StdIn
{
  pub fn read(this mut &, u8 mut *data, usize len) -> usize
  {
    try
    {
      return fd(STDIN).read(data, len);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  StdIn() = default;
  StdIn(StdIn&) = default;
  ~StdIn() = default;
}

pub fn stdin_raw -> file
{
  return file(fd(STDIN));
}

pub fn stdin -> StdIn mut &
{
  static instance = #StdIn();

  return &instance;
}

pub struct StdOut
{
  pub fn write(this mut &, u8 *data, usize len) -> usize
  {
    try
    {
      return fd(STDOUT).write(data, len);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn putc(this mut &, u8 ch) -> usize
  {
    try
    {
      return write(this, &ch, 1);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn print(this mut &, var & ...args) -> usize
  {
    try
    {
      return std::print_to(this, args..., '\n');
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn printf(this mut &, String &format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }
  
  pub fn printf(this mut &, #std::string_literal format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }
  
  pub fn flush(this mut &) -> void
  {
  }
  
  StdOut() = default;
  StdOut(StdOut&) = default;
  ~StdOut() = default;
}

pub fn stdout_raw -> file
{
  return file(fd(STDOUT));
}

pub fn stdout -> StdOut mut &
{
  static instance = #StdOut();

  return &instance;
}

pub fn print(var & ...args) -> usize
{
  return stdout.print(args...);
}

pub fn printf(String &format, var & ...args) -> usize
{
  return stdout.printf(format, args...);
}

pub fn printf(#std::string_literal format, var & ...args) -> usize
{
  return stdout.printf(format, args...);
}
