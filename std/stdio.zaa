//
// std stdio
//

import std.io;
import std.string;
import std.sys.fd;
import std.atomic;
import std.fmt;

using std::fd;
using std::String;
using std::OutputStream;

pub struct file
{
  pub fn create(String &path) throws -> file
  {
    var fd = fd::open(path, fd::oflags::create | fd::oflags::trunc, fd::rights::read | fd::rights::write);

    return file(fd);
  }

  pub fn open(String &path) throws -> file
  {
    var fd = fd::open(path, fd::oflags::open, fd::rights::read);

    return file(fd);
  }

  pub fn stat(this mut &) throws -> std::filestat
  {
    return this.fd.stat();
  }

  pub fn read(this mut &, u8 mut *data, usize len) throws -> usize
  {
    return this.fd.read(data, len);
  }

  pub fn read_at(this mut &, u64 offset, u8 mut *data, usize len) throws -> usize
  {
    return this.fd.read_at(offset, data, len);
  }

  pub fn write(this mut &, u8 *data, usize len) throws -> usize
  {
    return this.fd.write(data, len);
  }

  pub fn write_at(this mut &, u64 offset, u8 *data, usize len) throws -> usize
  {
    return this.fd.write_at(offset, data, len);
  }

  pub fn putc(this mut &, u8 ch) throws -> usize
  {
    return this.fd.write(&ch, 1);
  }

  pub fn putc(this mut &, char ch) throws -> usize
  {
    var buf = [0; 8];
    var len = std::ctoa(buf.data, buf.end, ch).len;

    return this.fd.write(buf.data, len);
  }
  
  pub fn puts(this mut &, String &str) throws -> usize
  {
    return this.fd.write(str.data, str.len);
  }
  
  pub fn print(this mut &, var & ...args) throws -> usize
  {
    return std::print_to(&mut this, args..., '\n');
  }

  pub fn printf(this mut &, String &format, var & ...args) throws -> usize
  {
    return std::format_to(&mut this, format, args...);
  }
  
  pub fn printf(this mut &, #std::string_literal format, var & ...args) throws -> usize
  {
    return std::format_to(&mut this, format, args...);
  }

  pub file(fd fd)
    : fd(fd)
  {
  }

  pub ~file()
  {
    fd.close();
  }

  file(#file&) = default;

  std::fd fd;
}

#[lifetime(poison(buf))]
pub fn read_into(file mut &fd, std::vector<u8> mut &buf, usize maxread = ~0) throws
{
  var size = cast<usize>(fd.stat().size);

  if (maxread < size)
    size = maxread;

  buf.resize(buf.len + size);
  fd.read(buf.data + (buf.len - size), size);

  return &buf;
}

#[lifetime(poison(buf))]
pub fn read_into(file mut &fd, std::string mut &buf, usize maxread = ~0) throws
{
  var size = cast<usize>(fd.stat().size);

  if (maxread < size)
    size = maxread;

  buf.resize(buf.len + size);
  fd.read(buf.data + (buf.len - size), size);

  return &buf;
}

pub fn readfile_to_vector<Alloc = std::allocator, N = 0>(String &path, Alloc &alloc = Alloc(), usize maxread = ~0) throws
{
  var buf = std::vector<u8, Alloc, N>(alloc);

  std::file::open(path).read_into(&mut buf, maxread);

  return buf;
}

pub fn readfile_to_string<Alloc = std::allocator, N = 0>(String &path, Alloc &alloc = Alloc(), usize maxread = ~0) throws
{
  var buf = std::string<Alloc, N>(alloc);

  std::file::open(path).read_into(&mut buf, maxread);

  return buf;
}

pub fn readfile<Alloc = std::allocator, N = 0>(String &path, Alloc &alloc = Alloc(), usize maxread = ~0) throws
{
  return readfile_to_string<Alloc, N>(path, alloc, maxread);
}

pub fn writefile(String &path, std::string &content) throws
{
  std::file::create(path).write(content.data, content.len);
}

pub struct StdIn
{
  pub fn read(this mut &, u8 mut *data, usize len) -> usize
  {
    try
    {
      return fd(STDIN).read(data, len);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  StdIn() = default;
  StdIn(#StdIn&) = default;
  ~StdIn() = default;
}

pub fn stdin_raw -> file mut &
{
  static instance = #file(fd(STDIN));

  return &instance;
}

pub fn stdin -> StdIn mut &
{
  static instance = #StdIn();

  return &instance;
}

pub struct StdOut
{
  pub fn write(this mut &, u8 *data, usize len) -> usize
  {
    if (len == 0)
      return 0;

    if (*(data + len - 1) == cast('\n') || this.buffer.len < this.n + len)
      return write_cold(&mut this, data, len);

    std::memcpy(this.buffer.data + this.n, data, len);

    this.n += len;

    return len;
  }

  fn write_cold(this mut &, u8 *data, usize len) -> usize
  {
    try
    {
      if (this.n != 0 && this.n + len < this.buffer.len)
      {
        std::memcpy(this.buffer.data + this.n, data, len);

        fd(STDOUT).write(this.buffer.data, this.n + len);
      }
      else
      {
        if (this.n != 0)
          fd(STDOUT).write(this.buffer.data, this.n);

        fd(STDOUT).write(data, len);
      }

      this.n = 0;
    }
    catch(std::error e)
    {
      return 0;
    }

    return len;
  }

  pub fn putc(this mut &, u8 ch) -> usize
  {
    try
    {
      return this.write(&ch, 1);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn putc(this mut &, char ch) -> usize
  {
    try
    {
      var buf = [0; 8];
      var len = std::ctoa(buf.data, buf.end, ch).len;

      return this.write(buf.data, len);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn puts(this mut &, String &str) -> usize
  {
    try
    {
      return this.write(str.data, str.len);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn print(this mut &, var & ...args) -> usize
  {
    try
    {
      return std::print_to(&mut this, args..., '\n');
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn printf(this mut &, String &format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(&mut this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn printf(this mut &, #std::string_literal format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(&mut this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn flush(this mut &) -> void
  {
    try
    {
      if (this.n != 0)
      {
        fd(STDOUT).write(this.buffer.data, this.n);

        this.n = 0;
      }
    }
    catch(std::error e)
    {
    }
  }

  usize n;
  u8[256] buffer;

  std::ticket_lock lock; // TODO: use reentrant lock

  StdOut() = default;
  StdOut(#StdOut&) = default;
  ~StdOut() = default;
}

pub struct StdOutLocked
{
  pub fn write(this mut &, u8 *data, usize len) -> usize
  {
    return this.inner.write(data, len);
  }

  pub fn putc(this mut &, u8 ch) -> usize
  {
    return this.inner.putc(ch);
  }

  pub fn putc(this mut &, char ch) -> usize
  {
    return this.inner.putc(ch);
  }

  pub fn puts(this mut &, String &str) -> usize
  {
    return this.inner.puts(str);
  }

  pub fn print(this mut &, var & ...args) -> usize
  {
    return this.inner.print(args...);
  }

  pub fn printf(this mut &, String &format, var & ...args) -> usize
  {
    return this.inner.printf(format, args...);
  }

  pub fn printf(this mut &, #std::string_literal format, var & ...args) -> usize
  {
    return this.inner.printf(format, args...);
  }

  pub fn flush(this mut &) -> void
  {
    return this.inner.flush();
  }

  StdOut mut &inner;

  StdOutLocked(StdOut mut &inner)
    : inner(&inner)
  {
    inner.lock.lock();
  }

  pub ~StdOutLocked()
  {
    inner.lock.unlock();
  }
}

pub struct StdOutLocker
{
  pub fn lock(this mut &) -> StdOutLocked
  {
    return StdOutLocked(&mut this.inner);
  }

  pub fn write(this mut &, u8 *data, usize len) -> usize
  {
    return this.lock().write(data, len);
  }

  pub fn putc(this mut &, u8 ch) -> usize
  {
    return this.lock().putc(ch);
  }

  pub fn putc(this mut &, char ch) -> usize
  {
    return this.lock().putc(ch);
  }

  pub fn puts(this mut &, String &str) -> usize
  {
    return this.lock().puts(str);
  }

  pub fn print(this mut &, var & ...args) -> usize
  {
    return this.lock().print(args...);
  }

  pub fn printf(this mut &, String &format, var & ...args) -> usize
  {
    return this.lock().printf(format, args...);
  }

  pub fn printf(this mut &, #std::string_literal format, var & ...args) -> usize
  {
    return this.lock().printf(format, args...);
  }

  pub fn flush(this mut &) -> void
  {
    return this.lock().flush();
  }

  StdOut mut &inner;

  StdOutLocker(StdOut mut &inner)
    : inner(&inner)
  {
  }

  pub ~StdOutLocker() = default;
}

pub fn stdout_raw -> file mut &
{
  static instance = #file(fd(STDOUT));

  return &instance;
}

pub fn stdout -> StdOutLocker
{
  static instance = #StdOut();

  return StdOutLocker(&mut instance);
}

pub struct StdErr
{
  pub fn write(this mut &, u8 *data, usize len) -> usize
  {
    try
    {
      return fd(STDERR).write(data, len);
    }
    catch(std::error e)
    {
      return 0;
    }
  }
  
  pub fn putc(this mut &, u8 ch) -> usize
  {
    try
    {
      return this.write(&ch, 1);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn putc(this mut &, char ch) -> usize
  {
    try
    {
      var buf = [0; 8];
      var len = std::ctoa(buf.data, buf.end, ch).len;

      return this.write(buf.data, len);
    }
    catch(std::error e)
    {
      return 0;
    }
  }
  
  pub fn puts(this mut &, String &str) -> usize
  {
    try
    {
      return this.write(str.data, str.len);
    }
    catch(std::error e)
    {
      return 0;
    }
  }
  
  pub fn print(this mut &, var & ...args) -> usize
  {
    try
    {
      return std::print_to(&mut this, args..., '\n');
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn printf(this mut &, String &format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(&mut this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn printf(this mut &, #std::string_literal format, var & ...args) -> usize
  {
    try
    {
      return std::format_to(&mut this, format, args...);
    }
    catch(std::error e)
    {
      return 0;
    }
  }

  pub fn flush(this mut &) -> void
  {
  }

  StdErr() = default;
  StdErr(#StdErr&) = default;
  ~StdErr() = default;
}

pub fn stderr_raw -> file mut &
{
  static instance = #file(fd(STDERR));

  return &instance;
}

pub fn stderr -> StdErr mut &
{
  static instance = #StdErr();

  return &instance;
}

pub fn putc(u8 ch) -> usize
{
  return stdout.lock().inner.putc(ch);
}

pub fn putc(char ch) -> usize
{
  return stdout.lock().inner.putc(ch);
}

pub fn fputc(StdOutLocked &&os, u8 ch) -> usize
{
  return os.inner.putc(ch);
}

pub fn fputc(StdOutLocker &&os, u8 ch) -> usize
{
  return os.lock().inner.putc(ch);
}

pub fn fputc(StdOutLocked &&os, char ch) -> usize
{
  return os.inner.putc(ch);
}

pub fn fputc(StdOutLocker &&os, char ch) -> usize
{
  return os.lock().inner.putc(ch);
}

pub fn fputc(StdErr &&os, u8 ch) -> usize
{
  return os.putc(ch);
}

pub fn fputc(StdErr &&os, char ch) -> usize
{
  return os.putc(ch);
}

pub fn fputc(file &&os, u8 ch) throws -> usize
{
  return os.putc(ch);
}

pub fn fputc(file &&os, char ch) throws -> usize
{
  return os.putc(ch);
}

pub fn puts(String &str) -> usize
{
  return stdout.lock().inner.puts(str);
}

pub fn fputs(StdOutLocked &&os, String &str) -> usize
{
  return os.inner.puts(str);
}

pub fn fputs(StdOutLocker &&os, String &str) -> usize
{
  return os.lock().inner.puts(str);
}

pub fn fputs(StdErr &&os, String &str) -> usize
{
  return os.puts(str);
}

pub fn fputs(file &&os, String &str) throws -> usize
{
  return os.puts(str);
}

pub fn print(var & ...args) -> usize
{
  return stdout.lock().inner.print(args...);
}

pub fn printf(String &format, var & ...args) -> usize
{
  return stdout.lock().inner.printf(format, args...);
}

pub fn printf(#std::string_literal format, var & ...args) -> usize
{
  return stdout.lock().inner.printf(format, args...);
}

pub fn fprint(StdOutLocked &&os, var & ...args) -> usize
{
  return os.inner.print(args...);
}

pub fn fprint(StdOutLocker &&os, var & ...args) -> usize
{
  return os.lock().inner.print(args...);
}

pub fn fprintf(StdOutLocked &&os, String &format, var & ...args) -> usize
{
  return os.inner.printf(format, args...);
}

pub fn fprintf(StdOutLocker &&os, String &format, var & ...args) -> usize
{
  return os.lock().inner.printf(format, args...);
}

pub fn fprintf(StdOutLocked &&os, #std::string_literal format, var & ...args) -> usize
{
  return os.inner.printf(format, args...);
}

pub fn fprintf(StdOutLocker &&os, #std::string_literal format, var & ...args) -> usize
{
  return os.lock().inner.printf(format, args...);
}

pub fn fprint(StdErr &&os, var & ...args) -> usize
{
  return os.print(args...);
}

pub fn fprintf(StdErr &&os, String &format, var & ...args) -> usize
{
  return os.printf(format, args...);
}

pub fn fprintf(StdErr &&os, #std::string_literal format, var & ...args) -> usize
{
  return os.printf(format, args...);
}

pub fn fprint(file &&os, var & ...args) throws -> usize
{
  return os.print(args...);
}

pub fn fprintf(file &&os, String &format, var & ...args) throws -> usize
{
  return os.printf(format, args...);
}

pub fn fprintf(file &&os, #std::string_literal format, var & ...args) throws -> usize
{
  return os.printf(format, args...);
}
