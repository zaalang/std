//
// std error
//

import std.string;

pub struct error_category
{
  error_category() = default;
  error_category(error_category &) = default;
  ~error_category() = default;
}

pub struct source_location
{
  pub source_location(source_location &that) = default;
  pub fn =(source_location mut &, source_location &) -> source_location mut & = default;
  pub ~source_location() = default;

  pub source_location((std::string_literal, int, int, std::string_literal) &site)
    : lineno(site.1),
      file_name(site.0),
      function_name(site.3)
  {
  }

  pub int lineno;
  pub std::string_literal file_name;
  pub std::string_literal function_name;
}

pub struct error
{
  pub i64 value;
  pub error_category *category;
  // pub source_location location; ?
  // pub backtrace ?
  
  pub error(error &that) = default;
  pub ~error() = default;
}

pub enum errc : u32
{
  file_not_found = 2,
  invalid_argument = 22,
  result_out_of_range = 34,
  value_too_large = 112,

  pub fn bool(errc code) -> bool
  {
    return cast<u32>(code) != 0;
  }
}

pub struct system_error
{
  pub fn system_error(errc code) -> error
  { 
    var result = error(void);
    
    result.value = cast(code);
    result.category = category();
    
    return result;
  }

  pub fn category() -> system_error_category *
  {
    static instance = #system_error_category();

    return &instance;
  }
}

pub struct system_error_category : error_category
{
  system_error_category() = default;
  system_error_category(system_error_category &) = default;
  ~system_error_category() = default;
}

pub fn ==(error &lhs, error &rhs) -> bool
{
  return lhs.category == rhs.category && lhs.value == rhs.value;
}

pub fn ==(error &lhs, errc rhs) -> bool
{
  return lhs.category == system_error::category() && lhs.value == cast(rhs);
}
